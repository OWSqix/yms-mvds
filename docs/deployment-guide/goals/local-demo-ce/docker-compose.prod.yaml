version: '3.8'

services:
  # Nginx 리버스 프록시 - 모든 트래픽을 처리
  nginx-proxy:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"      # HTTP (표준 포트 80)
      - "443:443"    # HTTPS (표준 포트 443)
      - "8080:80"    # HTTP (백업 포트 8080 - 기존 호환성 유지)
      - "8443:443"   # HTTPS (백업 포트 8443 - 기존 호환성 유지)
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    networks:
      - edc-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Consumer (Ymatics) - 포트 매핑 제거 (내부 통신만)
  consumer:
    image: 'caddy:2.8'
    restart: 'always'
    expose:
      - "80"
    volumes:
      - './caddyfiles/Caddyfile.cp-with-integrated-dp:/etc/caddy/Caddyfile'
    environment:
      CONNECTOR_UPSTREAM_HOST: 'consumer-connector'
      FRONTEND_UPSTREAM_HOST: 'consumer-ui'
    networks:
      - edc-network

  consumer-ui:
    image: 'ymslogoui:1.0'
    restart: 'always'
    environment:
      EDC_UI_MANAGEMENT_API_URL: '/api/management'
      EDC_UI_MANAGEMENT_API_KEY: 'SomeOtherApiKey'
      EDC_UI_CONFIG_URL: 'false'
      NGINX_ACCESS_LOG: 'off'
      EDC_UI_ACTIVE_PROFILE: 'ymatics-edc-connector'
      EDC_UI_USE_FAKE_BACKEND: 'false'
      EDC_UI_CONNECTOR_ENDPOINT: '/api/dsp'
      EDC_UI_MANAGEMENT_API_URL_SHOWN_IN_DASHBOARD: '/api/management'
      # 포트 없이 접근 가능한 URL
      EDC_UI_CATALOG_URLS: 'http://provider/api/dsp,http://consumer2/api/dsp,http://khu/api/dsp'
    networks:
      - edc-network

  consumer-connector:
    image: 'ghcr.io/sovity/edc-ce:latest'
    restart: 'always'
    depends_on:
      consumer-connector-db:
        condition: 'service_healthy'
    extra_hosts:
      - "data-space.kr:172.25.0.1"
    environment:
      sovity.deployment.kind: 'control-plane-with-integrated-data-plane'
      # 포트 없이 접근
      sovity.edc.fqdn.public: 'data-space.kr'
      sovity.edc.fqdn.internal: 'consumer-connector'
      edc.control.endpoint: 'http://consumer-connector:11004/api/control'
      sovity.jdbc.url: 'jdbc:postgresql://consumer-connector-db:5432/db-name'
      sovity.jdbc.user: 'db-user'
      sovity.jdbc.password: 'db-pass'
      edc.ui.active.profile: 'ymatics-edc-connector'
      edc.ui.logout.url: 'https://example.com'
      edc.ui.catalog.urls: 'http://provider/api/dsp, http://consumer2/api/dsp, http://khu/api/dsp'
      sovity.management.api.iam.kind: 'management-iam-api-key'
      edc.api.auth.key: 'SomeOtherApiKey'
      sovity.edc.title: 'Ymatics Connector'
      sovity.edc.description: 'Ymatics EDC Connector'
      sovity.edc.maintainer.name: 'Ymatics'
      sovity.edc.maintainer.url: 'https://data-space.kr/ymatics'
      sovity.edc.curator.name: 'Ymatics Curator'
      sovity.edc.curator.url: 'https://data-space.kr/ymatics'
      sovity.dataspace.kind: 'sovity-mock-iam'
      edc.participant.id: 'ymatics'
      sovity.http.protocol: 'http://'
      sovity.print.config: 'true'
      sovity.logging.level: 'DEBUG'
      sovity.logging.kind: 'console'
      sovity.micrometer.enabled: 'true'
    networks:
      - edc-network

  consumer-connector-db:
    image: 'docker.io/postgres:16-alpine'
    restart: 'always'
    environment:
      POSTGRES_USER: 'db-user'
      POSTGRES_PASSWORD: 'db-pass'
      POSTGRES_DB: 'db-name'
    healthcheck:
      test:
        - 'CMD-SHELL'
        - 'pg_isready -U db-user --dbname=db-name'
      interval: '1s'
      timeout: '5s'
      retries: 10
    volumes:
      - 'consumer-connector-db-data:/var/lib/postgresql/data'
    networks:
      - edc-network

  # Provider (KOTI) - 포트 매핑 제거
  provider:
    image: 'caddy:2.8'
    restart: 'always'
    expose:
      - "80"
    volumes:
      - './caddyfiles/Caddyfile.cp-with-integrated-dp:/etc/caddy/Caddyfile'
    environment:
      CONNECTOR_UPSTREAM_HOST: 'provider-connector'
      FRONTEND_UPSTREAM_HOST: 'provider-ui'
    networks:
      - edc-network

  provider-ui:
    image: 'kotilogoui:1.0'
    restart: 'always'
    environment:
      EDC_UI_MANAGEMENT_API_URL: '/api/management'
      EDC_UI_MANAGEMENT_API_KEY: 'SomeOtherApiKey'
      EDC_UI_CONFIG_URL: 'false'
      NGINX_ACCESS_LOG: 'off'
      EDC_UI_ACTIVE_PROFILE: 'koti-edc-connector'
      EDC_UI_USE_FAKE_BACKEND: 'false'
      EDC_UI_CONNECTOR_ENDPOINT: '/api/dsp'
      EDC_UI_MANAGEMENT_API_URL_SHOWN_IN_DASHBOARD: '/api/management'
      EDC_UI_CATALOG_URLS: 'http://consumer/api/dsp,http://consumer2/api/dsp,http://khu/api/dsp'
    networks:
      - edc-network

  provider-connector:
    image: 'ghcr.io/sovity/edc-ce:latest'
    restart: 'always'
    depends_on:
      provider-connector-db:
        condition: 'service_healthy'
    extra_hosts:
      - "data-space.kr:172.25.0.1"
    environment:
      sovity.deployment.kind: 'control-plane-with-integrated-data-plane'
      sovity.edc.fqdn.public: 'data-space.kr'
      sovity.edc.fqdn.internal: 'provider-connector'
      edc.control.endpoint: 'http://provider-connector:11004/api/control'
      sovity.jdbc.url: 'jdbc:postgresql://provider-connector-db:5432/db-name'
      sovity.jdbc.user: 'db-user'
      sovity.jdbc.password: 'db-pass'
      edc.ui.active.profile: 'koti-edc-connector'
      edc.ui.logout.url: 'https://example.com'
      edc.ui.catalog.urls: 'http://consumer/api/dsp, http://consumer2/api/dsp, http://khu/api/dsp'
      sovity.management.api.iam.kind: 'management-iam-api-key'
      edc.api.auth.key: 'SomeOtherApiKey'
      sovity.edc.title: 'KOTI Connector'
      sovity.edc.description: 'Korea Transport Institute EDC Connector'
      sovity.edc.maintainer.name: 'KOTI'
      sovity.edc.maintainer.url: 'https://data-space.kr/koti'
      sovity.edc.curator.name: 'KOTI Curator'
      sovity.edc.curator.url: 'https://data-space.kr/koti'
      sovity.dataspace.kind: 'sovity-mock-iam'
      edc.participant.id: 'koti'
      sovity.http.protocol: 'http://'
      sovity.print.config: 'true'
      sovity.logging.level: 'DEBUG'
      sovity.logging.kind: 'console'
      sovity.micrometer.enabled: 'true'
    networks:
      - edc-network

  provider-connector-db:
    image: 'docker.io/postgres:16-alpine'
    restart: 'always'
    environment:
      POSTGRES_USER: 'db-user'
      POSTGRES_PASSWORD: 'db-pass'
      POSTGRES_DB: 'db-name'
    healthcheck:
      test:
        - 'CMD-SHELL'
        - 'pg_isready -U db-user --dbname=db-name'
      interval: '1s'
      timeout: '5s'
      retries: 10
    volumes:
      - 'provider-connector-db-data:/var/lib/postgresql/data'
    networks:
      - edc-network

  # Consumer2 (KALDA) - 포트 매핑 제거
  consumer2:
    image: 'caddy:2.8'
    restart: 'always'
    expose:
      - "80"
    volumes:
      - './caddyfiles/Caddyfile.cp-with-integrated-dp:/etc/caddy/Caddyfile'
    environment:
      CONNECTOR_UPSTREAM_HOST: 'consumer2-connector'
      FRONTEND_UPSTREAM_HOST: 'consumer2-ui'
    networks:
      - edc-network

  consumer2-ui:
    image: 'kaldalogoui:1.0'
    restart: 'always'
    environment:
      EDC_UI_MANAGEMENT_API_URL: '/api/management'
      EDC_UI_MANAGEMENT_API_KEY: 'SomeOtherApiKey'
      EDC_UI_CONFIG_URL: 'false'
      NGINX_ACCESS_LOG: 'off'
      EDC_UI_ACTIVE_PROFILE: 'kalda-edc-connector'
      EDC_UI_USE_FAKE_BACKEND: 'false'
      EDC_UI_CONNECTOR_ENDPOINT: '/api/dsp'
      EDC_UI_MANAGEMENT_API_URL_SHOWN_IN_DASHBOARD: '/api/management'
      EDC_UI_CATALOG_URLS: 'http://provider/api/dsp,http://consumer/api/dsp,http://khu/api/dsp'
    networks:
      - edc-network

  consumer2-connector:
    image: 'ghcr.io/sovity/edc-ce:latest'
    restart: 'always'
    depends_on:
      consumer2-connector-db:
        condition: 'service_healthy'
    extra_hosts:
      - "data-space.kr:172.25.0.1"
    environment:
      sovity.deployment.kind: 'control-plane-with-integrated-data-plane'
      sovity.edc.fqdn.public: 'data-space.kr'
      sovity.edc.fqdn.internal: 'consumer2-connector'
      edc.control.endpoint: 'http://consumer2-connector:11004/api/control'
      sovity.jdbc.url: 'jdbc:postgresql://consumer2-connector-db:5432/db-name'
      sovity.jdbc.user: 'db-user'
      sovity.jdbc.password: 'db-pass'
      edc.ui.active.profile: 'kalda-edc-connector'
      edc.ui.logout.url: 'https://example.com'
      edc.ui.catalog.urls: 'http://consumer/api/dsp, http://provider/api/dsp, http://khu/api/dsp'
      sovity.management.api.iam.kind: 'management-iam-api-key'
      edc.api.auth.key: 'SomeOtherApiKey'
      sovity.edc.title: 'KALDA Connector'
      sovity.edc.description: 'Korea Airports Corporation EDC Connector'
      sovity.edc.maintainer.name: 'KALDA'
      sovity.edc.maintainer.url: 'https://data-space.kr/kalda'
      sovity.edc.curator.name: 'KALDA Curator'
      sovity.edc.curator.url: 'https://data-space.kr/kalda'
      sovity.dataspace.kind: 'sovity-mock-iam'
      edc.participant.id: 'kalda'
      sovity.http.protocol: 'http://'
      sovity.print.config: 'true'
      sovity.logging.level: 'DEBUG'
      sovity.logging.kind: 'console'
      sovity.micrometer.enabled: 'true'
    networks:
      - edc-network

  consumer2-connector-db:
    image: 'docker.io/postgres:16-alpine'
    restart: 'always'
    environment:
      POSTGRES_USER: 'db-user'
      POSTGRES_PASSWORD: 'db-pass'
      POSTGRES_DB: 'db-name'
    healthcheck:
      test:
        - 'CMD-SHELL'
        - 'pg_isready -U db-user --dbname=db-name'
      interval: '1s'
      timeout: '5s'
      retries: 10
    volumes:
      - 'consumer2-connector-db-data:/var/lib/postgresql/data'
    networks:
      - edc-network

  # KHU - 포트 매핑 제거
  khu:
    image: 'caddy:2.8'
    restart: 'always'
    expose:
      - "80"
    volumes:
      - './caddyfiles/Caddyfile.cp-with-integrated-dp:/etc/caddy/Caddyfile'
    environment:
      CONNECTOR_UPSTREAM_HOST: 'khu-connector'
      FRONTEND_UPSTREAM_HOST: 'khu-ui'
    networks:
      - edc-network

  khu-ui:
    image: 'khulogoui:1.0'
    restart: 'always'
    environment:
      EDC_UI_MANAGEMENT_API_URL: '/api/management'
      EDC_UI_MANAGEMENT_API_KEY: 'SomeOtherApiKey'
      EDC_UI_CONFIG_URL: 'false'
      NGINX_ACCESS_LOG: 'off'
      EDC_UI_ACTIVE_PROFILE: 'khu-edc-connector'
      EDC_UI_USE_FAKE_BACKEND: 'false'
      EDC_UI_CONNECTOR_ENDPOINT: '/api/dsp'
      EDC_UI_MANAGEMENT_API_URL_SHOWN_IN_DASHBOARD: '/api/management'
      EDC_UI_CATALOG_URLS: 'http://provider/api/dsp,http://consumer/api/dsp,http://consumer2/api/dsp'
    networks:
      - edc-network

  khu-connector:
    image: 'ghcr.io/sovity/edc-ce:latest'
    restart: 'always'
    depends_on:
      khu-connector-db:
        condition: 'service_healthy'
    extra_hosts:
      - "data-space.kr:172.25.0.1"
    environment:
      sovity.deployment.kind: 'control-plane-with-integrated-data-plane'
      sovity.edc.fqdn.public: 'data-space.kr'
      sovity.edc.fqdn.internal: 'khu-connector'
      edc.control.endpoint: 'http://khu-connector:11004/api/control'
      sovity.jdbc.url: 'jdbc:postgresql://khu-connector-db:5432/db-name'
      sovity.jdbc.user: 'db-user'
      sovity.jdbc.password: 'db-pass'
      edc.ui.active.profile: 'khu-edc-connector'
      edc.ui.logout.url: 'https://example.com'
      edc.ui.catalog.urls: 'http://provider/api/dsp, http://consumer/api/dsp, http://consumer2/api/dsp'
      sovity.management.api.iam.kind: 'management-iam-api-key'
      edc.api.auth.key: 'SomeOtherApiKey'
      sovity.edc.title: 'KHU Connector'
      sovity.edc.description: 'Kyung Hee University EDC Connector'
      sovity.edc.maintainer.name: 'KHU'
      sovity.edc.maintainer.url: 'https://khu.ac.kr'
      sovity.edc.curator.name: 'KHU Curator'
      sovity.edc.curator.url: 'https://khu.ac.kr'
      sovity.dataspace.kind: 'sovity-mock-iam'
      edc.participant.id: 'khu'
      sovity.http.protocol: 'http://'
      sovity.print.config: 'true'
      sovity.logging.level: 'DEBUG'
      sovity.logging.kind: 'console'
      sovity.micrometer.enabled: 'true'
    networks:
      - edc-network

  khu-connector-db:
    image: 'docker.io/postgres:16-alpine'
    restart: 'always'
    environment:
      POSTGRES_USER: 'db-user'
      POSTGRES_PASSWORD: 'db-pass'
      POSTGRES_DB: 'db-name'
    healthcheck:
      test:
        - 'CMD-SHELL'
        - 'pg_isready -U db-user --dbname=db-name'
      interval: '1s'
      timeout: '5s'
      retries: 10
    volumes:
      - 'khu-connector-db-data:/var/lib/postgresql/data'
    networks:
      - edc-network

  # Backend Services 
  provider-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: 'sovity-ce-local-demo-datasource-and-datasink-backend:prod'
    restart: always
    expose:
      - "8002"
      - "8003"
    volumes:
      - ./provider/data:/app/data
      - ./provider/backend/logs:/app/backend/logs
    environment:
      - LOG_LEVEL=debug
      - HOST=0.0.0.0
    networks:
      - edc-network

  consumer-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: 'sovity-ce-local-demo-datasource-and-datasink-backend:prod'
    restart: always
    expose:
      - "8002"
      - "8003"
    volumes:
      - ./consumer/data:/app/data
      - ./consumer/backend/logs:/app/backend/logs
    environment:
      - LOG_LEVEL=debug
      - HOST=0.0.0.0
    networks:
      - edc-network

  consumer2-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: 'sovity-ce-local-demo-datasource-and-datasink-backend:prod'
    restart: always
    expose:
      - "8002"
      - "8003"
    volumes:
      - ./consumer2/data:/app/data
      - ./consumer2/backend/logs:/app/backend/logs
    environment:
      - LOG_LEVEL=debug
      - HOST=0.0.0.0
    networks:
      - edc-network

  khu-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: 'sovity-ce-local-demo-datasource-and-datasink-backend:prod'
    restart: always
    expose:
      - "8002"
      - "8003"
    volumes:
      - ./khu/data:/app/data
      - ./khu/backend/logs:/app/backend/logs
    environment:
      - LOG_LEVEL=debug
      - HOST=0.0.0.0
    networks:
      - edc-network

  # Frontend Services 
  provider-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production  # production 모드 사용
      args:
        - DATA_SINK_API_URL=/koti/sink/api
        - DATA_SOURCE_API_URL=/koti/source/api
        - BASE_HREF=/koti/sink/
        - DEPLOY_URL=/koti/sink/
    image: 'sovity-ce-local-demo-datasource-and-datasink-provider-frontend:prod'
    expose:
      - "4200"
    environment:
      - DATA_SINK_API_URL=/koti/sink/api
      - DATA_SOURCE_API_URL=/koti/source/api
    depends_on:
      - provider-backend
    networks:
      - edc-network

  consumer-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production  # production 모드 사용
      args:
        - DATA_SINK_API_URL=/ymatics/sink/api
        - DATA_SOURCE_API_URL=/ymatics/source/api
        - BASE_HREF=/ymatics/sink/
        - DEPLOY_URL=/ymatics/sink/
    image: 'sovity-ce-local-demo-datasource-and-datasink-consumer-frontend:prod'
    expose:
      - "4200"
    environment:
      - DATA_SINK_API_URL=/ymatics/sink/api
      - DATA_SOURCE_API_URL=/ymatics/source/api
    depends_on:
      - consumer-backend
    networks:
      - edc-network

  consumer2-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production  # production 모드 사용
      args:
        - DATA_SINK_API_URL=/kalda/sink/api
        - DATA_SOURCE_API_URL=/kalda/source/api
        - BASE_HREF=/kalda/sink/
        - DEPLOY_URL=/kalda/sink/
    image: 'sovity-ce-local-demo-datasource-and-datasink-consumer2-frontend:prod'
    expose:
      - "4200"
    environment:
      - DATA_SINK_API_URL=/kalda/sink/api
      - DATA_SOURCE_API_URL=/kalda/source/api
    depends_on:
      - consumer2-backend
    networks:
      - edc-network

  khu-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production  # production 모드 사용
      args:
        - DATA_SINK_API_URL=/khu/sink/api
        - DATA_SOURCE_API_URL=/khu/source/api
        - BASE_HREF=/khu/sink/
        - DEPLOY_URL=/khu/sink/
    image: 'sovity-ce-local-demo-datasource-and-datasink-khu-frontend:prod'
    expose:
      - "4200"
    environment:
      - DATA_SINK_API_URL=/khu/sink/api
      - DATA_SOURCE_API_URL=/khu/source/api
    depends_on:
      - khu-backend
    networks:
      - edc-network

networks:
  edc-network:
    driver: bridge

volumes:
  consumer-connector-db-data:
    driver: 'local'
  provider-connector-db-data:
    driver: 'local'
  consumer2-connector-db-data:
    driver: 'local'
  khu-connector-db-data:
    driver: 'local'