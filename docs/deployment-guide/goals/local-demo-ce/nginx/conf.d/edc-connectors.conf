# 통합된 Data Space 플랫폼 - data-space.kr
# 표준 HTTP 포트 80 지원
server {
    listen 80;
    server_name data-space.kr 121.134.143.53 localhost _;
    
    # HTTP only - HTTPS 리다이렉트 비활성화
    add_header Strict-Transport-Security "max-age=0; includeSubDomains" always;
    
    # ===========================
    # 메인 랜딩/대시보드 페이지
    # ===========================
    location = / {
        return 301 /ymatics/;
    }
    
    # ===========================
    # Ymatics (Consumer) - 기본 기관
    # ===========================
    
    # EDC Connector UI (메인 대시보드)
    location = /ymatics {
        return 301 /ymatics/;
    }
    location = /ymatics/dashboard {
        return 301 /ymatics/;
    }
    location /ymatics/ {
        proxy_pass http://consumer:80/;
        proxy_set_header Host $host;  # 고정된 Host 헤더
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support for EDC
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # Data Sink Services
    location = /ymatics/sink {
        return 301 /ymatics/sink/;
    }
    location /ymatics/sink/ {
        proxy_pass http://consumer-frontend:4200/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # SPA 라우팅 지원
        proxy_intercept_errors on;
        error_page 404 = @ymatics_sink_fallback;
    }
    
    # Ymatics Sink SPA Fallback
    location @ymatics_sink_fallback {
        proxy_pass http://consumer-frontend:4200;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    location /ymatics/sink/api/received {
        proxy_pass http://consumer-backend:8002/received/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location /ymatics/sink/api/ {
        proxy_pass http://consumer-backend:8002/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
    }
    
    # Data Source Services
    location = /ymatics/source {
        return 301 /ymatics/source/;
    }
    location /ymatics/source/ {
        proxy_pass http://consumer-frontend:4200/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # SPA 라우팅 지원
        proxy_intercept_errors on;
        error_page 404 = @ymatics_source_fallback;
    }
    
    # Ymatics Source SPA Fallback
    location @ymatics_source_fallback {
        proxy_pass http://consumer-frontend:4200;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    location /ymatics/source/api/ {
        proxy_pass http://consumer-backend:8003/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
    }
    
    # ===========================
    # KOTI (Provider) - 데이터 제공자
    # ===========================
    
    # EDC Connector UI (메인 대시보드)
    location = /koti {
        return 301 /koti/;
    }
    location = /koti/dashboard {
        return 301 /koti/;
    }
    location /koti/ {
        proxy_pass http://provider:80/;
        proxy_set_header Host $host;  # 고정된 Host 헤더
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support for EDC
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # Data Sink Services
    location = /koti/sink {
        return 301 /koti/sink/;
    }
    location /koti/sink/ {
        proxy_pass http://provider-frontend:4200/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # SPA 라우팅 지원
        proxy_intercept_errors on;
        error_page 404 = @koti_sink_fallback;
    }
    
    # KOTI Sink SPA Fallback
    location @koti_sink_fallback {
        proxy_pass http://provider-frontend:4200;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    location /koti/sink/api/received {
        proxy_pass http://provider-backend:8002/received/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location /koti/sink/api/ {
        proxy_pass http://provider-backend:8002/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
    }
    
    # Data Source Services
    location = /koti/source {
        return 301 /koti/source/;
    }
    location /koti/source/ {
        proxy_pass http://provider-frontend:4200/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # SPA 라우팅 지원
        proxy_intercept_errors on;
        error_page 404 = @koti_source_fallback;
    }
    
    # KOTI Source SPA Fallback
    location @koti_source_fallback {
        proxy_pass http://provider-frontend:4200;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    location /koti/source/api/ {
        proxy_pass http://provider-backend:8003/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
    }
    
    # ===========================
    # KALDA (Consumer2) - 한국국토교통데이터진흥협회
    # ===========================
    
    # EDC Connector UI (메인 대시보드)
    location = /kalda {
        return 301 /kalda/;
    }
    location = /kalda/dashboard {
        return 301 /kalda/;
    }
    location /kalda/ {
        proxy_pass http://consumer2:80/;
        proxy_set_header Host $host;  # 고정된 Host 헤더
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support for EDC
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # Data Sink Services
    location = /kalda/sink {
        return 301 /kalda/sink/;
    }
    location /kalda/sink/ {
        proxy_pass http://consumer2-frontend:4200/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # SPA 라우팅 지원
        proxy_intercept_errors on;
        error_page 404 = @kalda_sink_fallback;
    }
    
    # KALDA Sink SPA Fallback
    location @kalda_sink_fallback {
        proxy_pass http://consumer2-frontend:4200;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    location /kalda/sink/api/received {
        proxy_pass http://consumer2-backend:8002/received/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location /kalda/sink/api/ {
        proxy_pass http://consumer2-backend:8002/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
    }
    
    # Data Source Services
    location = /kalda/source {
        return 301 /kalda/source/;
    }
    location /kalda/source/ {
        proxy_pass http://consumer2-frontend:4200/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # SPA 라우팅 지원
        proxy_intercept_errors on;
        error_page 404 = @kalda_source_fallback;
    }
    
    # KALDA Source SPA Fallback
    location @kalda_source_fallback {
        proxy_pass http://consumer2-frontend:4200;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    location /kalda/source/api/ {
        proxy_pass http://consumer2-backend:8003/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
    }
    
    # ===========================
    # KHU (경희대학교) - 대학
    # ===========================
    
    # EDC Connector UI (메인 대시보드)
    location = /khu {
        return 301 /khu/;
    }
    location = /khu/dashboard {
        return 301 /khu/;
    }
    location /khu/ {
        proxy_pass http://khu:80/;
        proxy_set_header Host $host;  # 고정된 Host 헤더
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support for EDC
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # Data Sink Services
    location = /khu/sink {
        return 301 /khu/sink/;
    }
    location /khu/sink/ {
        proxy_pass http://khu-frontend:4200/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # SPA 라우팅 지원
        proxy_intercept_errors on;
        error_page 404 = @khu_sink_fallback;
    }
    
    # KHU Sink SPA Fallback
    location @khu_sink_fallback {
        proxy_pass http://khu-frontend:4200;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    location /khu/sink/api/received {
        proxy_pass http://khu-backend:8002/received/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location /khu/sink/api/ {
        proxy_pass http://khu-backend:8002/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
    }
    
    # Data Source Services
    location = /khu/source {
        return 301 /khu/source/;
    }
    location /khu/source/ {
        proxy_pass http://khu-frontend:4200/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # SPA 라우팅 지원
        proxy_intercept_errors on;
        error_page 404 = @khu_source_fallback;
    }
    
    # KHU Source SPA Fallback
    location @khu_source_fallback {
        proxy_pass http://khu-frontend:4200;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    location /khu/source/api/ {
        proxy_pass http://khu-backend:8003/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
    }

    # ===========================
    # Global Assets Fallback Routing
    # ===========================
    # Angular 앱들이 base href를 무시하고 절대경로로 요청하는 에셋들을 처리
    
    # 기본 assets 라우팅 - Referer 기반으로 동적 라우팅
    location /assets/ {
        # Referer 기반으로 각 서비스의 UI로 라우팅
        set $target_ui "consumer-ui:8080";
        
        if ($http_referer ~ "^https?://[^/]+/ymatics") {
            set $target_ui "consumer-ui:8080";
        }
        if ($http_referer ~ "^https?://[^/]+/koti") {
            set $target_ui "provider-ui:8080";
        }
        if ($http_referer ~ "^https?://[^/]+/kalda") {
            set $target_ui "consumer2-ui:8080";
        }
        if ($http_referer ~ "^https?://[^/]+/khu") {
            set $target_ui "khu-ui:8080";
        }
        
        proxy_pass http://$target_ui;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Cache assets
        expires 1h;
        add_header Vary Referer;
        add_header Cache-Control "public";
    }
    
    # ===========================
    # Global API Management Routing
    # ===========================
    # Angular 앱들이 base href를 무시하고 절대경로로 요청하는 API 호출들을 처리
    
    location /api/management/ {
        # Referer 기반으로 각 서비스의 Management API로 라우팅
        set $target_service "consumer";
        
        if ($http_referer ~ "^https?://[^/]+/ymatics") {
            set $target_service "consumer";
        }
        if ($http_referer ~ "^https?://[^/]+/koti") {
            set $target_service "provider";
        }
        if ($http_referer ~ "^https?://[^/]+/kalda") {
            set $target_service "consumer2";
        }
        if ($http_referer ~ "^https?://[^/]+/khu") {
            set $target_service "khu";
        }
        
        proxy_pass http://$target_service:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # EDC API에 필요한 헤더들
        proxy_set_header X-Forwarded-Prefix /;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # DSP (Data Space Protocol) API 라우팅
    location /api/dsp {
        # Referer 기반으로 각 서비스의 DSP API로 라우팅
        set $target_service "consumer";
        
        if ($http_referer ~ "^https?://[^/]+/ymatics") {
            set $target_service "consumer";
        }
        if ($http_referer ~ "^https?://[^/]+/koti") {
            set $target_service "provider";
        }
        if ($http_referer ~ "^https?://[^/]+/kalda") {
            set $target_service "consumer2";
        }
        if ($http_referer ~ "^https?://[^/]+/khu") {
            set $target_service "khu";
        }
        
        proxy_pass http://$target_service:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # DSP API에 필요한 헤더들
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # 직접 파일 API 호출을 위한 라우팅 (프론트엔드에서 축약된 경로 사용 시)
    location ~ ^/files/?$ {
        set $backend_service "consumer-backend:8003";
        if ($http_referer ~ "^https?://[^/]+/ymatics") {
            set $backend_service "consumer-backend:8003";
        }
        if ($http_referer ~ "^https?://[^/]+/koti") {
            set $backend_service "provider-backend:8003";
        }
        if ($http_referer ~ "^https?://[^/]+/kalda") {
            set $backend_service "consumer2-backend:8003";
        }
        if ($http_referer ~ "^https?://[^/]+/khu") {
            set $backend_service "khu-backend:8003";
        }
        
        proxy_pass http://$backend_service/files/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
    }

}