/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import de.sovity.edc.client.gen.JSON;

/**
 * Data for terminating a Contract Agreement
 */
@ApiModel(description = "Data for terminating a Contract Agreement")
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ContractTerminationRequest {
  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  @javax.annotation.Nonnull
  private String detail;
  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  @javax.annotation.Nonnull
  private String reason;

  public ContractTerminationRequest() {
  }

  public ContractTerminationRequest detail(@javax.annotation.Nonnull String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * A user explanation to detail why the contract was terminated.
   * @return detail
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A user explanation to detail why the contract was terminated.")
  public String getDetail() {
    return detail;
  }

  public void setDetail(@javax.annotation.Nonnull String detail) {
    this.detail = detail;
  }

  public ContractTerminationRequest reason(@javax.annotation.Nonnull String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * A short reason why this contract was terminated
   * @return reason
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A short reason why this contract was terminated")
  public String getReason() {
    return reason;
  }

  public void setReason(@javax.annotation.Nonnull String reason) {
    this.reason = reason;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractTerminationRequest {\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("detail");
    openapiFields.add("reason");
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("detail");
    openapiRequiredFields.add("reason");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContractTerminationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!ContractTerminationRequest.openapiRequiredFields.isEmpty()) {
        // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in ContractTerminationRequest is not found in the empty JSON string", ContractTerminationRequest.openapiRequiredFields.toString()));
      }
    }
    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!ContractTerminationRequest.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContractTerminationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : ContractTerminationRequest.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if (!jsonObj.get("detail").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detail").toString()));
    }
    if (!jsonObj.get("reason").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
    }
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!ContractTerminationRequest.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'ContractTerminationRequest' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<ContractTerminationRequest> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(ContractTerminationRequest.class));
      return (TypeAdapter<T>) new TypeAdapter<ContractTerminationRequest>() {
        @Override
        public void write(JsonWriter out, ContractTerminationRequest value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        @Override
        public ContractTerminationRequest read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of ContractTerminationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContractTerminationRequest
   * @throws IOException if the JSON string is invalid with respect to ContractTerminationRequest
   */
  public static ContractTerminationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractTerminationRequest.class);
  }

  /**
   * Convert an instance of ContractTerminationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }


  public static class ContractTerminationRequestBuilder {
    private String detail;
    private String reason;

    ContractTerminationRequestBuilder() {
    }

    /**
     * @return {@code this}.
     */
    public ContractTerminationRequest.ContractTerminationRequestBuilder detail(@javax.annotation.Nonnull final String detail) {
      if (detail == null) {
        throw new NullPointerException("detail is marked non-null but is null");
      }
      this.detail = detail;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public ContractTerminationRequest.ContractTerminationRequestBuilder reason(@javax.annotation.Nonnull final String reason) {
      if (reason == null) {
        throw new NullPointerException("reason is marked non-null but is null");
      }
      this.reason = reason;
      return this;
    }

    public ContractTerminationRequest build() {
      return new ContractTerminationRequest(this.detail, this.reason);
    }

    @Override
    public String toString() {
      return "ContractTerminationRequest.ContractTerminationRequestBuilder(detail=" + this.detail + ", reason=" + this.reason + ")";
    }
  }

  public static ContractTerminationRequest.ContractTerminationRequestBuilder builder() {
    return new ContractTerminationRequest.ContractTerminationRequestBuilder();
  }

  public ContractTerminationRequest(@javax.annotation.Nonnull final String detail, @javax.annotation.Nonnull final String reason) {
    if (detail == null) {
      throw new NullPointerException("detail is marked non-null but is null");
    }
    if (reason == null) {
      throw new NullPointerException("reason is marked non-null but is null");
    }
    this.detail = detail;
    this.reason = reason;
  }
}
