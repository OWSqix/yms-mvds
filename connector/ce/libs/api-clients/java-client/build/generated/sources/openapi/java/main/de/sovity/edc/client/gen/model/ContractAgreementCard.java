/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.ContractAgreementDirection;
import de.sovity.edc.client.gen.model.ContractAgreementTerminationInfo;
import de.sovity.edc.client.gen.model.ContractAgreementTransferProcess;
import de.sovity.edc.client.gen.model.ContractTerminationStatus;
import de.sovity.edc.client.gen.model.UiAsset;
import de.sovity.edc.client.gen.model.UiPolicy;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import de.sovity.edc.client.gen.JSON;

/**
 * Contract Agreement for Contract Agreement Page
 */
@ApiModel(description = "Contract Agreement for Contract Agreement Page")
@lombok.AllArgsConstructor
@lombok.Builder
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ContractAgreementCard {
  public static final String SERIALIZED_NAME_CONTRACT_AGREEMENT_ID = "contractAgreementId";
  @SerializedName(SERIALIZED_NAME_CONTRACT_AGREEMENT_ID)
  @javax.annotation.Nonnull
  private String contractAgreementId;

  public static final String SERIALIZED_NAME_CONTRACT_NEGOTIATION_ID = "contractNegotiationId";
  @SerializedName(SERIALIZED_NAME_CONTRACT_NEGOTIATION_ID)
  @javax.annotation.Nonnull
  private String contractNegotiationId;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  @javax.annotation.Nonnull
  private ContractAgreementDirection direction;

  public static final String SERIALIZED_NAME_COUNTER_PARTY_ADDRESS = "counterPartyAddress";
  @SerializedName(SERIALIZED_NAME_COUNTER_PARTY_ADDRESS)
  @javax.annotation.Nonnull
  private String counterPartyAddress;

  public static final String SERIALIZED_NAME_COUNTER_PARTY_ID = "counterPartyId";
  @SerializedName(SERIALIZED_NAME_COUNTER_PARTY_ID)
  @javax.annotation.Nonnull
  private String counterPartyId;

  public static final String SERIALIZED_NAME_CONTRACT_SIGNING_DATE = "contractSigningDate";
  @SerializedName(SERIALIZED_NAME_CONTRACT_SIGNING_DATE)
  @javax.annotation.Nonnull
  private OffsetDateTime contractSigningDate;

  public static final String SERIALIZED_NAME_ASSET = "asset";
  @SerializedName(SERIALIZED_NAME_ASSET)
  @javax.annotation.Nonnull
  private UiAsset asset;

  public static final String SERIALIZED_NAME_CONTRACT_POLICY = "contractPolicy";
  @SerializedName(SERIALIZED_NAME_CONTRACT_POLICY)
  @javax.annotation.Nonnull
  private UiPolicy contractPolicy;

  public static final String SERIALIZED_NAME_TRANSFER_PROCESSES = "transferProcesses";
  @SerializedName(SERIALIZED_NAME_TRANSFER_PROCESSES)
  @javax.annotation.Nonnull
    @lombok.Builder.Default
  private List<ContractAgreementTransferProcess> transferProcesses  =  new ArrayList<>();

  public static final String SERIALIZED_NAME_TERMINATION_STATUS = "terminationStatus";
  @SerializedName(SERIALIZED_NAME_TERMINATION_STATUS)
  @javax.annotation.Nonnull
  private ContractTerminationStatus terminationStatus;

  public static final String SERIALIZED_NAME_TERMINATION_INFORMATION = "terminationInformation";
  @SerializedName(SERIALIZED_NAME_TERMINATION_INFORMATION)
  @javax.annotation.Nullable
  private ContractAgreementTerminationInfo terminationInformation;

  public ContractAgreementCard() {
  }

  public ContractAgreementCard contractAgreementId(@javax.annotation.Nonnull String contractAgreementId) {
    this.contractAgreementId = contractAgreementId;
    return this;
  }

  /**
   * Contract Agreement ID
   * @return contractAgreementId
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Contract Agreement ID")
  public String getContractAgreementId() {
    return contractAgreementId;
  }

  public void setContractAgreementId(@javax.annotation.Nonnull String contractAgreementId) {
    this.contractAgreementId = contractAgreementId;
  }


  public ContractAgreementCard contractNegotiationId(@javax.annotation.Nonnull String contractNegotiationId) {
    this.contractNegotiationId = contractNegotiationId;
    return this;
  }

  /**
   * Contract Negotiation ID
   * @return contractNegotiationId
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Contract Negotiation ID")
  public String getContractNegotiationId() {
    return contractNegotiationId;
  }

  public void setContractNegotiationId(@javax.annotation.Nonnull String contractNegotiationId) {
    this.contractNegotiationId = contractNegotiationId;
  }


  public ContractAgreementCard direction(@javax.annotation.Nonnull ContractAgreementDirection direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Incoming vs Outgoing
   * @return direction
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Incoming vs Outgoing")
  public ContractAgreementDirection getDirection() {
    return direction;
  }

  public void setDirection(@javax.annotation.Nonnull ContractAgreementDirection direction) {
    this.direction = direction;
  }


  public ContractAgreementCard counterPartyAddress(@javax.annotation.Nonnull String counterPartyAddress) {
    this.counterPartyAddress = counterPartyAddress;
    return this;
  }

  /**
   * Other Connector&#39;s Endpoint
   * @return counterPartyAddress
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Other Connector's Endpoint")
  public String getCounterPartyAddress() {
    return counterPartyAddress;
  }

  public void setCounterPartyAddress(@javax.annotation.Nonnull String counterPartyAddress) {
    this.counterPartyAddress = counterPartyAddress;
  }


  public ContractAgreementCard counterPartyId(@javax.annotation.Nonnull String counterPartyId) {
    this.counterPartyId = counterPartyId;
    return this;
  }

  /**
   * Other Connector&#39;s ID
   * @return counterPartyId
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Other Connector's ID")
  public String getCounterPartyId() {
    return counterPartyId;
  }

  public void setCounterPartyId(@javax.annotation.Nonnull String counterPartyId) {
    this.counterPartyId = counterPartyId;
  }


  public ContractAgreementCard contractSigningDate(@javax.annotation.Nonnull OffsetDateTime contractSigningDate) {
    this.contractSigningDate = contractSigningDate;
    return this;
  }

  /**
   * Contract Agreements Signing Date
   * @return contractSigningDate
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Contract Agreements Signing Date")
  public OffsetDateTime getContractSigningDate() {
    return contractSigningDate;
  }

  public void setContractSigningDate(@javax.annotation.Nonnull OffsetDateTime contractSigningDate) {
    this.contractSigningDate = contractSigningDate;
  }


  public ContractAgreementCard asset(@javax.annotation.Nonnull UiAsset asset) {
    this.asset = asset;
    return this;
  }

  /**
   * Asset details
   * @return asset
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Asset details")
  public UiAsset getAsset() {
    return asset;
  }

  public void setAsset(@javax.annotation.Nonnull UiAsset asset) {
    this.asset = asset;
  }


  public ContractAgreementCard contractPolicy(@javax.annotation.Nonnull UiPolicy contractPolicy) {
    this.contractPolicy = contractPolicy;
    return this;
  }

  /**
   * Contract Policy
   * @return contractPolicy
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Contract Policy")
  public UiPolicy getContractPolicy() {
    return contractPolicy;
  }

  public void setContractPolicy(@javax.annotation.Nonnull UiPolicy contractPolicy) {
    this.contractPolicy = contractPolicy;
  }


  public ContractAgreementCard transferProcesses(@javax.annotation.Nonnull List<ContractAgreementTransferProcess> transferProcesses) {
    this.transferProcesses = transferProcesses;
    return this;
  }

  public ContractAgreementCard addTransferProcessesItem(ContractAgreementTransferProcess transferProcessesItem) {
    if (this.transferProcesses == null) {
      this.transferProcesses = new ArrayList<>();
    }
    this.transferProcesses.add(transferProcessesItem);
    return this;
  }

  /**
   * Contract Agreement&#39;s Transfer Processes
   * @return transferProcesses
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Contract Agreement's Transfer Processes")
  public List<ContractAgreementTransferProcess> getTransferProcesses() {
    return transferProcesses;
  }

  public void setTransferProcesses(@javax.annotation.Nonnull List<ContractAgreementTransferProcess> transferProcesses) {
    this.transferProcesses = transferProcesses;
  }


  public ContractAgreementCard terminationStatus(@javax.annotation.Nonnull ContractTerminationStatus terminationStatus) {
    this.terminationStatus = terminationStatus;
    return this;
  }

  /**
   * Contract Agreement&#39;s Termination Status
   * @return terminationStatus
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Contract Agreement's Termination Status")
  public ContractTerminationStatus getTerminationStatus() {
    return terminationStatus;
  }

  public void setTerminationStatus(@javax.annotation.Nonnull ContractTerminationStatus terminationStatus) {
    this.terminationStatus = terminationStatus;
  }


  public ContractAgreementCard terminationInformation(@javax.annotation.Nullable ContractAgreementTerminationInfo terminationInformation) {
    this.terminationInformation = terminationInformation;
    return this;
  }

  /**
   * Contract Agreement&#39;s Metadata
   * @return terminationInformation
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Contract Agreement's Metadata")
  public ContractAgreementTerminationInfo getTerminationInformation() {
    return terminationInformation;
  }

  public void setTerminationInformation(@javax.annotation.Nullable ContractAgreementTerminationInfo terminationInformation) {
    this.terminationInformation = terminationInformation;
  }



  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractAgreementCard {\n");
    sb.append("    contractAgreementId: ").append(toIndentedString(contractAgreementId)).append("\n");
    sb.append("    contractNegotiationId: ").append(toIndentedString(contractNegotiationId)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    counterPartyAddress: ").append(toIndentedString(counterPartyAddress)).append("\n");
    sb.append("    counterPartyId: ").append(toIndentedString(counterPartyId)).append("\n");
    sb.append("    contractSigningDate: ").append(toIndentedString(contractSigningDate)).append("\n");
    sb.append("    asset: ").append(toIndentedString(asset)).append("\n");
    sb.append("    contractPolicy: ").append(toIndentedString(contractPolicy)).append("\n");
    sb.append("    transferProcesses: ").append(toIndentedString(transferProcesses)).append("\n");
    sb.append("    terminationStatus: ").append(toIndentedString(terminationStatus)).append("\n");
    sb.append("    terminationInformation: ").append(toIndentedString(terminationInformation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contractAgreementId");
    openapiFields.add("contractNegotiationId");
    openapiFields.add("direction");
    openapiFields.add("counterPartyAddress");
    openapiFields.add("counterPartyId");
    openapiFields.add("contractSigningDate");
    openapiFields.add("asset");
    openapiFields.add("contractPolicy");
    openapiFields.add("transferProcesses");
    openapiFields.add("terminationStatus");
    openapiFields.add("terminationInformation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contractAgreementId");
    openapiRequiredFields.add("contractNegotiationId");
    openapiRequiredFields.add("direction");
    openapiRequiredFields.add("counterPartyAddress");
    openapiRequiredFields.add("counterPartyId");
    openapiRequiredFields.add("contractSigningDate");
    openapiRequiredFields.add("asset");
    openapiRequiredFields.add("contractPolicy");
    openapiRequiredFields.add("transferProcesses");
    openapiRequiredFields.add("terminationStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContractAgreementCard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContractAgreementCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContractAgreementCard is not found in the empty JSON string", ContractAgreementCard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContractAgreementCard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContractAgreementCard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContractAgreementCard.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("contractAgreementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractAgreementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractAgreementId").toString()));
      }
      if (!jsonObj.get("contractNegotiationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractNegotiationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractNegotiationId").toString()));
      }
      // validate the required field `direction`
      ContractAgreementDirection.validateJsonElement(jsonObj.get("direction"));
      if (!jsonObj.get("counterPartyAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `counterPartyAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("counterPartyAddress").toString()));
      }
      if (!jsonObj.get("counterPartyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `counterPartyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("counterPartyId").toString()));
      }
      // validate the required field `asset`
      UiAsset.validateJsonElement(jsonObj.get("asset"));
      // validate the required field `contractPolicy`
      UiPolicy.validateJsonElement(jsonObj.get("contractPolicy"));
      // ensure the json data is an array
      if (!jsonObj.get("transferProcesses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferProcesses` to be an array in the JSON string but got `%s`", jsonObj.get("transferProcesses").toString()));
      }

      JsonArray jsonArraytransferProcesses = jsonObj.getAsJsonArray("transferProcesses");
      // validate the required field `transferProcesses` (array)
      for (int i = 0; i < jsonArraytransferProcesses.size(); i++) {
        ContractAgreementTransferProcess.validateJsonElement(jsonArraytransferProcesses.get(i));
      };
      // validate the required field `terminationStatus`
      ContractTerminationStatus.validateJsonElement(jsonObj.get("terminationStatus"));
      // validate the optional field `terminationInformation`
      if (jsonObj.get("terminationInformation") != null && !jsonObj.get("terminationInformation").isJsonNull()) {
        ContractAgreementTerminationInfo.validateJsonElement(jsonObj.get("terminationInformation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContractAgreementCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContractAgreementCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContractAgreementCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContractAgreementCard.class));

       return (TypeAdapter<T>) new TypeAdapter<ContractAgreementCard>() {
           @Override
           public void write(JsonWriter out, ContractAgreementCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContractAgreementCard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContractAgreementCard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContractAgreementCard
   * @throws IOException if the JSON string is invalid with respect to ContractAgreementCard
   */
  public static ContractAgreementCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractAgreementCard.class);
  }

  /**
   * Convert an instance of ContractAgreementCard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

