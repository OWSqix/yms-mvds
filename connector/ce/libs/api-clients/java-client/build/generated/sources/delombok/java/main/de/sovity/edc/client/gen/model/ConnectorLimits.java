/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import de.sovity.edc.client.gen.JSON;

/**
 * Available and used resources of a connector.
 */
@ApiModel(description = "Available and used resources of a connector.")
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ConnectorLimits {
  public static final String SERIALIZED_NAME_NUM_ACTIVE_CONSUMING_CONTRACT_AGREEMENTS = "numActiveConsumingContractAgreements";
  @SerializedName(SERIALIZED_NAME_NUM_ACTIVE_CONSUMING_CONTRACT_AGREEMENTS)
  @javax.annotation.Nonnull
  private Integer numActiveConsumingContractAgreements;
  public static final String SERIALIZED_NAME_MAX_ACTIVE_CONSUMING_CONTRACT_AGREEMENTS = "maxActiveConsumingContractAgreements";
  @SerializedName(SERIALIZED_NAME_MAX_ACTIVE_CONSUMING_CONTRACT_AGREEMENTS)
  @javax.annotation.Nullable
  private Integer maxActiveConsumingContractAgreements;

  public ConnectorLimits() {
  }

  public ConnectorLimits numActiveConsumingContractAgreements(@javax.annotation.Nonnull Integer numActiveConsumingContractAgreements) {
    this.numActiveConsumingContractAgreements = numActiveConsumingContractAgreements;
    return this;
  }

  /**
   * Current amount of active consuming contract agreements.
   * @return numActiveConsumingContractAgreements
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Current amount of active consuming contract agreements.")
  public Integer getNumActiveConsumingContractAgreements() {
    return numActiveConsumingContractAgreements;
  }

  public void setNumActiveConsumingContractAgreements(@javax.annotation.Nonnull Integer numActiveConsumingContractAgreements) {
    this.numActiveConsumingContractAgreements = numActiveConsumingContractAgreements;
  }

  public ConnectorLimits maxActiveConsumingContractAgreements(@javax.annotation.Nullable Integer maxActiveConsumingContractAgreements) {
    this.maxActiveConsumingContractAgreements = maxActiveConsumingContractAgreements;
    return this;
  }

  /**
   * Maximum amount of active consuming contract agreements. A value of &#39;null&#39; or a negative value means that there are no limit.
   * @return maxActiveConsumingContractAgreements
   */
  @javax.annotation.Nullable
  @ApiModelProperty("Maximum amount of active consuming contract agreements. A value of \'null\' or a negative value means that there are no limit.")
  public Integer getMaxActiveConsumingContractAgreements() {
    return maxActiveConsumingContractAgreements;
  }

  public void setMaxActiveConsumingContractAgreements(@javax.annotation.Nullable Integer maxActiveConsumingContractAgreements) {
    this.maxActiveConsumingContractAgreements = maxActiveConsumingContractAgreements;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorLimits {\n");
    sb.append("    numActiveConsumingContractAgreements: ").append(toIndentedString(numActiveConsumingContractAgreements)).append("\n");
    sb.append("    maxActiveConsumingContractAgreements: ").append(toIndentedString(maxActiveConsumingContractAgreements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("numActiveConsumingContractAgreements");
    openapiFields.add("maxActiveConsumingContractAgreements");
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("numActiveConsumingContractAgreements");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectorLimits
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!ConnectorLimits.openapiRequiredFields.isEmpty()) {
        // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorLimits is not found in the empty JSON string", ConnectorLimits.openapiRequiredFields.toString()));
      }
    }
    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!ConnectorLimits.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorLimits` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : ConnectorLimits.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!ConnectorLimits.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'ConnectorLimits' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<ConnectorLimits> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(ConnectorLimits.class));
      return (TypeAdapter<T>) new TypeAdapter<ConnectorLimits>() {
        @Override
        public void write(JsonWriter out, ConnectorLimits value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        @Override
        public ConnectorLimits read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectorLimits given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectorLimits
   * @throws IOException if the JSON string is invalid with respect to ConnectorLimits
   */
  public static ConnectorLimits fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorLimits.class);
  }

  /**
   * Convert an instance of ConnectorLimits to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }


  public static class ConnectorLimitsBuilder {
    private Integer numActiveConsumingContractAgreements;
    private Integer maxActiveConsumingContractAgreements;

    ConnectorLimitsBuilder() {
    }

    /**
     * @return {@code this}.
     */
    public ConnectorLimits.ConnectorLimitsBuilder numActiveConsumingContractAgreements(@javax.annotation.Nonnull final Integer numActiveConsumingContractAgreements) {
      if (numActiveConsumingContractAgreements == null) {
        throw new NullPointerException("numActiveConsumingContractAgreements is marked non-null but is null");
      }
      this.numActiveConsumingContractAgreements = numActiveConsumingContractAgreements;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public ConnectorLimits.ConnectorLimitsBuilder maxActiveConsumingContractAgreements(@javax.annotation.Nullable final Integer maxActiveConsumingContractAgreements) {
      this.maxActiveConsumingContractAgreements = maxActiveConsumingContractAgreements;
      return this;
    }

    public ConnectorLimits build() {
      return new ConnectorLimits(this.numActiveConsumingContractAgreements, this.maxActiveConsumingContractAgreements);
    }

    @Override
    public String toString() {
      return "ConnectorLimits.ConnectorLimitsBuilder(numActiveConsumingContractAgreements=" + this.numActiveConsumingContractAgreements + ", maxActiveConsumingContractAgreements=" + this.maxActiveConsumingContractAgreements + ")";
    }
  }

  public static ConnectorLimits.ConnectorLimitsBuilder builder() {
    return new ConnectorLimits.ConnectorLimitsBuilder();
  }

  public ConnectorLimits(@javax.annotation.Nonnull final Integer numActiveConsumingContractAgreements, @javax.annotation.Nullable final Integer maxActiveConsumingContractAgreements) {
    if (numActiveConsumingContractAgreements == null) {
      throw new NullPointerException("numActiveConsumingContractAgreements is marked non-null but is null");
    }
    this.numActiveConsumingContractAgreements = numActiveConsumingContractAgreements;
    this.maxActiveConsumingContractAgreements = maxActiveConsumingContractAgreements;
  }
}
