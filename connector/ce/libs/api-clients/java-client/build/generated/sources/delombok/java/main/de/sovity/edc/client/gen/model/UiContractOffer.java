/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.UiPolicy;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import de.sovity.edc.client.gen.JSON;

/**
 * Catalog Data Offer&#39;s Contract Offer as required by the UI
 */
@ApiModel(description = "Catalog Data Offer\'s Contract Offer as required by the UI")
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UiContractOffer {
  public static final String SERIALIZED_NAME_CONTRACT_OFFER_ID = "contractOfferId";
  @SerializedName(SERIALIZED_NAME_CONTRACT_OFFER_ID)
  @javax.annotation.Nonnull
  private String contractOfferId;
  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  @javax.annotation.Nonnull
  private UiPolicy policy;

  public UiContractOffer() {
  }

  public UiContractOffer contractOfferId(@javax.annotation.Nonnull String contractOfferId) {
    this.contractOfferId = contractOfferId;
    return this;
  }

  /**
   * Contract Offer ID
   * @return contractOfferId
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Contract Offer ID")
  public String getContractOfferId() {
    return contractOfferId;
  }

  public void setContractOfferId(@javax.annotation.Nonnull String contractOfferId) {
    this.contractOfferId = contractOfferId;
  }

  public UiContractOffer policy(@javax.annotation.Nonnull UiPolicy policy) {
    this.policy = policy;
    return this;
  }

  /**
   * Policy
   * @return policy
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Policy")
  public UiPolicy getPolicy() {
    return policy;
  }

  public void setPolicy(@javax.annotation.Nonnull UiPolicy policy) {
    this.policy = policy;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UiContractOffer {\n");
    sb.append("    contractOfferId: ").append(toIndentedString(contractOfferId)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contractOfferId");
    openapiFields.add("policy");
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contractOfferId");
    openapiRequiredFields.add("policy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UiContractOffer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!UiContractOffer.openapiRequiredFields.isEmpty()) {
        // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in UiContractOffer is not found in the empty JSON string", UiContractOffer.openapiRequiredFields.toString()));
      }
    }
    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!UiContractOffer.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UiContractOffer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : UiContractOffer.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if (!jsonObj.get("contractOfferId").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `contractOfferId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractOfferId").toString()));
    }
    // validate the required field `policy`
    UiPolicy.validateJsonElement(jsonObj.get("policy"));
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!UiContractOffer.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'UiContractOffer' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<UiContractOffer> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(UiContractOffer.class));
      return (TypeAdapter<T>) new TypeAdapter<UiContractOffer>() {
        @Override
        public void write(JsonWriter out, UiContractOffer value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        @Override
        public UiContractOffer read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of UiContractOffer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UiContractOffer
   * @throws IOException if the JSON string is invalid with respect to UiContractOffer
   */
  public static UiContractOffer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UiContractOffer.class);
  }

  /**
   * Convert an instance of UiContractOffer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }


  public static class UiContractOfferBuilder {
    private String contractOfferId;
    private UiPolicy policy;

    UiContractOfferBuilder() {
    }

    /**
     * @return {@code this}.
     */
    public UiContractOffer.UiContractOfferBuilder contractOfferId(@javax.annotation.Nonnull final String contractOfferId) {
      if (contractOfferId == null) {
        throw new NullPointerException("contractOfferId is marked non-null but is null");
      }
      this.contractOfferId = contractOfferId;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public UiContractOffer.UiContractOfferBuilder policy(@javax.annotation.Nonnull final UiPolicy policy) {
      if (policy == null) {
        throw new NullPointerException("policy is marked non-null but is null");
      }
      this.policy = policy;
      return this;
    }

    public UiContractOffer build() {
      return new UiContractOffer(this.contractOfferId, this.policy);
    }

    @Override
    public String toString() {
      return "UiContractOffer.UiContractOfferBuilder(contractOfferId=" + this.contractOfferId + ", policy=" + this.policy + ")";
    }
  }

  public static UiContractOffer.UiContractOfferBuilder builder() {
    return new UiContractOffer.UiContractOfferBuilder();
  }

  public UiContractOffer(@javax.annotation.Nonnull final String contractOfferId, @javax.annotation.Nonnull final UiPolicy policy) {
    if (contractOfferId == null) {
      throw new NullPointerException("contractOfferId is marked non-null but is null");
    }
    if (policy == null) {
      throw new NullPointerException("policy is marked non-null but is null");
    }
    this.contractOfferId = contractOfferId;
    this.policy = policy;
  }
}
