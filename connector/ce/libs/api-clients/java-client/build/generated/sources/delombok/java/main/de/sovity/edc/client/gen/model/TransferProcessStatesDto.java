/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import de.sovity.edc.client.gen.JSON;

/**
 * TransferProcessStatesDto
 */
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class TransferProcessStatesDto {
  public static final String SERIALIZED_NAME_INCOMING_TRANSFER_PROCESS_COUNTS = "incomingTransferProcessCounts";
  @SerializedName(SERIALIZED_NAME_INCOMING_TRANSFER_PROCESS_COUNTS)
  @javax.annotation.Nonnull
  private Map<String, Long> incomingTransferProcessCounts;
  public static final String SERIALIZED_NAME_OUTGOING_TRANSFER_PROCESS_COUNTS = "outgoingTransferProcessCounts";
  @SerializedName(SERIALIZED_NAME_OUTGOING_TRANSFER_PROCESS_COUNTS)
  @javax.annotation.Nonnull
  private Map<String, Long> outgoingTransferProcessCounts;

  public TransferProcessStatesDto() {
  }

  public TransferProcessStatesDto incomingTransferProcessCounts(@javax.annotation.Nonnull Map<String, Long> incomingTransferProcessCounts) {
    this.incomingTransferProcessCounts = incomingTransferProcessCounts;
    return this;
  }

  public TransferProcessStatesDto putIncomingTransferProcessCountsItem(String key, Long incomingTransferProcessCountsItem) {
    if (this.incomingTransferProcessCounts == null) {
      this.incomingTransferProcessCounts = new HashMap<>();
    }
    this.incomingTransferProcessCounts.put(key, incomingTransferProcessCountsItem);
    return this;
  }

  /**
   * States and count of incoming transferprocess counts
   * @return incomingTransferProcessCounts
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "States and count of incoming transferprocess counts")
  public Map<String, Long> getIncomingTransferProcessCounts() {
    return incomingTransferProcessCounts;
  }

  public void setIncomingTransferProcessCounts(@javax.annotation.Nonnull Map<String, Long> incomingTransferProcessCounts) {
    this.incomingTransferProcessCounts = incomingTransferProcessCounts;
  }

  public TransferProcessStatesDto outgoingTransferProcessCounts(@javax.annotation.Nonnull Map<String, Long> outgoingTransferProcessCounts) {
    this.outgoingTransferProcessCounts = outgoingTransferProcessCounts;
    return this;
  }

  public TransferProcessStatesDto putOutgoingTransferProcessCountsItem(String key, Long outgoingTransferProcessCountsItem) {
    if (this.outgoingTransferProcessCounts == null) {
      this.outgoingTransferProcessCounts = new HashMap<>();
    }
    this.outgoingTransferProcessCounts.put(key, outgoingTransferProcessCountsItem);
    return this;
  }

  /**
   * States and counts of outgoing transferprocess counts
   * @return outgoingTransferProcessCounts
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "States and counts of outgoing transferprocess counts")
  public Map<String, Long> getOutgoingTransferProcessCounts() {
    return outgoingTransferProcessCounts;
  }

  public void setOutgoingTransferProcessCounts(@javax.annotation.Nonnull Map<String, Long> outgoingTransferProcessCounts) {
    this.outgoingTransferProcessCounts = outgoingTransferProcessCounts;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferProcessStatesDto {\n");
    sb.append("    incomingTransferProcessCounts: ").append(toIndentedString(incomingTransferProcessCounts)).append("\n");
    sb.append("    outgoingTransferProcessCounts: ").append(toIndentedString(outgoingTransferProcessCounts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("incomingTransferProcessCounts");
    openapiFields.add("outgoingTransferProcessCounts");
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("incomingTransferProcessCounts");
    openapiRequiredFields.add("outgoingTransferProcessCounts");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransferProcessStatesDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!TransferProcessStatesDto.openapiRequiredFields.isEmpty()) {
        // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in TransferProcessStatesDto is not found in the empty JSON string", TransferProcessStatesDto.openapiRequiredFields.toString()));
      }
    }
    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!TransferProcessStatesDto.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransferProcessStatesDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : TransferProcessStatesDto.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!TransferProcessStatesDto.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'TransferProcessStatesDto' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<TransferProcessStatesDto> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(TransferProcessStatesDto.class));
      return (TypeAdapter<T>) new TypeAdapter<TransferProcessStatesDto>() {
        @Override
        public void write(JsonWriter out, TransferProcessStatesDto value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        @Override
        public TransferProcessStatesDto read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of TransferProcessStatesDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransferProcessStatesDto
   * @throws IOException if the JSON string is invalid with respect to TransferProcessStatesDto
   */
  public static TransferProcessStatesDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransferProcessStatesDto.class);
  }

  /**
   * Convert an instance of TransferProcessStatesDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  private static Map<String, Long> $default$incomingTransferProcessCounts() {
    return new HashMap<>();
  }

  private static Map<String, Long> $default$outgoingTransferProcessCounts() {
    return new HashMap<>();
  }


  public static class TransferProcessStatesDtoBuilder {
    private boolean incomingTransferProcessCounts$set;
    private Map<String, Long> incomingTransferProcessCounts$value;
    private boolean outgoingTransferProcessCounts$set;
    private Map<String, Long> outgoingTransferProcessCounts$value;

    TransferProcessStatesDtoBuilder() {
    }

    /**
     * @return {@code this}.
     */
    public TransferProcessStatesDto.TransferProcessStatesDtoBuilder incomingTransferProcessCounts(@javax.annotation.Nonnull final Map<String, Long> incomingTransferProcessCounts) {
      if (incomingTransferProcessCounts == null) {
        throw new NullPointerException("incomingTransferProcessCounts is marked non-null but is null");
      }
      this.incomingTransferProcessCounts$value = incomingTransferProcessCounts;
      incomingTransferProcessCounts$set = true;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public TransferProcessStatesDto.TransferProcessStatesDtoBuilder outgoingTransferProcessCounts(@javax.annotation.Nonnull final Map<String, Long> outgoingTransferProcessCounts) {
      if (outgoingTransferProcessCounts == null) {
        throw new NullPointerException("outgoingTransferProcessCounts is marked non-null but is null");
      }
      this.outgoingTransferProcessCounts$value = outgoingTransferProcessCounts;
      outgoingTransferProcessCounts$set = true;
      return this;
    }

    public TransferProcessStatesDto build() {
      Map<String, Long> incomingTransferProcessCounts$value = this.incomingTransferProcessCounts$value;
      if (!this.incomingTransferProcessCounts$set) incomingTransferProcessCounts$value = TransferProcessStatesDto.$default$incomingTransferProcessCounts();
      Map<String, Long> outgoingTransferProcessCounts$value = this.outgoingTransferProcessCounts$value;
      if (!this.outgoingTransferProcessCounts$set) outgoingTransferProcessCounts$value = TransferProcessStatesDto.$default$outgoingTransferProcessCounts();
      return new TransferProcessStatesDto(incomingTransferProcessCounts$value, outgoingTransferProcessCounts$value);
    }

    @Override
    public String toString() {
      return "TransferProcessStatesDto.TransferProcessStatesDtoBuilder(incomingTransferProcessCounts$value=" + this.incomingTransferProcessCounts$value + ", outgoingTransferProcessCounts$value=" + this.outgoingTransferProcessCounts$value + ")";
    }
  }

  public static TransferProcessStatesDto.TransferProcessStatesDtoBuilder builder() {
    return new TransferProcessStatesDto.TransferProcessStatesDtoBuilder();
  }

  public TransferProcessStatesDto(@javax.annotation.Nonnull final Map<String, Long> incomingTransferProcessCounts, @javax.annotation.Nonnull final Map<String, Long> outgoingTransferProcessCounts) {
    if (incomingTransferProcessCounts == null) {
      throw new NullPointerException("incomingTransferProcessCounts is marked non-null but is null");
    }
    if (outgoingTransferProcessCounts == null) {
      throw new NullPointerException("outgoingTransferProcessCounts is marked non-null but is null");
    }
    this.incomingTransferProcessCounts = incomingTransferProcessCounts;
    this.outgoingTransferProcessCounts = outgoingTransferProcessCounts;
  }
}
