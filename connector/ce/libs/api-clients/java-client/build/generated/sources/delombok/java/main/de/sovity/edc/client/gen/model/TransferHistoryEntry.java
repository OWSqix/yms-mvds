/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.ContractAgreementDirection;
import de.sovity.edc.client.gen.model.TransferProcessState;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import de.sovity.edc.client.gen.JSON;

/**
 * Transfer History Entry for Transfer History Page
 */
@ApiModel(description = "Transfer History Entry for Transfer History Page")
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class TransferHistoryEntry {
  public static final String SERIALIZED_NAME_TRANSFER_PROCESS_ID = "transferProcessId";
  @SerializedName(SERIALIZED_NAME_TRANSFER_PROCESS_ID)
  @javax.annotation.Nonnull
  private String transferProcessId;
  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  @javax.annotation.Nonnull
  private OffsetDateTime createdDate;
  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE = "lastUpdatedDate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE)
  @javax.annotation.Nonnull
  private OffsetDateTime lastUpdatedDate;
  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nonnull
  private TransferProcessState state;
  public static final String SERIALIZED_NAME_CONTRACT_AGREEMENT_ID = "contractAgreementId";
  @SerializedName(SERIALIZED_NAME_CONTRACT_AGREEMENT_ID)
  @javax.annotation.Nonnull
  private String contractAgreementId;
  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  @javax.annotation.Nonnull
  private ContractAgreementDirection direction;
  public static final String SERIALIZED_NAME_COUNTER_PARTY_CONNECTOR_ENDPOINT = "counterPartyConnectorEndpoint";
  @SerializedName(SERIALIZED_NAME_COUNTER_PARTY_CONNECTOR_ENDPOINT)
  @javax.annotation.Nonnull
  private String counterPartyConnectorEndpoint;
  public static final String SERIALIZED_NAME_COUNTER_PARTY_PARTICIPANT_ID = "counterPartyParticipantId";
  @SerializedName(SERIALIZED_NAME_COUNTER_PARTY_PARTICIPANT_ID)
  @javax.annotation.Nonnull
  private String counterPartyParticipantId;
  public static final String SERIALIZED_NAME_ASSET_NAME = "assetName";
  @SerializedName(SERIALIZED_NAME_ASSET_NAME)
  @javax.annotation.Nonnull
  private String assetName;
  public static final String SERIALIZED_NAME_ASSET_ID = "assetId";
  @SerializedName(SERIALIZED_NAME_ASSET_ID)
  @javax.annotation.Nonnull
  private String assetId;
  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  @javax.annotation.Nullable
  private String errorMessage;

  public TransferHistoryEntry() {
  }

  public TransferHistoryEntry transferProcessId(@javax.annotation.Nonnull String transferProcessId) {
    this.transferProcessId = transferProcessId;
    return this;
  }

  /**
   * Transfer Process ID
   * @return transferProcessId
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Transfer Process ID")
  public String getTransferProcessId() {
    return transferProcessId;
  }

  public void setTransferProcessId(@javax.annotation.Nonnull String transferProcessId) {
    this.transferProcessId = transferProcessId;
  }

  public TransferHistoryEntry createdDate(@javax.annotation.Nonnull OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Created Date
   * @return createdDate
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Created Date")
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(@javax.annotation.Nonnull OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }

  public TransferHistoryEntry lastUpdatedDate(@javax.annotation.Nonnull OffsetDateTime lastUpdatedDate) {
    this.lastUpdatedDate = lastUpdatedDate;
    return this;
  }

  /**
   * Last Change Date
   * @return lastUpdatedDate
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Last Change Date")
  public OffsetDateTime getLastUpdatedDate() {
    return lastUpdatedDate;
  }

  public void setLastUpdatedDate(@javax.annotation.Nonnull OffsetDateTime lastUpdatedDate) {
    this.lastUpdatedDate = lastUpdatedDate;
  }

  public TransferHistoryEntry state(@javax.annotation.Nonnull TransferProcessState state) {
    this.state = state;
    return this;
  }

  /**
   * Transfer History State
   * @return state
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Transfer History State")
  public TransferProcessState getState() {
    return state;
  }

  public void setState(@javax.annotation.Nonnull TransferProcessState state) {
    this.state = state;
  }

  public TransferHistoryEntry contractAgreementId(@javax.annotation.Nonnull String contractAgreementId) {
    this.contractAgreementId = contractAgreementId;
    return this;
  }

  /**
   * Contract Agreement ID
   * @return contractAgreementId
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Contract Agreement ID")
  public String getContractAgreementId() {
    return contractAgreementId;
  }

  public void setContractAgreementId(@javax.annotation.Nonnull String contractAgreementId) {
    this.contractAgreementId = contractAgreementId;
  }

  public TransferHistoryEntry direction(@javax.annotation.Nonnull ContractAgreementDirection direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Incoming vs Outgoing
   * @return direction
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Incoming vs Outgoing")
  public ContractAgreementDirection getDirection() {
    return direction;
  }

  public void setDirection(@javax.annotation.Nonnull ContractAgreementDirection direction) {
    this.direction = direction;
  }

  public TransferHistoryEntry counterPartyConnectorEndpoint(@javax.annotation.Nonnull String counterPartyConnectorEndpoint) {
    this.counterPartyConnectorEndpoint = counterPartyConnectorEndpoint;
    return this;
  }

  /**
   * Other Connector&#39;s Endpoint
   * @return counterPartyConnectorEndpoint
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Other Connector\'s Endpoint")
  public String getCounterPartyConnectorEndpoint() {
    return counterPartyConnectorEndpoint;
  }

  public void setCounterPartyConnectorEndpoint(@javax.annotation.Nonnull String counterPartyConnectorEndpoint) {
    this.counterPartyConnectorEndpoint = counterPartyConnectorEndpoint;
  }

  public TransferHistoryEntry counterPartyParticipantId(@javax.annotation.Nonnull String counterPartyParticipantId) {
    this.counterPartyParticipantId = counterPartyParticipantId;
    return this;
  }

  /**
   * Other Connector&#39;s Participant ID
   * @return counterPartyParticipantId
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Other Connector\'s Participant ID")
  public String getCounterPartyParticipantId() {
    return counterPartyParticipantId;
  }

  public void setCounterPartyParticipantId(@javax.annotation.Nonnull String counterPartyParticipantId) {
    this.counterPartyParticipantId = counterPartyParticipantId;
  }

  public TransferHistoryEntry assetName(@javax.annotation.Nonnull String assetName) {
    this.assetName = assetName;
    return this;
  }

  /**
   * Asset Name
   * @return assetName
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Asset Name")
  public String getAssetName() {
    return assetName;
  }

  public void setAssetName(@javax.annotation.Nonnull String assetName) {
    this.assetName = assetName;
  }

  public TransferHistoryEntry assetId(@javax.annotation.Nonnull String assetId) {
    this.assetId = assetId;
    return this;
  }

  /**
   * Asset ID
   * @return assetId
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Asset ID")
  public String getAssetId() {
    return assetId;
  }

  public void setAssetId(@javax.annotation.Nonnull String assetId) {
    this.assetId = assetId;
  }

  public TransferHistoryEntry errorMessage(@javax.annotation.Nullable String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Error Message
   * @return errorMessage
   */
  @javax.annotation.Nullable
  @ApiModelProperty("Error Message")
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(@javax.annotation.Nullable String errorMessage) {
    this.errorMessage = errorMessage;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferHistoryEntry {\n");
    sb.append("    transferProcessId: ").append(toIndentedString(transferProcessId)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    lastUpdatedDate: ").append(toIndentedString(lastUpdatedDate)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    contractAgreementId: ").append(toIndentedString(contractAgreementId)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    counterPartyConnectorEndpoint: ").append(toIndentedString(counterPartyConnectorEndpoint)).append("\n");
    sb.append("    counterPartyParticipantId: ").append(toIndentedString(counterPartyParticipantId)).append("\n");
    sb.append("    assetName: ").append(toIndentedString(assetName)).append("\n");
    sb.append("    assetId: ").append(toIndentedString(assetId)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transferProcessId");
    openapiFields.add("createdDate");
    openapiFields.add("lastUpdatedDate");
    openapiFields.add("state");
    openapiFields.add("contractAgreementId");
    openapiFields.add("direction");
    openapiFields.add("counterPartyConnectorEndpoint");
    openapiFields.add("counterPartyParticipantId");
    openapiFields.add("assetName");
    openapiFields.add("assetId");
    openapiFields.add("errorMessage");
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transferProcessId");
    openapiRequiredFields.add("createdDate");
    openapiRequiredFields.add("lastUpdatedDate");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("contractAgreementId");
    openapiRequiredFields.add("direction");
    openapiRequiredFields.add("counterPartyConnectorEndpoint");
    openapiRequiredFields.add("counterPartyParticipantId");
    openapiRequiredFields.add("assetName");
    openapiRequiredFields.add("assetId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransferHistoryEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!TransferHistoryEntry.openapiRequiredFields.isEmpty()) {
        // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in TransferHistoryEntry is not found in the empty JSON string", TransferHistoryEntry.openapiRequiredFields.toString()));
      }
    }
    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!TransferHistoryEntry.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransferHistoryEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : TransferHistoryEntry.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if (!jsonObj.get("transferProcessId").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `transferProcessId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferProcessId").toString()));
    }
    // validate the required field `state`
    TransferProcessState.validateJsonElement(jsonObj.get("state"));
    if (!jsonObj.get("contractAgreementId").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `contractAgreementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractAgreementId").toString()));
    }
    // validate the required field `direction`
    ContractAgreementDirection.validateJsonElement(jsonObj.get("direction"));
    if (!jsonObj.get("counterPartyConnectorEndpoint").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `counterPartyConnectorEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("counterPartyConnectorEndpoint").toString()));
    }
    if (!jsonObj.get("counterPartyParticipantId").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `counterPartyParticipantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("counterPartyParticipantId").toString()));
    }
    if (!jsonObj.get("assetName").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `assetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetName").toString()));
    }
    if (!jsonObj.get("assetId").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `assetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetId").toString()));
    }
    if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
    }
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!TransferHistoryEntry.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'TransferHistoryEntry' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<TransferHistoryEntry> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(TransferHistoryEntry.class));
      return (TypeAdapter<T>) new TypeAdapter<TransferHistoryEntry>() {
        @Override
        public void write(JsonWriter out, TransferHistoryEntry value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        @Override
        public TransferHistoryEntry read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of TransferHistoryEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransferHistoryEntry
   * @throws IOException if the JSON string is invalid with respect to TransferHistoryEntry
   */
  public static TransferHistoryEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransferHistoryEntry.class);
  }

  /**
   * Convert an instance of TransferHistoryEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }


  public static class TransferHistoryEntryBuilder {
    private String transferProcessId;
    private OffsetDateTime createdDate;
    private OffsetDateTime lastUpdatedDate;
    private TransferProcessState state;
    private String contractAgreementId;
    private ContractAgreementDirection direction;
    private String counterPartyConnectorEndpoint;
    private String counterPartyParticipantId;
    private String assetName;
    private String assetId;
    private String errorMessage;

    TransferHistoryEntryBuilder() {
    }

    /**
     * @return {@code this}.
     */
    public TransferHistoryEntry.TransferHistoryEntryBuilder transferProcessId(@javax.annotation.Nonnull final String transferProcessId) {
      if (transferProcessId == null) {
        throw new NullPointerException("transferProcessId is marked non-null but is null");
      }
      this.transferProcessId = transferProcessId;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public TransferHistoryEntry.TransferHistoryEntryBuilder createdDate(@javax.annotation.Nonnull final OffsetDateTime createdDate) {
      if (createdDate == null) {
        throw new NullPointerException("createdDate is marked non-null but is null");
      }
      this.createdDate = createdDate;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public TransferHistoryEntry.TransferHistoryEntryBuilder lastUpdatedDate(@javax.annotation.Nonnull final OffsetDateTime lastUpdatedDate) {
      if (lastUpdatedDate == null) {
        throw new NullPointerException("lastUpdatedDate is marked non-null but is null");
      }
      this.lastUpdatedDate = lastUpdatedDate;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public TransferHistoryEntry.TransferHistoryEntryBuilder state(@javax.annotation.Nonnull final TransferProcessState state) {
      if (state == null) {
        throw new NullPointerException("state is marked non-null but is null");
      }
      this.state = state;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public TransferHistoryEntry.TransferHistoryEntryBuilder contractAgreementId(@javax.annotation.Nonnull final String contractAgreementId) {
      if (contractAgreementId == null) {
        throw new NullPointerException("contractAgreementId is marked non-null but is null");
      }
      this.contractAgreementId = contractAgreementId;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public TransferHistoryEntry.TransferHistoryEntryBuilder direction(@javax.annotation.Nonnull final ContractAgreementDirection direction) {
      if (direction == null) {
        throw new NullPointerException("direction is marked non-null but is null");
      }
      this.direction = direction;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public TransferHistoryEntry.TransferHistoryEntryBuilder counterPartyConnectorEndpoint(@javax.annotation.Nonnull final String counterPartyConnectorEndpoint) {
      if (counterPartyConnectorEndpoint == null) {
        throw new NullPointerException("counterPartyConnectorEndpoint is marked non-null but is null");
      }
      this.counterPartyConnectorEndpoint = counterPartyConnectorEndpoint;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public TransferHistoryEntry.TransferHistoryEntryBuilder counterPartyParticipantId(@javax.annotation.Nonnull final String counterPartyParticipantId) {
      if (counterPartyParticipantId == null) {
        throw new NullPointerException("counterPartyParticipantId is marked non-null but is null");
      }
      this.counterPartyParticipantId = counterPartyParticipantId;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public TransferHistoryEntry.TransferHistoryEntryBuilder assetName(@javax.annotation.Nonnull final String assetName) {
      if (assetName == null) {
        throw new NullPointerException("assetName is marked non-null but is null");
      }
      this.assetName = assetName;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public TransferHistoryEntry.TransferHistoryEntryBuilder assetId(@javax.annotation.Nonnull final String assetId) {
      if (assetId == null) {
        throw new NullPointerException("assetId is marked non-null but is null");
      }
      this.assetId = assetId;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public TransferHistoryEntry.TransferHistoryEntryBuilder errorMessage(@javax.annotation.Nullable final String errorMessage) {
      this.errorMessage = errorMessage;
      return this;
    }

    public TransferHistoryEntry build() {
      return new TransferHistoryEntry(this.transferProcessId, this.createdDate, this.lastUpdatedDate, this.state, this.contractAgreementId, this.direction, this.counterPartyConnectorEndpoint, this.counterPartyParticipantId, this.assetName, this.assetId, this.errorMessage);
    }

    @Override
    public String toString() {
      return "TransferHistoryEntry.TransferHistoryEntryBuilder(transferProcessId=" + this.transferProcessId + ", createdDate=" + this.createdDate + ", lastUpdatedDate=" + this.lastUpdatedDate + ", state=" + this.state + ", contractAgreementId=" + this.contractAgreementId + ", direction=" + this.direction + ", counterPartyConnectorEndpoint=" + this.counterPartyConnectorEndpoint + ", counterPartyParticipantId=" + this.counterPartyParticipantId + ", assetName=" + this.assetName + ", assetId=" + this.assetId + ", errorMessage=" + this.errorMessage + ")";
    }
  }

  public static TransferHistoryEntry.TransferHistoryEntryBuilder builder() {
    return new TransferHistoryEntry.TransferHistoryEntryBuilder();
  }

  public TransferHistoryEntry(@javax.annotation.Nonnull final String transferProcessId, @javax.annotation.Nonnull final OffsetDateTime createdDate, @javax.annotation.Nonnull final OffsetDateTime lastUpdatedDate, @javax.annotation.Nonnull final TransferProcessState state, @javax.annotation.Nonnull final String contractAgreementId, @javax.annotation.Nonnull final ContractAgreementDirection direction, @javax.annotation.Nonnull final String counterPartyConnectorEndpoint, @javax.annotation.Nonnull final String counterPartyParticipantId, @javax.annotation.Nonnull final String assetName, @javax.annotation.Nonnull final String assetId, @javax.annotation.Nullable final String errorMessage) {
    if (transferProcessId == null) {
      throw new NullPointerException("transferProcessId is marked non-null but is null");
    }
    if (createdDate == null) {
      throw new NullPointerException("createdDate is marked non-null but is null");
    }
    if (lastUpdatedDate == null) {
      throw new NullPointerException("lastUpdatedDate is marked non-null but is null");
    }
    if (state == null) {
      throw new NullPointerException("state is marked non-null but is null");
    }
    if (contractAgreementId == null) {
      throw new NullPointerException("contractAgreementId is marked non-null but is null");
    }
    if (direction == null) {
      throw new NullPointerException("direction is marked non-null but is null");
    }
    if (counterPartyConnectorEndpoint == null) {
      throw new NullPointerException("counterPartyConnectorEndpoint is marked non-null but is null");
    }
    if (counterPartyParticipantId == null) {
      throw new NullPointerException("counterPartyParticipantId is marked non-null but is null");
    }
    if (assetName == null) {
      throw new NullPointerException("assetName is marked non-null but is null");
    }
    if (assetId == null) {
      throw new NullPointerException("assetId is marked non-null but is null");
    }
    this.transferProcessId = transferProcessId;
    this.createdDate = createdDate;
    this.lastUpdatedDate = lastUpdatedDate;
    this.state = state;
    this.contractAgreementId = contractAgreementId;
    this.direction = direction;
    this.counterPartyConnectorEndpoint = counterPartyConnectorEndpoint;
    this.counterPartyParticipantId = counterPartyParticipantId;
    this.assetName = assetName;
    this.assetId = assetId;
    this.errorMessage = errorMessage;
  }
}
