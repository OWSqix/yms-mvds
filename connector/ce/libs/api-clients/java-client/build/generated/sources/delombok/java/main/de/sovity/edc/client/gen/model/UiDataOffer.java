/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.UiAsset;
import de.sovity.edc.client.gen.model.UiContractOffer;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import de.sovity.edc.client.gen.JSON;

/**
 * Catalog Data Offer as required by the UI
 */
@ApiModel(description = "Catalog Data Offer as required by the UI")
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UiDataOffer {
  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  @javax.annotation.Nonnull
  private String endpoint;
  public static final String SERIALIZED_NAME_PARTICIPANT_ID = "participantId";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_ID)
  @javax.annotation.Nonnull
  private String participantId;
  public static final String SERIALIZED_NAME_ASSET = "asset";
  @SerializedName(SERIALIZED_NAME_ASSET)
  @javax.annotation.Nonnull
  private UiAsset asset;
  public static final String SERIALIZED_NAME_CONTRACT_OFFERS = "contractOffers";
  @SerializedName(SERIALIZED_NAME_CONTRACT_OFFERS)
  @javax.annotation.Nonnull
  private List<UiContractOffer> contractOffers;

  public UiDataOffer() {
  }

  public UiDataOffer endpoint(@javax.annotation.Nonnull String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * Connector Endpoint
   * @return endpoint
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Connector Endpoint")
  public String getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(@javax.annotation.Nonnull String endpoint) {
    this.endpoint = endpoint;
  }

  public UiDataOffer participantId(@javax.annotation.Nonnull String participantId) {
    this.participantId = participantId;
    return this;
  }

  /**
   * Participant ID. Required for initiating transfers.
   * @return participantId
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Participant ID. Required for initiating transfers.")
  public String getParticipantId() {
    return participantId;
  }

  public void setParticipantId(@javax.annotation.Nonnull String participantId) {
    this.participantId = participantId;
  }

  public UiDataOffer asset(@javax.annotation.Nonnull UiAsset asset) {
    this.asset = asset;
    return this;
  }

  /**
   * Asset Information
   * @return asset
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Asset Information")
  public UiAsset getAsset() {
    return asset;
  }

  public void setAsset(@javax.annotation.Nonnull UiAsset asset) {
    this.asset = asset;
  }

  public UiDataOffer contractOffers(@javax.annotation.Nonnull List<UiContractOffer> contractOffers) {
    this.contractOffers = contractOffers;
    return this;
  }

  public UiDataOffer addContractOffersItem(UiContractOffer contractOffersItem) {
    if (this.contractOffers == null) {
      this.contractOffers = new ArrayList<>();
    }
    this.contractOffers.add(contractOffersItem);
    return this;
  }

  /**
   * Available Contract Offers
   * @return contractOffers
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Available Contract Offers")
  public List<UiContractOffer> getContractOffers() {
    return contractOffers;
  }

  public void setContractOffers(@javax.annotation.Nonnull List<UiContractOffer> contractOffers) {
    this.contractOffers = contractOffers;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UiDataOffer {\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    participantId: ").append(toIndentedString(participantId)).append("\n");
    sb.append("    asset: ").append(toIndentedString(asset)).append("\n");
    sb.append("    contractOffers: ").append(toIndentedString(contractOffers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endpoint");
    openapiFields.add("participantId");
    openapiFields.add("asset");
    openapiFields.add("contractOffers");
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("endpoint");
    openapiRequiredFields.add("participantId");
    openapiRequiredFields.add("asset");
    openapiRequiredFields.add("contractOffers");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UiDataOffer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!UiDataOffer.openapiRequiredFields.isEmpty()) {
        // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in UiDataOffer is not found in the empty JSON string", UiDataOffer.openapiRequiredFields.toString()));
      }
    }
    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!UiDataOffer.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UiDataOffer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : UiDataOffer.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if (!jsonObj.get("endpoint").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
    }
    if (!jsonObj.get("participantId").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `participantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participantId").toString()));
    }
    // validate the required field `asset`
    UiAsset.validateJsonElement(jsonObj.get("asset"));
    // ensure the json data is an array
    if (!jsonObj.get("contractOffers").isJsonArray()) {
      throw new IllegalArgumentException(String.format("Expected the field `contractOffers` to be an array in the JSON string but got `%s`", jsonObj.get("contractOffers").toString()));
    }
    JsonArray jsonArraycontractOffers = jsonObj.getAsJsonArray("contractOffers");
    // validate the required field `contractOffers` (array)
    for (int i = 0; i < jsonArraycontractOffers.size(); i++) {
      UiContractOffer.validateJsonElement(jsonArraycontractOffers.get(i));
    }
    ;
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!UiDataOffer.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'UiDataOffer' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<UiDataOffer> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(UiDataOffer.class));
      return (TypeAdapter<T>) new TypeAdapter<UiDataOffer>() {
        @Override
        public void write(JsonWriter out, UiDataOffer value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        @Override
        public UiDataOffer read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of UiDataOffer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UiDataOffer
   * @throws IOException if the JSON string is invalid with respect to UiDataOffer
   */
  public static UiDataOffer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UiDataOffer.class);
  }

  /**
   * Convert an instance of UiDataOffer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  private static List<UiContractOffer> $default$contractOffers() {
    return new ArrayList<>();
  }


  public static class UiDataOfferBuilder {
    private String endpoint;
    private String participantId;
    private UiAsset asset;
    private boolean contractOffers$set;
    private List<UiContractOffer> contractOffers$value;

    UiDataOfferBuilder() {
    }

    /**
     * @return {@code this}.
     */
    public UiDataOffer.UiDataOfferBuilder endpoint(@javax.annotation.Nonnull final String endpoint) {
      if (endpoint == null) {
        throw new NullPointerException("endpoint is marked non-null but is null");
      }
      this.endpoint = endpoint;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public UiDataOffer.UiDataOfferBuilder participantId(@javax.annotation.Nonnull final String participantId) {
      if (participantId == null) {
        throw new NullPointerException("participantId is marked non-null but is null");
      }
      this.participantId = participantId;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public UiDataOffer.UiDataOfferBuilder asset(@javax.annotation.Nonnull final UiAsset asset) {
      if (asset == null) {
        throw new NullPointerException("asset is marked non-null but is null");
      }
      this.asset = asset;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public UiDataOffer.UiDataOfferBuilder contractOffers(@javax.annotation.Nonnull final List<UiContractOffer> contractOffers) {
      if (contractOffers == null) {
        throw new NullPointerException("contractOffers is marked non-null but is null");
      }
      this.contractOffers$value = contractOffers;
      contractOffers$set = true;
      return this;
    }

    public UiDataOffer build() {
      List<UiContractOffer> contractOffers$value = this.contractOffers$value;
      if (!this.contractOffers$set) contractOffers$value = UiDataOffer.$default$contractOffers();
      return new UiDataOffer(this.endpoint, this.participantId, this.asset, contractOffers$value);
    }

    @Override
    public String toString() {
      return "UiDataOffer.UiDataOfferBuilder(endpoint=" + this.endpoint + ", participantId=" + this.participantId + ", asset=" + this.asset + ", contractOffers$value=" + this.contractOffers$value + ")";
    }
  }

  public static UiDataOffer.UiDataOfferBuilder builder() {
    return new UiDataOffer.UiDataOfferBuilder();
  }

  public UiDataOffer(@javax.annotation.Nonnull final String endpoint, @javax.annotation.Nonnull final String participantId, @javax.annotation.Nonnull final UiAsset asset, @javax.annotation.Nonnull final List<UiContractOffer> contractOffers) {
    if (endpoint == null) {
      throw new NullPointerException("endpoint is marked non-null but is null");
    }
    if (participantId == null) {
      throw new NullPointerException("participantId is marked non-null but is null");
    }
    if (asset == null) {
      throw new NullPointerException("asset is marked non-null but is null");
    }
    if (contractOffers == null) {
      throw new NullPointerException("contractOffers is marked non-null but is null");
    }
    this.endpoint = endpoint;
    this.participantId = participantId;
    this.asset = asset;
    this.contractOffers = contractOffers;
  }
}
