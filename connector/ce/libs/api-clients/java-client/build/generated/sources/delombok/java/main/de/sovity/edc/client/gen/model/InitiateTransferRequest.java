/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import de.sovity.edc.client.gen.JSON;

/**
 * For type PARAMS_ONLY: Required data for starting a Transfer Process
 */
@ApiModel(description = "For type PARAMS_ONLY: Required data for starting a Transfer Process")
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class InitiateTransferRequest {
  public static final String SERIALIZED_NAME_CONTRACT_AGREEMENT_ID = "contractAgreementId";
  @SerializedName(SERIALIZED_NAME_CONTRACT_AGREEMENT_ID)
  @javax.annotation.Nonnull
  private String contractAgreementId;
  public static final String SERIALIZED_NAME_TRANSFER_TYPE = "transferType";
  @SerializedName(SERIALIZED_NAME_TRANSFER_TYPE)
  @javax.annotation.Nonnull
  private String transferType;
  public static final String SERIALIZED_NAME_DATA_SINK_PROPERTIES = "dataSinkProperties";
  @SerializedName(SERIALIZED_NAME_DATA_SINK_PROPERTIES)
  @javax.annotation.Nonnull
  private Map<String, String> dataSinkProperties;
  public static final String SERIALIZED_NAME_TRANSFER_PROCESS_PROPERTIES = "transferProcessProperties";
  @SerializedName(SERIALIZED_NAME_TRANSFER_PROCESS_PROPERTIES)
  @javax.annotation.Nonnull
  private Map<String, String> transferProcessProperties;

  public InitiateTransferRequest() {
  }

  public InitiateTransferRequest contractAgreementId(@javax.annotation.Nonnull String contractAgreementId) {
    this.contractAgreementId = contractAgreementId;
    return this;
  }

  /**
   * Contract Agreement ID
   * @return contractAgreementId
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Contract Agreement ID")
  public String getContractAgreementId() {
    return contractAgreementId;
  }

  public void setContractAgreementId(@javax.annotation.Nonnull String contractAgreementId) {
    this.contractAgreementId = contractAgreementId;
  }

  public InitiateTransferRequest transferType(@javax.annotation.Nonnull String transferType) {
    this.transferType = transferType;
    return this;
  }

  /**
   * Transfer Type. Used to select a compatible DataPlane. Examples are &#39;HttpData-PUSH&#39;, &#39;HttpData-PULL&#39;. Not to be confused with the &#39;type&#39; of the data source, or the &#39;type&#39; of the data sink found in the &#39;properties&#39;
   * @return transferType
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Transfer Type. Used to select a compatible DataPlane. Examples are \'HttpData-PUSH\', \'HttpData-PULL\'. Not to be confused with the \'type\' of the data source, or the \'type\' of the data sink found in the \'properties\'")
  public String getTransferType() {
    return transferType;
  }

  public void setTransferType(@javax.annotation.Nonnull String transferType) {
    this.transferType = transferType;
  }

  public InitiateTransferRequest dataSinkProperties(@javax.annotation.Nonnull Map<String, String> dataSinkProperties) {
    this.dataSinkProperties = dataSinkProperties;
    return this;
  }

  public InitiateTransferRequest putDataSinkPropertiesItem(String key, String dataSinkPropertiesItem) {
    if (this.dataSinkProperties == null) {
      this.dataSinkProperties = new HashMap<>();
    }
    this.dataSinkProperties.put(key, dataSinkPropertiesItem);
    return this;
  }

  /**
   * Data Sink / Data Address
   * @return dataSinkProperties
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Data Sink / Data Address")
  public Map<String, String> getDataSinkProperties() {
    return dataSinkProperties;
  }

  public void setDataSinkProperties(@javax.annotation.Nonnull Map<String, String> dataSinkProperties) {
    this.dataSinkProperties = dataSinkProperties;
  }

  public InitiateTransferRequest transferProcessProperties(@javax.annotation.Nonnull Map<String, String> transferProcessProperties) {
    this.transferProcessProperties = transferProcessProperties;
    return this;
  }

  public InitiateTransferRequest putTransferProcessPropertiesItem(String key, String transferProcessPropertiesItem) {
    if (this.transferProcessProperties == null) {
      this.transferProcessProperties = new HashMap<>();
    }
    this.transferProcessProperties.put(key, transferProcessPropertiesItem);
    return this;
  }

  /**
   * Additional transfer process properties. These are not passed to the consumer EDC
   * @return transferProcessProperties
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Additional transfer process properties. These are not passed to the consumer EDC")
  public Map<String, String> getTransferProcessProperties() {
    return transferProcessProperties;
  }

  public void setTransferProcessProperties(@javax.annotation.Nonnull Map<String, String> transferProcessProperties) {
    this.transferProcessProperties = transferProcessProperties;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InitiateTransferRequest {\n");
    sb.append("    contractAgreementId: ").append(toIndentedString(contractAgreementId)).append("\n");
    sb.append("    transferType: ").append(toIndentedString(transferType)).append("\n");
    sb.append("    dataSinkProperties: ").append(toIndentedString(dataSinkProperties)).append("\n");
    sb.append("    transferProcessProperties: ").append(toIndentedString(transferProcessProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contractAgreementId");
    openapiFields.add("transferType");
    openapiFields.add("dataSinkProperties");
    openapiFields.add("transferProcessProperties");
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contractAgreementId");
    openapiRequiredFields.add("transferType");
    openapiRequiredFields.add("dataSinkProperties");
    openapiRequiredFields.add("transferProcessProperties");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InitiateTransferRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!InitiateTransferRequest.openapiRequiredFields.isEmpty()) {
        // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in InitiateTransferRequest is not found in the empty JSON string", InitiateTransferRequest.openapiRequiredFields.toString()));
      }
    }
    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!InitiateTransferRequest.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InitiateTransferRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : InitiateTransferRequest.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if (!jsonObj.get("contractAgreementId").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `contractAgreementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractAgreementId").toString()));
    }
    if (!jsonObj.get("transferType").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `transferType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferType").toString()));
    }
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!InitiateTransferRequest.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'InitiateTransferRequest' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<InitiateTransferRequest> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(InitiateTransferRequest.class));
      return (TypeAdapter<T>) new TypeAdapter<InitiateTransferRequest>() {
        @Override
        public void write(JsonWriter out, InitiateTransferRequest value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        @Override
        public InitiateTransferRequest read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of InitiateTransferRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InitiateTransferRequest
   * @throws IOException if the JSON string is invalid with respect to InitiateTransferRequest
   */
  public static InitiateTransferRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InitiateTransferRequest.class);
  }

  /**
   * Convert an instance of InitiateTransferRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  private static Map<String, String> $default$dataSinkProperties() {
    return new HashMap<>();
  }

  private static Map<String, String> $default$transferProcessProperties() {
    return new HashMap<>();
  }


  public static class InitiateTransferRequestBuilder {
    private String contractAgreementId;
    private String transferType;
    private boolean dataSinkProperties$set;
    private Map<String, String> dataSinkProperties$value;
    private boolean transferProcessProperties$set;
    private Map<String, String> transferProcessProperties$value;

    InitiateTransferRequestBuilder() {
    }

    /**
     * @return {@code this}.
     */
    public InitiateTransferRequest.InitiateTransferRequestBuilder contractAgreementId(@javax.annotation.Nonnull final String contractAgreementId) {
      if (contractAgreementId == null) {
        throw new NullPointerException("contractAgreementId is marked non-null but is null");
      }
      this.contractAgreementId = contractAgreementId;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public InitiateTransferRequest.InitiateTransferRequestBuilder transferType(@javax.annotation.Nonnull final String transferType) {
      if (transferType == null) {
        throw new NullPointerException("transferType is marked non-null but is null");
      }
      this.transferType = transferType;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public InitiateTransferRequest.InitiateTransferRequestBuilder dataSinkProperties(@javax.annotation.Nonnull final Map<String, String> dataSinkProperties) {
      if (dataSinkProperties == null) {
        throw new NullPointerException("dataSinkProperties is marked non-null but is null");
      }
      this.dataSinkProperties$value = dataSinkProperties;
      dataSinkProperties$set = true;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public InitiateTransferRequest.InitiateTransferRequestBuilder transferProcessProperties(@javax.annotation.Nonnull final Map<String, String> transferProcessProperties) {
      if (transferProcessProperties == null) {
        throw new NullPointerException("transferProcessProperties is marked non-null but is null");
      }
      this.transferProcessProperties$value = transferProcessProperties;
      transferProcessProperties$set = true;
      return this;
    }

    public InitiateTransferRequest build() {
      Map<String, String> dataSinkProperties$value = this.dataSinkProperties$value;
      if (!this.dataSinkProperties$set) dataSinkProperties$value = InitiateTransferRequest.$default$dataSinkProperties();
      Map<String, String> transferProcessProperties$value = this.transferProcessProperties$value;
      if (!this.transferProcessProperties$set) transferProcessProperties$value = InitiateTransferRequest.$default$transferProcessProperties();
      return new InitiateTransferRequest(this.contractAgreementId, this.transferType, dataSinkProperties$value, transferProcessProperties$value);
    }

    @Override
    public String toString() {
      return "InitiateTransferRequest.InitiateTransferRequestBuilder(contractAgreementId=" + this.contractAgreementId + ", transferType=" + this.transferType + ", dataSinkProperties$value=" + this.dataSinkProperties$value + ", transferProcessProperties$value=" + this.transferProcessProperties$value + ")";
    }
  }

  public static InitiateTransferRequest.InitiateTransferRequestBuilder builder() {
    return new InitiateTransferRequest.InitiateTransferRequestBuilder();
  }

  public InitiateTransferRequest(@javax.annotation.Nonnull final String contractAgreementId, @javax.annotation.Nonnull final String transferType, @javax.annotation.Nonnull final Map<String, String> dataSinkProperties, @javax.annotation.Nonnull final Map<String, String> transferProcessProperties) {
    if (contractAgreementId == null) {
      throw new NullPointerException("contractAgreementId is marked non-null but is null");
    }
    if (transferType == null) {
      throw new NullPointerException("transferType is marked non-null but is null");
    }
    if (dataSinkProperties == null) {
      throw new NullPointerException("dataSinkProperties is marked non-null but is null");
    }
    if (transferProcessProperties == null) {
      throw new NullPointerException("transferProcessProperties is marked non-null but is null");
    }
    this.contractAgreementId = contractAgreementId;
    this.transferType = transferType;
    this.dataSinkProperties = dataSinkProperties;
    this.transferProcessProperties = transferProcessProperties;
  }
}
