/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.UiPolicy;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import de.sovity.edc.client.gen.JSON;

/**
 * Policy Definition as required for the Policy Definition Page
 */
@ApiModel(description = "Policy Definition as required for the Policy Definition Page")
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class PolicyDefinitionDto {
  public static final String SERIALIZED_NAME_POLICY_DEFINITION_ID = "policyDefinitionId";
  @SerializedName(SERIALIZED_NAME_POLICY_DEFINITION_ID)
  @javax.annotation.Nonnull
  private String policyDefinitionId;
  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  @javax.annotation.Nonnull
  private UiPolicy policy;

  public PolicyDefinitionDto() {
  }

  public PolicyDefinitionDto policyDefinitionId(@javax.annotation.Nonnull String policyDefinitionId) {
    this.policyDefinitionId = policyDefinitionId;
    return this;
  }

  /**
   * Policy Definition ID
   * @return policyDefinitionId
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Policy Definition ID")
  public String getPolicyDefinitionId() {
    return policyDefinitionId;
  }

  public void setPolicyDefinitionId(@javax.annotation.Nonnull String policyDefinitionId) {
    this.policyDefinitionId = policyDefinitionId;
  }

  public PolicyDefinitionDto policy(@javax.annotation.Nonnull UiPolicy policy) {
    this.policy = policy;
    return this;
  }

  /**
   * Policy Contents
   * @return policy
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Policy Contents")
  public UiPolicy getPolicy() {
    return policy;
  }

  public void setPolicy(@javax.annotation.Nonnull UiPolicy policy) {
    this.policy = policy;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyDefinitionDto {\n");
    sb.append("    policyDefinitionId: ").append(toIndentedString(policyDefinitionId)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("policyDefinitionId");
    openapiFields.add("policy");
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("policyDefinitionId");
    openapiRequiredFields.add("policy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyDefinitionDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!PolicyDefinitionDto.openapiRequiredFields.isEmpty()) {
        // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyDefinitionDto is not found in the empty JSON string", PolicyDefinitionDto.openapiRequiredFields.toString()));
      }
    }
    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!PolicyDefinitionDto.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyDefinitionDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : PolicyDefinitionDto.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if (!jsonObj.get("policyDefinitionId").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `policyDefinitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyDefinitionId").toString()));
    }
    // validate the required field `policy`
    UiPolicy.validateJsonElement(jsonObj.get("policy"));
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!PolicyDefinitionDto.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'PolicyDefinitionDto' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<PolicyDefinitionDto> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(PolicyDefinitionDto.class));
      return (TypeAdapter<T>) new TypeAdapter<PolicyDefinitionDto>() {
        @Override
        public void write(JsonWriter out, PolicyDefinitionDto value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        @Override
        public PolicyDefinitionDto read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyDefinitionDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyDefinitionDto
   * @throws IOException if the JSON string is invalid with respect to PolicyDefinitionDto
   */
  public static PolicyDefinitionDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyDefinitionDto.class);
  }

  /**
   * Convert an instance of PolicyDefinitionDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }


  public static class PolicyDefinitionDtoBuilder {
    private String policyDefinitionId;
    private UiPolicy policy;

    PolicyDefinitionDtoBuilder() {
    }

    /**
     * @return {@code this}.
     */
    public PolicyDefinitionDto.PolicyDefinitionDtoBuilder policyDefinitionId(@javax.annotation.Nonnull final String policyDefinitionId) {
      if (policyDefinitionId == null) {
        throw new NullPointerException("policyDefinitionId is marked non-null but is null");
      }
      this.policyDefinitionId = policyDefinitionId;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public PolicyDefinitionDto.PolicyDefinitionDtoBuilder policy(@javax.annotation.Nonnull final UiPolicy policy) {
      if (policy == null) {
        throw new NullPointerException("policy is marked non-null but is null");
      }
      this.policy = policy;
      return this;
    }

    public PolicyDefinitionDto build() {
      return new PolicyDefinitionDto(this.policyDefinitionId, this.policy);
    }

    @Override
    public String toString() {
      return "PolicyDefinitionDto.PolicyDefinitionDtoBuilder(policyDefinitionId=" + this.policyDefinitionId + ", policy=" + this.policy + ")";
    }
  }

  public static PolicyDefinitionDto.PolicyDefinitionDtoBuilder builder() {
    return new PolicyDefinitionDto.PolicyDefinitionDtoBuilder();
  }

  public PolicyDefinitionDto(@javax.annotation.Nonnull final String policyDefinitionId, @javax.annotation.Nonnull final UiPolicy policy) {
    if (policyDefinitionId == null) {
      throw new NullPointerException("policyDefinitionId is marked non-null but is null");
    }
    if (policy == null) {
      throw new NullPointerException("policy is marked non-null but is null");
    }
    this.policyDefinitionId = policyDefinitionId;
    this.policy = policy;
  }
}
