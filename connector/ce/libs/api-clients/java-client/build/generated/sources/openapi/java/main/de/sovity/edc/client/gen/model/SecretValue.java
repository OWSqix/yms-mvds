/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import de.sovity.edc.client.gen.JSON;

/**
 * A value either inlined or to be fetched from the Vault. Raw secret values will land in the database and will be retrievable via the Eclipse EDC Management API.
 */
@ApiModel(description = "A value either inlined or to be fetched from the Vault. Raw secret values will land in the database and will be retrievable via the Eclipse EDC Management API.")
@lombok.AllArgsConstructor
@lombok.Builder
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class SecretValue {
  public static final String SERIALIZED_NAME_SECRET_NAME = "secretName";
  @SerializedName(SERIALIZED_NAME_SECRET_NAME)
  @javax.annotation.Nullable
  private String secretName;

  public static final String SERIALIZED_NAME_RAW_VALUE = "rawValue";
  @SerializedName(SERIALIZED_NAME_RAW_VALUE)
  @javax.annotation.Nullable
  private String rawValue;

  public SecretValue() {
  }

  public SecretValue secretName(@javax.annotation.Nullable String secretName) {
    this.secretName = secretName;
    return this;
  }

  /**
   * Secret Name / Vault Key Name.
   * @return secretName
   */
  @javax.annotation.Nullable
  @ApiModelProperty(example = "myApiAuthKey", value = "Secret Name / Vault Key Name.")
  public String getSecretName() {
    return secretName;
  }

  public void setSecretName(@javax.annotation.Nullable String secretName) {
    this.secretName = secretName;
  }


  public SecretValue rawValue(@javax.annotation.Nullable String rawValue) {
    this.rawValue = rawValue;
    return this;
  }

  /**
   * Raw inline Value.
   * @return rawValue
   */
  @javax.annotation.Nullable
  @ApiModelProperty(example = "<auth key here>", value = "Raw inline Value.")
  public String getRawValue() {
    return rawValue;
  }

  public void setRawValue(@javax.annotation.Nullable String rawValue) {
    this.rawValue = rawValue;
  }



  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecretValue {\n");
    sb.append("    secretName: ").append(toIndentedString(secretName)).append("\n");
    sb.append("    rawValue: ").append(toIndentedString(rawValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("secretName");
    openapiFields.add("rawValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SecretValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecretValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecretValue is not found in the empty JSON string", SecretValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecretValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecretValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("secretName") != null && !jsonObj.get("secretName").isJsonNull()) && !jsonObj.get("secretName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretName").toString()));
      }
      if ((jsonObj.get("rawValue") != null && !jsonObj.get("rawValue").isJsonNull()) && !jsonObj.get("rawValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecretValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecretValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecretValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecretValue.class));

       return (TypeAdapter<T>) new TypeAdapter<SecretValue>() {
           @Override
           public void write(JsonWriter out, SecretValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecretValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SecretValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SecretValue
   * @throws IOException if the JSON string is invalid with respect to SecretValue
   */
  public static SecretValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecretValue.class);
  }

  /**
   * Convert an instance of SecretValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

