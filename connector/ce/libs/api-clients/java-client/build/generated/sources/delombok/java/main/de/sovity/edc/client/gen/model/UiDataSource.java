/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.DataSourceType;
import de.sovity.edc.client.gen.model.UiDataSourceHttpData;
import de.sovity.edc.client.gen.model.UiDataSourceOnRequest;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import de.sovity.edc.client.gen.JSON;

/**
 * Type-safe data source as supported by the sovity product landscape. Contains extension points for using custom data address properties.
 */
@ApiModel(description = "Type-safe data source as supported by the sovity product landscape. Contains extension points for using custom data address properties.")
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UiDataSource {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private DataSourceType type;
  public static final String SERIALIZED_NAME_HTTP_DATA = "httpData";
  @SerializedName(SERIALIZED_NAME_HTTP_DATA)
  @javax.annotation.Nullable
  private UiDataSourceHttpData httpData;
  public static final String SERIALIZED_NAME_ON_REQUEST = "onRequest";
  @SerializedName(SERIALIZED_NAME_ON_REQUEST)
  @javax.annotation.Nullable
  private UiDataSourceOnRequest onRequest;
  public static final String SERIALIZED_NAME_CUSTOM_PROPERTIES = "customProperties";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PROPERTIES)
  @javax.annotation.Nullable
  private Map<String, String> customProperties;

  public UiDataSource() {
  }

  public UiDataSource type(@javax.annotation.Nonnull DataSourceType type) {
    this.type = type;
    return this;
  }

  /**
   * Data Address Type.
   * @return type
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Data Address Type.")
  public DataSourceType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull DataSourceType type) {
    this.type = type;
  }

  public UiDataSource httpData(@javax.annotation.Nullable UiDataSourceHttpData httpData) {
    this.httpData = httpData;
    return this;
  }

  /**
   * Only for type HTTP_DATA
   * @return httpData
   */
  @javax.annotation.Nullable
  @ApiModelProperty("Only for type HTTP_DATA")
  public UiDataSourceHttpData getHttpData() {
    return httpData;
  }

  public void setHttpData(@javax.annotation.Nullable UiDataSourceHttpData httpData) {
    this.httpData = httpData;
  }

  public UiDataSource onRequest(@javax.annotation.Nullable UiDataSourceOnRequest onRequest) {
    this.onRequest = onRequest;
    return this;
  }

  /**
   * Only for type ON_REQUEST
   * @return onRequest
   */
  @javax.annotation.Nullable
  @ApiModelProperty("Only for type ON_REQUEST")
  public UiDataSourceOnRequest getOnRequest() {
    return onRequest;
  }

  public void setOnRequest(@javax.annotation.Nullable UiDataSourceOnRequest onRequest) {
    this.onRequest = onRequest;
  }

  public UiDataSource customProperties(@javax.annotation.Nullable Map<String, String> customProperties) {
    this.customProperties = customProperties;
    return this;
  }

  public UiDataSource putCustomPropertiesItem(String key, String customPropertiesItem) {
    if (this.customProperties == null) {
      this.customProperties = new HashMap<>();
    }
    this.customProperties.put(key, customPropertiesItem);
    return this;
  }

  /**
   * For all types. Custom Data Address Properties.
   * @return customProperties
   */
  @javax.annotation.Nullable
  @ApiModelProperty("For all types. Custom Data Address Properties.")
  public Map<String, String> getCustomProperties() {
    return customProperties;
  }

  public void setCustomProperties(@javax.annotation.Nullable Map<String, String> customProperties) {
    this.customProperties = customProperties;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UiDataSource {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    httpData: ").append(toIndentedString(httpData)).append("\n");
    sb.append("    onRequest: ").append(toIndentedString(onRequest)).append("\n");
    sb.append("    customProperties: ").append(toIndentedString(customProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("httpData");
    openapiFields.add("onRequest");
    openapiFields.add("customProperties");
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UiDataSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!UiDataSource.openapiRequiredFields.isEmpty()) {
        // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in UiDataSource is not found in the empty JSON string", UiDataSource.openapiRequiredFields.toString()));
      }
    }
    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!UiDataSource.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UiDataSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : UiDataSource.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // validate the required field `type`
    DataSourceType.validateJsonElement(jsonObj.get("type"));
    // validate the optional field `httpData`
    if (jsonObj.get("httpData") != null && !jsonObj.get("httpData").isJsonNull()) {
      UiDataSourceHttpData.validateJsonElement(jsonObj.get("httpData"));
    }
    // validate the optional field `onRequest`
    if (jsonObj.get("onRequest") != null && !jsonObj.get("onRequest").isJsonNull()) {
      UiDataSourceOnRequest.validateJsonElement(jsonObj.get("onRequest"));
    }
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!UiDataSource.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'UiDataSource' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<UiDataSource> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(UiDataSource.class));
      return (TypeAdapter<T>) new TypeAdapter<UiDataSource>() {
        @Override
        public void write(JsonWriter out, UiDataSource value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        @Override
        public UiDataSource read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of UiDataSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UiDataSource
   * @throws IOException if the JSON string is invalid with respect to UiDataSource
   */
  public static UiDataSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UiDataSource.class);
  }

  /**
   * Convert an instance of UiDataSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  private static Map<String, String> $default$customProperties() {
    return new HashMap<>();
  }


  public static class UiDataSourceBuilder {
    private DataSourceType type;
    private UiDataSourceHttpData httpData;
    private UiDataSourceOnRequest onRequest;
    private boolean customProperties$set;
    private Map<String, String> customProperties$value;

    UiDataSourceBuilder() {
    }

    /**
     * @return {@code this}.
     */
    public UiDataSource.UiDataSourceBuilder type(@javax.annotation.Nonnull final DataSourceType type) {
      if (type == null) {
        throw new NullPointerException("type is marked non-null but is null");
      }
      this.type = type;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public UiDataSource.UiDataSourceBuilder httpData(@javax.annotation.Nullable final UiDataSourceHttpData httpData) {
      this.httpData = httpData;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public UiDataSource.UiDataSourceBuilder onRequest(@javax.annotation.Nullable final UiDataSourceOnRequest onRequest) {
      this.onRequest = onRequest;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public UiDataSource.UiDataSourceBuilder customProperties(@javax.annotation.Nullable final Map<String, String> customProperties) {
      this.customProperties$value = customProperties;
      customProperties$set = true;
      return this;
    }

    public UiDataSource build() {
      Map<String, String> customProperties$value = this.customProperties$value;
      if (!this.customProperties$set) customProperties$value = UiDataSource.$default$customProperties();
      return new UiDataSource(this.type, this.httpData, this.onRequest, customProperties$value);
    }

    @Override
    public String toString() {
      return "UiDataSource.UiDataSourceBuilder(type=" + this.type + ", httpData=" + this.httpData + ", onRequest=" + this.onRequest + ", customProperties$value=" + this.customProperties$value + ")";
    }
  }

  public static UiDataSource.UiDataSourceBuilder builder() {
    return new UiDataSource.UiDataSourceBuilder();
  }

  public UiDataSource(@javax.annotation.Nonnull final DataSourceType type, @javax.annotation.Nullable final UiDataSourceHttpData httpData, @javax.annotation.Nullable final UiDataSourceOnRequest onRequest, @javax.annotation.Nullable final Map<String, String> customProperties) {
    if (type == null) {
      throw new NullPointerException("type is marked non-null but is null");
    }
    this.type = type;
    this.httpData = httpData;
    this.onRequest = onRequest;
    this.customProperties = customProperties;
  }
}
