/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import de.sovity.edc.client.gen.JSON;

/**
 * Managed Identity Wallet (MIW) Config
 */
@ApiModel(description = "Managed Identity Wallet (MIW) Config")
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class DashboardCxDidConfig {
  public static final String SERIALIZED_NAME_MY_DID = "myDid";
  @SerializedName(SERIALIZED_NAME_MY_DID)
  @javax.annotation.Nonnull
  private String myDid;
  public static final String SERIALIZED_NAME_WALLET_TOKEN_URL = "walletTokenUrl";
  @SerializedName(SERIALIZED_NAME_WALLET_TOKEN_URL)
  @javax.annotation.Nonnull
  private String walletTokenUrl;
  public static final String SERIALIZED_NAME_TRUSTED_VC_ISSUER = "trustedVcIssuer";
  @SerializedName(SERIALIZED_NAME_TRUSTED_VC_ISSUER)
  @javax.annotation.Nonnull
  private String trustedVcIssuer;
  public static final String SERIALIZED_NAME_BDRS_URL = "bdrsUrl";
  @SerializedName(SERIALIZED_NAME_BDRS_URL)
  @javax.annotation.Nonnull
  private String bdrsUrl;
  public static final String SERIALIZED_NAME_DIM_URL = "dimUrl";
  @SerializedName(SERIALIZED_NAME_DIM_URL)
  @javax.annotation.Nonnull
  private String dimUrl;

  public DashboardCxDidConfig() {
  }

  public DashboardCxDidConfig myDid(@javax.annotation.Nonnull String myDid) {
    this.myDid = myDid;
    return this;
  }

  /**
   * My DID / edc.iam.issuer.id
   * @return myDid
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "My DID / edc.iam.issuer.id")
  public String getMyDid() {
    return myDid;
  }

  public void setMyDid(@javax.annotation.Nonnull String myDid) {
    this.myDid = myDid;
  }

  public DashboardCxDidConfig walletTokenUrl(@javax.annotation.Nonnull String walletTokenUrl) {
    this.walletTokenUrl = walletTokenUrl;
    return this;
  }

  /**
   * Wallet Token Url / edc.iam.sts.oauth.token.url
   * @return walletTokenUrl
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Wallet Token Url / edc.iam.sts.oauth.token.url")
  public String getWalletTokenUrl() {
    return walletTokenUrl;
  }

  public void setWalletTokenUrl(@javax.annotation.Nonnull String walletTokenUrl) {
    this.walletTokenUrl = walletTokenUrl;
  }

  public DashboardCxDidConfig trustedVcIssuer(@javax.annotation.Nonnull String trustedVcIssuer) {
    this.trustedVcIssuer = trustedVcIssuer;
    return this;
  }

  /**
   * Trusted VC Issuer / edc.iam.trusted-issuer.cofinity.id
   * @return trustedVcIssuer
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Trusted VC Issuer / edc.iam.trusted-issuer.cofinity.id")
  public String getTrustedVcIssuer() {
    return trustedVcIssuer;
  }

  public void setTrustedVcIssuer(@javax.annotation.Nonnull String trustedVcIssuer) {
    this.trustedVcIssuer = trustedVcIssuer;
  }

  public DashboardCxDidConfig bdrsUrl(@javax.annotation.Nonnull String bdrsUrl) {
    this.bdrsUrl = bdrsUrl;
    return this;
  }

  /**
   * BDRS Url / tx.iam.iatp.bdrs.server.url
   * @return bdrsUrl
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "BDRS Url / tx.iam.iatp.bdrs.server.url")
  public String getBdrsUrl() {
    return bdrsUrl;
  }

  public void setBdrsUrl(@javax.annotation.Nonnull String bdrsUrl) {
    this.bdrsUrl = bdrsUrl;
  }

  public DashboardCxDidConfig dimUrl(@javax.annotation.Nonnull String dimUrl) {
    this.dimUrl = dimUrl;
    return this;
  }

  /**
   * STS DIM Url / edc.iam.sts.dim.url
   * @return dimUrl
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "STS DIM Url / edc.iam.sts.dim.url")
  public String getDimUrl() {
    return dimUrl;
  }

  public void setDimUrl(@javax.annotation.Nonnull String dimUrl) {
    this.dimUrl = dimUrl;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DashboardCxDidConfig {\n");
    sb.append("    myDid: ").append(toIndentedString(myDid)).append("\n");
    sb.append("    walletTokenUrl: ").append(toIndentedString(walletTokenUrl)).append("\n");
    sb.append("    trustedVcIssuer: ").append(toIndentedString(trustedVcIssuer)).append("\n");
    sb.append("    bdrsUrl: ").append(toIndentedString(bdrsUrl)).append("\n");
    sb.append("    dimUrl: ").append(toIndentedString(dimUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("myDid");
    openapiFields.add("walletTokenUrl");
    openapiFields.add("trustedVcIssuer");
    openapiFields.add("bdrsUrl");
    openapiFields.add("dimUrl");
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("myDid");
    openapiRequiredFields.add("walletTokenUrl");
    openapiRequiredFields.add("trustedVcIssuer");
    openapiRequiredFields.add("bdrsUrl");
    openapiRequiredFields.add("dimUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DashboardCxDidConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!DashboardCxDidConfig.openapiRequiredFields.isEmpty()) {
        // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in DashboardCxDidConfig is not found in the empty JSON string", DashboardCxDidConfig.openapiRequiredFields.toString()));
      }
    }
    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!DashboardCxDidConfig.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DashboardCxDidConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : DashboardCxDidConfig.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if (!jsonObj.get("myDid").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `myDid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("myDid").toString()));
    }
    if (!jsonObj.get("walletTokenUrl").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `walletTokenUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walletTokenUrl").toString()));
    }
    if (!jsonObj.get("trustedVcIssuer").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `trustedVcIssuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustedVcIssuer").toString()));
    }
    if (!jsonObj.get("bdrsUrl").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `bdrsUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bdrsUrl").toString()));
    }
    if (!jsonObj.get("dimUrl").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `dimUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dimUrl").toString()));
    }
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!DashboardCxDidConfig.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'DashboardCxDidConfig' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<DashboardCxDidConfig> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(DashboardCxDidConfig.class));
      return (TypeAdapter<T>) new TypeAdapter<DashboardCxDidConfig>() {
        @Override
        public void write(JsonWriter out, DashboardCxDidConfig value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        @Override
        public DashboardCxDidConfig read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of DashboardCxDidConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DashboardCxDidConfig
   * @throws IOException if the JSON string is invalid with respect to DashboardCxDidConfig
   */
  public static DashboardCxDidConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DashboardCxDidConfig.class);
  }

  /**
   * Convert an instance of DashboardCxDidConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }


  public static class DashboardCxDidConfigBuilder {
    private String myDid;
    private String walletTokenUrl;
    private String trustedVcIssuer;
    private String bdrsUrl;
    private String dimUrl;

    DashboardCxDidConfigBuilder() {
    }

    /**
     * @return {@code this}.
     */
    public DashboardCxDidConfig.DashboardCxDidConfigBuilder myDid(@javax.annotation.Nonnull final String myDid) {
      if (myDid == null) {
        throw new NullPointerException("myDid is marked non-null but is null");
      }
      this.myDid = myDid;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DashboardCxDidConfig.DashboardCxDidConfigBuilder walletTokenUrl(@javax.annotation.Nonnull final String walletTokenUrl) {
      if (walletTokenUrl == null) {
        throw new NullPointerException("walletTokenUrl is marked non-null but is null");
      }
      this.walletTokenUrl = walletTokenUrl;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DashboardCxDidConfig.DashboardCxDidConfigBuilder trustedVcIssuer(@javax.annotation.Nonnull final String trustedVcIssuer) {
      if (trustedVcIssuer == null) {
        throw new NullPointerException("trustedVcIssuer is marked non-null but is null");
      }
      this.trustedVcIssuer = trustedVcIssuer;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DashboardCxDidConfig.DashboardCxDidConfigBuilder bdrsUrl(@javax.annotation.Nonnull final String bdrsUrl) {
      if (bdrsUrl == null) {
        throw new NullPointerException("bdrsUrl is marked non-null but is null");
      }
      this.bdrsUrl = bdrsUrl;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DashboardCxDidConfig.DashboardCxDidConfigBuilder dimUrl(@javax.annotation.Nonnull final String dimUrl) {
      if (dimUrl == null) {
        throw new NullPointerException("dimUrl is marked non-null but is null");
      }
      this.dimUrl = dimUrl;
      return this;
    }

    public DashboardCxDidConfig build() {
      return new DashboardCxDidConfig(this.myDid, this.walletTokenUrl, this.trustedVcIssuer, this.bdrsUrl, this.dimUrl);
    }

    @Override
    public String toString() {
      return "DashboardCxDidConfig.DashboardCxDidConfigBuilder(myDid=" + this.myDid + ", walletTokenUrl=" + this.walletTokenUrl + ", trustedVcIssuer=" + this.trustedVcIssuer + ", bdrsUrl=" + this.bdrsUrl + ", dimUrl=" + this.dimUrl + ")";
    }
  }

  public static DashboardCxDidConfig.DashboardCxDidConfigBuilder builder() {
    return new DashboardCxDidConfig.DashboardCxDidConfigBuilder();
  }

  public DashboardCxDidConfig(@javax.annotation.Nonnull final String myDid, @javax.annotation.Nonnull final String walletTokenUrl, @javax.annotation.Nonnull final String trustedVcIssuer, @javax.annotation.Nonnull final String bdrsUrl, @javax.annotation.Nonnull final String dimUrl) {
    if (myDid == null) {
      throw new NullPointerException("myDid is marked non-null but is null");
    }
    if (walletTokenUrl == null) {
      throw new NullPointerException("walletTokenUrl is marked non-null but is null");
    }
    if (trustedVcIssuer == null) {
      throw new NullPointerException("trustedVcIssuer is marked non-null but is null");
    }
    if (bdrsUrl == null) {
      throw new NullPointerException("bdrsUrl is marked non-null but is null");
    }
    if (dimUrl == null) {
      throw new NullPointerException("dimUrl is marked non-null but is null");
    }
    this.myDid = myDid;
    this.walletTokenUrl = walletTokenUrl;
    this.trustedVcIssuer = trustedVcIssuer;
    this.bdrsUrl = bdrsUrl;
    this.dimUrl = dimUrl;
  }
}
