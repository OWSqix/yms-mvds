/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.SecretValue;
import de.sovity.edc.client.gen.model.UiDataSourceHttpDataMethod;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import de.sovity.edc.client.gen.JSON;

/**
 * HTTP_DATA type Data Source.
 */
@ApiModel(description = "HTTP_DATA type Data Source.")
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UiDataSourceHttpData {
  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  @javax.annotation.Nullable
  private UiDataSourceHttpDataMethod method;
  public static final String SERIALIZED_NAME_BASE_URL = "baseUrl";
  @SerializedName(SERIALIZED_NAME_BASE_URL)
  @javax.annotation.Nonnull
  private String baseUrl;
  public static final String SERIALIZED_NAME_QUERY_STRING = "queryString";
  @SerializedName(SERIALIZED_NAME_QUERY_STRING)
  @javax.annotation.Nullable
  private String queryString;
  public static final String SERIALIZED_NAME_AUTH_HEADER_NAME = "authHeaderName";
  @SerializedName(SERIALIZED_NAME_AUTH_HEADER_NAME)
  @javax.annotation.Nullable
  private String authHeaderName;
  public static final String SERIALIZED_NAME_AUTH_HEADER_VALUE = "authHeaderValue";
  @SerializedName(SERIALIZED_NAME_AUTH_HEADER_VALUE)
  @javax.annotation.Nullable
  private SecretValue authHeaderValue;
  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  @javax.annotation.Nullable
  private Map<String, String> headers;
  public static final String SERIALIZED_NAME_ENABLE_METHOD_PARAMETERIZATION = "enableMethodParameterization";
  @SerializedName(SERIALIZED_NAME_ENABLE_METHOD_PARAMETERIZATION)
  @javax.annotation.Nullable
  private Boolean enableMethodParameterization;
  public static final String SERIALIZED_NAME_ENABLE_PATH_PARAMETERIZATION = "enablePathParameterization";
  @SerializedName(SERIALIZED_NAME_ENABLE_PATH_PARAMETERIZATION)
  @javax.annotation.Nullable
  private Boolean enablePathParameterization;
  public static final String SERIALIZED_NAME_ENABLE_QUERY_PARAMETERIZATION = "enableQueryParameterization";
  @SerializedName(SERIALIZED_NAME_ENABLE_QUERY_PARAMETERIZATION)
  @javax.annotation.Nullable
  private Boolean enableQueryParameterization;
  public static final String SERIALIZED_NAME_ENABLE_BODY_PARAMETERIZATION = "enableBodyParameterization";
  @SerializedName(SERIALIZED_NAME_ENABLE_BODY_PARAMETERIZATION)
  @javax.annotation.Nullable
  private Boolean enableBodyParameterization;

  public UiDataSourceHttpData() {
  }

  public UiDataSourceHttpData method(@javax.annotation.Nullable UiDataSourceHttpDataMethod method) {
    this.method = method;
    return this;
  }

  /**
   * HTTP Request Method
   * @return method
   */
  @javax.annotation.Nullable
  @ApiModelProperty("HTTP Request Method")
  public UiDataSourceHttpDataMethod getMethod() {
    return method;
  }

  public void setMethod(@javax.annotation.Nullable UiDataSourceHttpDataMethod method) {
    this.method = method;
  }

  public UiDataSourceHttpData baseUrl(@javax.annotation.Nonnull String baseUrl) {
    this.baseUrl = baseUrl;
    return this;
  }

  /**
   * HTTP Request URL. If parameterized, additional pathParams will be joined onto existing one.
   * @return baseUrl
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://my-app.my-org.com/api/edc-data-offer/v1", required = true, value = "HTTP Request URL. If parameterized, additional pathParams will be joined onto existing one.")
  public String getBaseUrl() {
    return baseUrl;
  }

  public void setBaseUrl(@javax.annotation.Nonnull String baseUrl) {
    this.baseUrl = baseUrl;
  }

  public UiDataSourceHttpData queryString(@javax.annotation.Nullable String queryString) {
    this.queryString = queryString;
    return this;
  }

  /**
   * HTTP Request Query Params / Query String.
   * @return queryString
   */
  @javax.annotation.Nullable
  @ApiModelProperty(example = "search=example&limit=10", value = "HTTP Request Query Params / Query String.")
  public String getQueryString() {
    return queryString;
  }

  public void setQueryString(@javax.annotation.Nullable String queryString) {
    this.queryString = queryString;
  }

  public UiDataSourceHttpData authHeaderName(@javax.annotation.Nullable String authHeaderName) {
    this.authHeaderName = authHeaderName;
    return this;
  }

  /**
   * Auth Header name. The auth header is handled specially by the EDC as its value can be read from a vault.
   * @return authHeaderName
   */
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Authorization", value = "Auth Header name. The auth header is handled specially by the EDC as its value can be read from a vault.")
  public String getAuthHeaderName() {
    return authHeaderName;
  }

  public void setAuthHeaderName(@javax.annotation.Nullable String authHeaderName) {
    this.authHeaderName = authHeaderName;
  }

  public UiDataSourceHttpData authHeaderValue(@javax.annotation.Nullable SecretValue authHeaderValue) {
    this.authHeaderValue = authHeaderValue;
    return this;
  }

  /**
   * Auth Header value.
   * @return authHeaderValue
   */
  @javax.annotation.Nullable
  @ApiModelProperty("Auth Header value.")
  public SecretValue getAuthHeaderValue() {
    return authHeaderValue;
  }

  public void setAuthHeaderValue(@javax.annotation.Nullable SecretValue authHeaderValue) {
    this.authHeaderValue = authHeaderValue;
  }

  public UiDataSourceHttpData headers(@javax.annotation.Nullable Map<String, String> headers) {
    this.headers = headers;
    return this;
  }

  public UiDataSourceHttpData putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

  /**
   * HTTP Request Headers. HTTP Header Parameterization is not available.
   * @return headers
   */
  @javax.annotation.Nullable
  @ApiModelProperty("HTTP Request Headers. HTTP Header Parameterization is not available.")
  public Map<String, String> getHeaders() {
    return headers;
  }

  public void setHeaders(@javax.annotation.Nullable Map<String, String> headers) {
    this.headers = headers;
  }

  public UiDataSourceHttpData enableMethodParameterization(@javax.annotation.Nullable Boolean enableMethodParameterization) {
    this.enableMethodParameterization = enableMethodParameterization;
    return this;
  }

  /**
   * Enable Method Parameterization. This forces consumers to provide a method, otherwise the transfer will fail.
   * @return enableMethodParameterization
   */
  @javax.annotation.Nullable
  @ApiModelProperty("Enable Method Parameterization. This forces consumers to provide a method, otherwise the transfer will fail.")
  public Boolean getEnableMethodParameterization() {
    return enableMethodParameterization;
  }

  public void setEnableMethodParameterization(@javax.annotation.Nullable Boolean enableMethodParameterization) {
    this.enableMethodParameterization = enableMethodParameterization;
  }

  public UiDataSourceHttpData enablePathParameterization(@javax.annotation.Nullable Boolean enablePathParameterization) {
    this.enablePathParameterization = enablePathParameterization;
    return this;
  }

  /**
   * Enable Path Parameterization.
   * @return enablePathParameterization
   */
  @javax.annotation.Nullable
  @ApiModelProperty("Enable Path Parameterization.")
  public Boolean getEnablePathParameterization() {
    return enablePathParameterization;
  }

  public void setEnablePathParameterization(@javax.annotation.Nullable Boolean enablePathParameterization) {
    this.enablePathParameterization = enablePathParameterization;
  }

  public UiDataSourceHttpData enableQueryParameterization(@javax.annotation.Nullable Boolean enableQueryParameterization) {
    this.enableQueryParameterization = enableQueryParameterization;
    return this;
  }

  /**
   * Enable Query Parameterization. Any additionally provided queryString will be merged with the existing one.
   * @return enableQueryParameterization
   */
  @javax.annotation.Nullable
  @ApiModelProperty("Enable Query Parameterization. Any additionally provided queryString will be merged with the existing one.")
  public Boolean getEnableQueryParameterization() {
    return enableQueryParameterization;
  }

  public void setEnableQueryParameterization(@javax.annotation.Nullable Boolean enableQueryParameterization) {
    this.enableQueryParameterization = enableQueryParameterization;
  }

  public UiDataSourceHttpData enableBodyParameterization(@javax.annotation.Nullable Boolean enableBodyParameterization) {
    this.enableBodyParameterization = enableBodyParameterization;
    return this;
  }

  /**
   * Enable Body Parameterization. Forces the provider to provide both a request body and a content type. Only Methods POST, PUT and PATCH allow request bodies.
   * @return enableBodyParameterization
   */
  @javax.annotation.Nullable
  @ApiModelProperty("Enable Body Parameterization. Forces the provider to provide both a request body and a content type. Only Methods POST, PUT and PATCH allow request bodies.")
  public Boolean getEnableBodyParameterization() {
    return enableBodyParameterization;
  }

  public void setEnableBodyParameterization(@javax.annotation.Nullable Boolean enableBodyParameterization) {
    this.enableBodyParameterization = enableBodyParameterization;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UiDataSourceHttpData {\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    baseUrl: ").append(toIndentedString(baseUrl)).append("\n");
    sb.append("    queryString: ").append(toIndentedString(queryString)).append("\n");
    sb.append("    authHeaderName: ").append(toIndentedString(authHeaderName)).append("\n");
    sb.append("    authHeaderValue: ").append(toIndentedString(authHeaderValue)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    enableMethodParameterization: ").append(toIndentedString(enableMethodParameterization)).append("\n");
    sb.append("    enablePathParameterization: ").append(toIndentedString(enablePathParameterization)).append("\n");
    sb.append("    enableQueryParameterization: ").append(toIndentedString(enableQueryParameterization)).append("\n");
    sb.append("    enableBodyParameterization: ").append(toIndentedString(enableBodyParameterization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("method");
    openapiFields.add("baseUrl");
    openapiFields.add("queryString");
    openapiFields.add("authHeaderName");
    openapiFields.add("authHeaderValue");
    openapiFields.add("headers");
    openapiFields.add("enableMethodParameterization");
    openapiFields.add("enablePathParameterization");
    openapiFields.add("enableQueryParameterization");
    openapiFields.add("enableBodyParameterization");
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("baseUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UiDataSourceHttpData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!UiDataSourceHttpData.openapiRequiredFields.isEmpty()) {
        // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in UiDataSourceHttpData is not found in the empty JSON string", UiDataSourceHttpData.openapiRequiredFields.toString()));
      }
    }
    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!UiDataSourceHttpData.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UiDataSourceHttpData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : UiDataSourceHttpData.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // validate the optional field `method`
    if (jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) {
      UiDataSourceHttpDataMethod.validateJsonElement(jsonObj.get("method"));
    }
    if (!jsonObj.get("baseUrl").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `baseUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseUrl").toString()));
    }
    if ((jsonObj.get("queryString") != null && !jsonObj.get("queryString").isJsonNull()) && !jsonObj.get("queryString").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `queryString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryString").toString()));
    }
    if ((jsonObj.get("authHeaderName") != null && !jsonObj.get("authHeaderName").isJsonNull()) && !jsonObj.get("authHeaderName").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `authHeaderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authHeaderName").toString()));
    }
    // validate the optional field `authHeaderValue`
    if (jsonObj.get("authHeaderValue") != null && !jsonObj.get("authHeaderValue").isJsonNull()) {
      SecretValue.validateJsonElement(jsonObj.get("authHeaderValue"));
    }
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!UiDataSourceHttpData.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'UiDataSourceHttpData' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<UiDataSourceHttpData> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(UiDataSourceHttpData.class));
      return (TypeAdapter<T>) new TypeAdapter<UiDataSourceHttpData>() {
        @Override
        public void write(JsonWriter out, UiDataSourceHttpData value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        @Override
        public UiDataSourceHttpData read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of UiDataSourceHttpData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UiDataSourceHttpData
   * @throws IOException if the JSON string is invalid with respect to UiDataSourceHttpData
   */
  public static UiDataSourceHttpData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UiDataSourceHttpData.class);
  }

  /**
   * Convert an instance of UiDataSourceHttpData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  private static Map<String, String> $default$headers() {
    return new HashMap<>();
  }

  private static Boolean $default$enableMethodParameterization() {
    return false;
  }

  private static Boolean $default$enablePathParameterization() {
    return false;
  }

  private static Boolean $default$enableQueryParameterization() {
    return false;
  }

  private static Boolean $default$enableBodyParameterization() {
    return false;
  }


  public static class UiDataSourceHttpDataBuilder {
    private UiDataSourceHttpDataMethod method;
    private String baseUrl;
    private String queryString;
    private String authHeaderName;
    private SecretValue authHeaderValue;
    private boolean headers$set;
    private Map<String, String> headers$value;
    private boolean enableMethodParameterization$set;
    private Boolean enableMethodParameterization$value;
    private boolean enablePathParameterization$set;
    private Boolean enablePathParameterization$value;
    private boolean enableQueryParameterization$set;
    private Boolean enableQueryParameterization$value;
    private boolean enableBodyParameterization$set;
    private Boolean enableBodyParameterization$value;

    UiDataSourceHttpDataBuilder() {
    }

    /**
     * @return {@code this}.
     */
    public UiDataSourceHttpData.UiDataSourceHttpDataBuilder method(@javax.annotation.Nullable final UiDataSourceHttpDataMethod method) {
      this.method = method;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public UiDataSourceHttpData.UiDataSourceHttpDataBuilder baseUrl(@javax.annotation.Nonnull final String baseUrl) {
      if (baseUrl == null) {
        throw new NullPointerException("baseUrl is marked non-null but is null");
      }
      this.baseUrl = baseUrl;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public UiDataSourceHttpData.UiDataSourceHttpDataBuilder queryString(@javax.annotation.Nullable final String queryString) {
      this.queryString = queryString;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public UiDataSourceHttpData.UiDataSourceHttpDataBuilder authHeaderName(@javax.annotation.Nullable final String authHeaderName) {
      this.authHeaderName = authHeaderName;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public UiDataSourceHttpData.UiDataSourceHttpDataBuilder authHeaderValue(@javax.annotation.Nullable final SecretValue authHeaderValue) {
      this.authHeaderValue = authHeaderValue;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public UiDataSourceHttpData.UiDataSourceHttpDataBuilder headers(@javax.annotation.Nullable final Map<String, String> headers) {
      this.headers$value = headers;
      headers$set = true;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public UiDataSourceHttpData.UiDataSourceHttpDataBuilder enableMethodParameterization(@javax.annotation.Nullable final Boolean enableMethodParameterization) {
      this.enableMethodParameterization$value = enableMethodParameterization;
      enableMethodParameterization$set = true;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public UiDataSourceHttpData.UiDataSourceHttpDataBuilder enablePathParameterization(@javax.annotation.Nullable final Boolean enablePathParameterization) {
      this.enablePathParameterization$value = enablePathParameterization;
      enablePathParameterization$set = true;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public UiDataSourceHttpData.UiDataSourceHttpDataBuilder enableQueryParameterization(@javax.annotation.Nullable final Boolean enableQueryParameterization) {
      this.enableQueryParameterization$value = enableQueryParameterization;
      enableQueryParameterization$set = true;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public UiDataSourceHttpData.UiDataSourceHttpDataBuilder enableBodyParameterization(@javax.annotation.Nullable final Boolean enableBodyParameterization) {
      this.enableBodyParameterization$value = enableBodyParameterization;
      enableBodyParameterization$set = true;
      return this;
    }

    public UiDataSourceHttpData build() {
      Map<String, String> headers$value = this.headers$value;
      if (!this.headers$set) headers$value = UiDataSourceHttpData.$default$headers();
      Boolean enableMethodParameterization$value = this.enableMethodParameterization$value;
      if (!this.enableMethodParameterization$set) enableMethodParameterization$value = UiDataSourceHttpData.$default$enableMethodParameterization();
      Boolean enablePathParameterization$value = this.enablePathParameterization$value;
      if (!this.enablePathParameterization$set) enablePathParameterization$value = UiDataSourceHttpData.$default$enablePathParameterization();
      Boolean enableQueryParameterization$value = this.enableQueryParameterization$value;
      if (!this.enableQueryParameterization$set) enableQueryParameterization$value = UiDataSourceHttpData.$default$enableQueryParameterization();
      Boolean enableBodyParameterization$value = this.enableBodyParameterization$value;
      if (!this.enableBodyParameterization$set) enableBodyParameterization$value = UiDataSourceHttpData.$default$enableBodyParameterization();
      return new UiDataSourceHttpData(this.method, this.baseUrl, this.queryString, this.authHeaderName, this.authHeaderValue, headers$value, enableMethodParameterization$value, enablePathParameterization$value, enableQueryParameterization$value, enableBodyParameterization$value);
    }

    @Override
    public String toString() {
      return "UiDataSourceHttpData.UiDataSourceHttpDataBuilder(method=" + this.method + ", baseUrl=" + this.baseUrl + ", queryString=" + this.queryString + ", authHeaderName=" + this.authHeaderName + ", authHeaderValue=" + this.authHeaderValue + ", headers$value=" + this.headers$value + ", enableMethodParameterization$value=" + this.enableMethodParameterization$value + ", enablePathParameterization$value=" + this.enablePathParameterization$value + ", enableQueryParameterization$value=" + this.enableQueryParameterization$value + ", enableBodyParameterization$value=" + this.enableBodyParameterization$value + ")";
    }
  }

  public static UiDataSourceHttpData.UiDataSourceHttpDataBuilder builder() {
    return new UiDataSourceHttpData.UiDataSourceHttpDataBuilder();
  }

  public UiDataSourceHttpData(@javax.annotation.Nullable final UiDataSourceHttpDataMethod method, @javax.annotation.Nonnull final String baseUrl, @javax.annotation.Nullable final String queryString, @javax.annotation.Nullable final String authHeaderName, @javax.annotation.Nullable final SecretValue authHeaderValue, @javax.annotation.Nullable final Map<String, String> headers, @javax.annotation.Nullable final Boolean enableMethodParameterization, @javax.annotation.Nullable final Boolean enablePathParameterization, @javax.annotation.Nullable final Boolean enableQueryParameterization, @javax.annotation.Nullable final Boolean enableBodyParameterization) {
    if (baseUrl == null) {
      throw new NullPointerException("baseUrl is marked non-null but is null");
    }
    this.method = method;
    this.baseUrl = baseUrl;
    this.queryString = queryString;
    this.authHeaderName = authHeaderName;
    this.authHeaderValue = authHeaderValue;
    this.headers = headers;
    this.enableMethodParameterization = enableMethodParameterization;
    this.enablePathParameterization = enablePathParameterization;
    this.enableQueryParameterization = enableQueryParameterization;
    this.enableBodyParameterization = enableBodyParameterization;
  }
}
