/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.UiPolicyConstraint;
import de.sovity.edc.client.gen.model.UiPolicyExpressionType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import de.sovity.edc.client.gen.JSON;

/**
 * ODRL constraint as supported by the sovity product landscape
 */
@ApiModel(description = "ODRL constraint as supported by the sovity product landscape")
@lombok.AllArgsConstructor
@lombok.Builder
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UiPolicyExpression {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private UiPolicyExpressionType type;

  public static final String SERIALIZED_NAME_EXPRESSIONS = "expressions";
  @SerializedName(SERIALIZED_NAME_EXPRESSIONS)
  @javax.annotation.Nullable
    @lombok.Builder.Default
  private List<UiPolicyExpression> expressions  =  new ArrayList<>();

  public static final String SERIALIZED_NAME_CONSTRAINT = "constraint";
  @SerializedName(SERIALIZED_NAME_CONSTRAINT)
  @javax.annotation.Nullable
  private UiPolicyConstraint constraint;

  public UiPolicyExpression() {
  }

  public UiPolicyExpression type(@javax.annotation.Nonnull UiPolicyExpressionType type) {
    this.type = type;
    return this;
  }

  /**
   * Expression type
   * @return type
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Expression type")
  public UiPolicyExpressionType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull UiPolicyExpressionType type) {
    this.type = type;
  }


  public UiPolicyExpression expressions(@javax.annotation.Nullable List<UiPolicyExpression> expressions) {
    this.expressions = expressions;
    return this;
  }

  public UiPolicyExpression addExpressionsItem(UiPolicyExpression expressionsItem) {
    if (this.expressions == null) {
      this.expressions = new ArrayList<>();
    }
    this.expressions.add(expressionsItem);
    return this;
  }

  /**
   * Only for types AND, OR, XONE. List of sub-expressions to be evaluated according to the expressionType.
   * @return expressions
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only for types AND, OR, XONE. List of sub-expressions to be evaluated according to the expressionType.")
  public List<UiPolicyExpression> getExpressions() {
    return expressions;
  }

  public void setExpressions(@javax.annotation.Nullable List<UiPolicyExpression> expressions) {
    this.expressions = expressions;
  }


  public UiPolicyExpression constraint(@javax.annotation.Nullable UiPolicyConstraint constraint) {
    this.constraint = constraint;
    return this;
  }

  /**
   * Only for type CONSTRAINT. A single constraint.
   * @return constraint
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only for type CONSTRAINT. A single constraint.")
  public UiPolicyConstraint getConstraint() {
    return constraint;
  }

  public void setConstraint(@javax.annotation.Nullable UiPolicyConstraint constraint) {
    this.constraint = constraint;
  }



  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UiPolicyExpression {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    expressions: ").append(toIndentedString(expressions)).append("\n");
    sb.append("    constraint: ").append(toIndentedString(constraint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("expressions");
    openapiFields.add("constraint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UiPolicyExpression
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UiPolicyExpression.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UiPolicyExpression is not found in the empty JSON string", UiPolicyExpression.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UiPolicyExpression.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UiPolicyExpression` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UiPolicyExpression.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `type`
      UiPolicyExpressionType.validateJsonElement(jsonObj.get("type"));
      if (jsonObj.get("expressions") != null && !jsonObj.get("expressions").isJsonNull()) {
        JsonArray jsonArrayexpressions = jsonObj.getAsJsonArray("expressions");
        if (jsonArrayexpressions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("expressions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `expressions` to be an array in the JSON string but got `%s`", jsonObj.get("expressions").toString()));
          }

          // validate the optional field `expressions` (array)
          for (int i = 0; i < jsonArrayexpressions.size(); i++) {
            UiPolicyExpression.validateJsonElement(jsonArrayexpressions.get(i));
          };
        }
      }
      // validate the optional field `constraint`
      if (jsonObj.get("constraint") != null && !jsonObj.get("constraint").isJsonNull()) {
        UiPolicyConstraint.validateJsonElement(jsonObj.get("constraint"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UiPolicyExpression.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UiPolicyExpression' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UiPolicyExpression> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UiPolicyExpression.class));

       return (TypeAdapter<T>) new TypeAdapter<UiPolicyExpression>() {
           @Override
           public void write(JsonWriter out, UiPolicyExpression value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UiPolicyExpression read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UiPolicyExpression given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UiPolicyExpression
   * @throws IOException if the JSON string is invalid with respect to UiPolicyExpression
   */
  public static UiPolicyExpression fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UiPolicyExpression.class);
  }

  /**
   * Convert an instance of UiPolicyExpression to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

