/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import de.sovity.edc.client.gen.JSON;

/**
 * Data for initiating a Contract Negotiation
 */
@ApiModel(description = "Data for initiating a Contract Negotiation")
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ContractNegotiationRequest {
  public static final String SERIALIZED_NAME_COUNTER_PARTY_ID = "counterPartyId";
  @SerializedName(SERIALIZED_NAME_COUNTER_PARTY_ID)
  @javax.annotation.Nonnull
  private String counterPartyId;
  public static final String SERIALIZED_NAME_COUNTER_PARTY_ADDRESS = "counterPartyAddress";
  @SerializedName(SERIALIZED_NAME_COUNTER_PARTY_ADDRESS)
  @javax.annotation.Nonnull
  private String counterPartyAddress;
  public static final String SERIALIZED_NAME_CONTRACT_OFFER_ID = "contractOfferId";
  @SerializedName(SERIALIZED_NAME_CONTRACT_OFFER_ID)
  @javax.annotation.Nonnull
  private String contractOfferId;
  public static final String SERIALIZED_NAME_POLICY_JSON_LD = "policyJsonLd";
  @SerializedName(SERIALIZED_NAME_POLICY_JSON_LD)
  @javax.annotation.Nonnull
  private String policyJsonLd;
  public static final String SERIALIZED_NAME_ASSET_ID = "assetId";
  @SerializedName(SERIALIZED_NAME_ASSET_ID)
  @javax.annotation.Nonnull
  private String assetId;

  public ContractNegotiationRequest() {
  }

  public ContractNegotiationRequest counterPartyId(@javax.annotation.Nonnull String counterPartyId) {
    this.counterPartyId = counterPartyId;
    return this;
  }

  /**
   * Counter Party Id
   * @return counterPartyId
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Counter Party Id")
  public String getCounterPartyId() {
    return counterPartyId;
  }

  public void setCounterPartyId(@javax.annotation.Nonnull String counterPartyId) {
    this.counterPartyId = counterPartyId;
  }

  public ContractNegotiationRequest counterPartyAddress(@javax.annotation.Nonnull String counterPartyAddress) {
    this.counterPartyAddress = counterPartyAddress;
    return this;
  }

  /**
   * Counter Party Address
   * @return counterPartyAddress
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Counter Party Address")
  public String getCounterPartyAddress() {
    return counterPartyAddress;
  }

  public void setCounterPartyAddress(@javax.annotation.Nonnull String counterPartyAddress) {
    this.counterPartyAddress = counterPartyAddress;
  }

  public ContractNegotiationRequest contractOfferId(@javax.annotation.Nonnull String contractOfferId) {
    this.contractOfferId = contractOfferId;
    return this;
  }

  /**
   * Contract Offer Dto 
   * @return contractOfferId
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Contract Offer Dto ")
  public String getContractOfferId() {
    return contractOfferId;
  }

  public void setContractOfferId(@javax.annotation.Nonnull String contractOfferId) {
    this.contractOfferId = contractOfferId;
  }

  public ContractNegotiationRequest policyJsonLd(@javax.annotation.Nonnull String policyJsonLd) {
    this.policyJsonLd = policyJsonLd;
    return this;
  }

  /**
   * Policy JsonLd
   * @return policyJsonLd
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Policy JsonLd")
  public String getPolicyJsonLd() {
    return policyJsonLd;
  }

  public void setPolicyJsonLd(@javax.annotation.Nonnull String policyJsonLd) {
    this.policyJsonLd = policyJsonLd;
  }

  public ContractNegotiationRequest assetId(@javax.annotation.Nonnull String assetId) {
    this.assetId = assetId;
    return this;
  }

  /**
   * Asset ID
   * @return assetId
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Asset ID")
  public String getAssetId() {
    return assetId;
  }

  public void setAssetId(@javax.annotation.Nonnull String assetId) {
    this.assetId = assetId;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractNegotiationRequest {\n");
    sb.append("    counterPartyId: ").append(toIndentedString(counterPartyId)).append("\n");
    sb.append("    counterPartyAddress: ").append(toIndentedString(counterPartyAddress)).append("\n");
    sb.append("    contractOfferId: ").append(toIndentedString(contractOfferId)).append("\n");
    sb.append("    policyJsonLd: ").append(toIndentedString(policyJsonLd)).append("\n");
    sb.append("    assetId: ").append(toIndentedString(assetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("counterPartyId");
    openapiFields.add("counterPartyAddress");
    openapiFields.add("contractOfferId");
    openapiFields.add("policyJsonLd");
    openapiFields.add("assetId");
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("counterPartyId");
    openapiRequiredFields.add("counterPartyAddress");
    openapiRequiredFields.add("contractOfferId");
    openapiRequiredFields.add("policyJsonLd");
    openapiRequiredFields.add("assetId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContractNegotiationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!ContractNegotiationRequest.openapiRequiredFields.isEmpty()) {
        // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in ContractNegotiationRequest is not found in the empty JSON string", ContractNegotiationRequest.openapiRequiredFields.toString()));
      }
    }
    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!ContractNegotiationRequest.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContractNegotiationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : ContractNegotiationRequest.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if (!jsonObj.get("counterPartyId").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `counterPartyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("counterPartyId").toString()));
    }
    if (!jsonObj.get("counterPartyAddress").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `counterPartyAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("counterPartyAddress").toString()));
    }
    if (!jsonObj.get("contractOfferId").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `contractOfferId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractOfferId").toString()));
    }
    if (!jsonObj.get("policyJsonLd").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `policyJsonLd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyJsonLd").toString()));
    }
    if (!jsonObj.get("assetId").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `assetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetId").toString()));
    }
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!ContractNegotiationRequest.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'ContractNegotiationRequest' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<ContractNegotiationRequest> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(ContractNegotiationRequest.class));
      return (TypeAdapter<T>) new TypeAdapter<ContractNegotiationRequest>() {
        @Override
        public void write(JsonWriter out, ContractNegotiationRequest value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        @Override
        public ContractNegotiationRequest read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of ContractNegotiationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContractNegotiationRequest
   * @throws IOException if the JSON string is invalid with respect to ContractNegotiationRequest
   */
  public static ContractNegotiationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractNegotiationRequest.class);
  }

  /**
   * Convert an instance of ContractNegotiationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }


  public static class ContractNegotiationRequestBuilder {
    private String counterPartyId;
    private String counterPartyAddress;
    private String contractOfferId;
    private String policyJsonLd;
    private String assetId;

    ContractNegotiationRequestBuilder() {
    }

    /**
     * @return {@code this}.
     */
    public ContractNegotiationRequest.ContractNegotiationRequestBuilder counterPartyId(@javax.annotation.Nonnull final String counterPartyId) {
      if (counterPartyId == null) {
        throw new NullPointerException("counterPartyId is marked non-null but is null");
      }
      this.counterPartyId = counterPartyId;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public ContractNegotiationRequest.ContractNegotiationRequestBuilder counterPartyAddress(@javax.annotation.Nonnull final String counterPartyAddress) {
      if (counterPartyAddress == null) {
        throw new NullPointerException("counterPartyAddress is marked non-null but is null");
      }
      this.counterPartyAddress = counterPartyAddress;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public ContractNegotiationRequest.ContractNegotiationRequestBuilder contractOfferId(@javax.annotation.Nonnull final String contractOfferId) {
      if (contractOfferId == null) {
        throw new NullPointerException("contractOfferId is marked non-null but is null");
      }
      this.contractOfferId = contractOfferId;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public ContractNegotiationRequest.ContractNegotiationRequestBuilder policyJsonLd(@javax.annotation.Nonnull final String policyJsonLd) {
      if (policyJsonLd == null) {
        throw new NullPointerException("policyJsonLd is marked non-null but is null");
      }
      this.policyJsonLd = policyJsonLd;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public ContractNegotiationRequest.ContractNegotiationRequestBuilder assetId(@javax.annotation.Nonnull final String assetId) {
      if (assetId == null) {
        throw new NullPointerException("assetId is marked non-null but is null");
      }
      this.assetId = assetId;
      return this;
    }

    public ContractNegotiationRequest build() {
      return new ContractNegotiationRequest(this.counterPartyId, this.counterPartyAddress, this.contractOfferId, this.policyJsonLd, this.assetId);
    }

    @Override
    public String toString() {
      return "ContractNegotiationRequest.ContractNegotiationRequestBuilder(counterPartyId=" + this.counterPartyId + ", counterPartyAddress=" + this.counterPartyAddress + ", contractOfferId=" + this.contractOfferId + ", policyJsonLd=" + this.policyJsonLd + ", assetId=" + this.assetId + ")";
    }
  }

  public static ContractNegotiationRequest.ContractNegotiationRequestBuilder builder() {
    return new ContractNegotiationRequest.ContractNegotiationRequestBuilder();
  }

  public ContractNegotiationRequest(@javax.annotation.Nonnull final String counterPartyId, @javax.annotation.Nonnull final String counterPartyAddress, @javax.annotation.Nonnull final String contractOfferId, @javax.annotation.Nonnull final String policyJsonLd, @javax.annotation.Nonnull final String assetId) {
    if (counterPartyId == null) {
      throw new NullPointerException("counterPartyId is marked non-null but is null");
    }
    if (counterPartyAddress == null) {
      throw new NullPointerException("counterPartyAddress is marked non-null but is null");
    }
    if (contractOfferId == null) {
      throw new NullPointerException("contractOfferId is marked non-null but is null");
    }
    if (policyJsonLd == null) {
      throw new NullPointerException("policyJsonLd is marked non-null but is null");
    }
    if (assetId == null) {
      throw new NullPointerException("assetId is marked non-null but is null");
    }
    this.counterPartyId = counterPartyId;
    this.counterPartyAddress = counterPartyAddress;
    this.contractOfferId = contractOfferId;
    this.policyJsonLd = policyJsonLd;
    this.assetId = assetId;
  }
}
