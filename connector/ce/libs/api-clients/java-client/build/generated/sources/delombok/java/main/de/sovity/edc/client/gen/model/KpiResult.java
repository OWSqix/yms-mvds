/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.TransferProcessStatesDto;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import de.sovity.edc.client.gen.JSON;

/**
 * EDC-status-defining KPIs
 */
@ApiModel(description = "EDC-status-defining KPIs")
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class KpiResult {
  public static final String SERIALIZED_NAME_ASSETS_COUNT = "assetsCount";
  @SerializedName(SERIALIZED_NAME_ASSETS_COUNT)
  @javax.annotation.Nonnull
  private Integer assetsCount;
  public static final String SERIALIZED_NAME_POLICIES_COUNT = "policiesCount";
  @SerializedName(SERIALIZED_NAME_POLICIES_COUNT)
  @javax.annotation.Nonnull
  private Integer policiesCount;
  public static final String SERIALIZED_NAME_CONTRACT_DEFINITIONS_COUNT = "contractDefinitionsCount";
  @SerializedName(SERIALIZED_NAME_CONTRACT_DEFINITIONS_COUNT)
  @javax.annotation.Nonnull
  private Integer contractDefinitionsCount;
  public static final String SERIALIZED_NAME_CONTRACT_AGREEMENTS_COUNT = "contractAgreementsCount";
  @SerializedName(SERIALIZED_NAME_CONTRACT_AGREEMENTS_COUNT)
  @javax.annotation.Nonnull
  private Integer contractAgreementsCount;
  public static final String SERIALIZED_NAME_TRANSFER_PROCESS_DTO = "transferProcessDto";
  @SerializedName(SERIALIZED_NAME_TRANSFER_PROCESS_DTO)
  @javax.annotation.Nonnull
  private TransferProcessStatesDto transferProcessDto;

  public KpiResult() {
  }

  public KpiResult assetsCount(@javax.annotation.Nonnull Integer assetsCount) {
    this.assetsCount = assetsCount;
    return this;
  }

  /**
   * Counts of assets
   * @return assetsCount
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Counts of assets")
  public Integer getAssetsCount() {
    return assetsCount;
  }

  public void setAssetsCount(@javax.annotation.Nonnull Integer assetsCount) {
    this.assetsCount = assetsCount;
  }

  public KpiResult policiesCount(@javax.annotation.Nonnull Integer policiesCount) {
    this.policiesCount = policiesCount;
    return this;
  }

  /**
   * Counts of policies
   * @return policiesCount
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Counts of policies")
  public Integer getPoliciesCount() {
    return policiesCount;
  }

  public void setPoliciesCount(@javax.annotation.Nonnull Integer policiesCount) {
    this.policiesCount = policiesCount;
  }

  public KpiResult contractDefinitionsCount(@javax.annotation.Nonnull Integer contractDefinitionsCount) {
    this.contractDefinitionsCount = contractDefinitionsCount;
    return this;
  }

  /**
   * Counts of contract definitions
   * @return contractDefinitionsCount
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Counts of contract definitions")
  public Integer getContractDefinitionsCount() {
    return contractDefinitionsCount;
  }

  public void setContractDefinitionsCount(@javax.annotation.Nonnull Integer contractDefinitionsCount) {
    this.contractDefinitionsCount = contractDefinitionsCount;
  }

  public KpiResult contractAgreementsCount(@javax.annotation.Nonnull Integer contractAgreementsCount) {
    this.contractAgreementsCount = contractAgreementsCount;
    return this;
  }

  /**
   * Counts of contract agreements
   * @return contractAgreementsCount
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Counts of contract agreements")
  public Integer getContractAgreementsCount() {
    return contractAgreementsCount;
  }

  public void setContractAgreementsCount(@javax.annotation.Nonnull Integer contractAgreementsCount) {
    this.contractAgreementsCount = contractAgreementsCount;
  }

  public KpiResult transferProcessDto(@javax.annotation.Nonnull TransferProcessStatesDto transferProcessDto) {
    this.transferProcessDto = transferProcessDto;
    return this;
  }

  /**
   * Counts of incoming and outgoing TransferProcesses and status
   * @return transferProcessDto
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Counts of incoming and outgoing TransferProcesses and status")
  public TransferProcessStatesDto getTransferProcessDto() {
    return transferProcessDto;
  }

  public void setTransferProcessDto(@javax.annotation.Nonnull TransferProcessStatesDto transferProcessDto) {
    this.transferProcessDto = transferProcessDto;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KpiResult {\n");
    sb.append("    assetsCount: ").append(toIndentedString(assetsCount)).append("\n");
    sb.append("    policiesCount: ").append(toIndentedString(policiesCount)).append("\n");
    sb.append("    contractDefinitionsCount: ").append(toIndentedString(contractDefinitionsCount)).append("\n");
    sb.append("    contractAgreementsCount: ").append(toIndentedString(contractAgreementsCount)).append("\n");
    sb.append("    transferProcessDto: ").append(toIndentedString(transferProcessDto)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assetsCount");
    openapiFields.add("policiesCount");
    openapiFields.add("contractDefinitionsCount");
    openapiFields.add("contractAgreementsCount");
    openapiFields.add("transferProcessDto");
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("assetsCount");
    openapiRequiredFields.add("policiesCount");
    openapiRequiredFields.add("contractDefinitionsCount");
    openapiRequiredFields.add("contractAgreementsCount");
    openapiRequiredFields.add("transferProcessDto");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KpiResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!KpiResult.openapiRequiredFields.isEmpty()) {
        // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in KpiResult is not found in the empty JSON string", KpiResult.openapiRequiredFields.toString()));
      }
    }
    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!KpiResult.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KpiResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : KpiResult.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // validate the required field `transferProcessDto`
    TransferProcessStatesDto.validateJsonElement(jsonObj.get("transferProcessDto"));
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!KpiResult.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'KpiResult' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<KpiResult> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(KpiResult.class));
      return (TypeAdapter<T>) new TypeAdapter<KpiResult>() {
        @Override
        public void write(JsonWriter out, KpiResult value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        @Override
        public KpiResult read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of KpiResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KpiResult
   * @throws IOException if the JSON string is invalid with respect to KpiResult
   */
  public static KpiResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KpiResult.class);
  }

  /**
   * Convert an instance of KpiResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }


  public static class KpiResultBuilder {
    private Integer assetsCount;
    private Integer policiesCount;
    private Integer contractDefinitionsCount;
    private Integer contractAgreementsCount;
    private TransferProcessStatesDto transferProcessDto;

    KpiResultBuilder() {
    }

    /**
     * @return {@code this}.
     */
    public KpiResult.KpiResultBuilder assetsCount(@javax.annotation.Nonnull final Integer assetsCount) {
      if (assetsCount == null) {
        throw new NullPointerException("assetsCount is marked non-null but is null");
      }
      this.assetsCount = assetsCount;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public KpiResult.KpiResultBuilder policiesCount(@javax.annotation.Nonnull final Integer policiesCount) {
      if (policiesCount == null) {
        throw new NullPointerException("policiesCount is marked non-null but is null");
      }
      this.policiesCount = policiesCount;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public KpiResult.KpiResultBuilder contractDefinitionsCount(@javax.annotation.Nonnull final Integer contractDefinitionsCount) {
      if (contractDefinitionsCount == null) {
        throw new NullPointerException("contractDefinitionsCount is marked non-null but is null");
      }
      this.contractDefinitionsCount = contractDefinitionsCount;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public KpiResult.KpiResultBuilder contractAgreementsCount(@javax.annotation.Nonnull final Integer contractAgreementsCount) {
      if (contractAgreementsCount == null) {
        throw new NullPointerException("contractAgreementsCount is marked non-null but is null");
      }
      this.contractAgreementsCount = contractAgreementsCount;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public KpiResult.KpiResultBuilder transferProcessDto(@javax.annotation.Nonnull final TransferProcessStatesDto transferProcessDto) {
      if (transferProcessDto == null) {
        throw new NullPointerException("transferProcessDto is marked non-null but is null");
      }
      this.transferProcessDto = transferProcessDto;
      return this;
    }

    public KpiResult build() {
      return new KpiResult(this.assetsCount, this.policiesCount, this.contractDefinitionsCount, this.contractAgreementsCount, this.transferProcessDto);
    }

    @Override
    public String toString() {
      return "KpiResult.KpiResultBuilder(assetsCount=" + this.assetsCount + ", policiesCount=" + this.policiesCount + ", contractDefinitionsCount=" + this.contractDefinitionsCount + ", contractAgreementsCount=" + this.contractAgreementsCount + ", transferProcessDto=" + this.transferProcessDto + ")";
    }
  }

  public static KpiResult.KpiResultBuilder builder() {
    return new KpiResult.KpiResultBuilder();
  }

  public KpiResult(@javax.annotation.Nonnull final Integer assetsCount, @javax.annotation.Nonnull final Integer policiesCount, @javax.annotation.Nonnull final Integer contractDefinitionsCount, @javax.annotation.Nonnull final Integer contractAgreementsCount, @javax.annotation.Nonnull final TransferProcessStatesDto transferProcessDto) {
    if (assetsCount == null) {
      throw new NullPointerException("assetsCount is marked non-null but is null");
    }
    if (policiesCount == null) {
      throw new NullPointerException("policiesCount is marked non-null but is null");
    }
    if (contractDefinitionsCount == null) {
      throw new NullPointerException("contractDefinitionsCount is marked non-null but is null");
    }
    if (contractAgreementsCount == null) {
      throw new NullPointerException("contractAgreementsCount is marked non-null but is null");
    }
    if (transferProcessDto == null) {
      throw new NullPointerException("transferProcessDto is marked non-null but is null");
    }
    this.assetsCount = assetsCount;
    this.policiesCount = policiesCount;
    this.contractDefinitionsCount = contractDefinitionsCount;
    this.contractAgreementsCount = contractAgreementsCount;
    this.transferProcessDto = transferProcessDto;
  }
}
