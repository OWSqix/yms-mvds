/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.DashboardCxDidConfig;
import de.sovity.edc.client.gen.model.DashboardDapsConfig;
import de.sovity.edc.client.gen.model.DashboardTransferAmounts;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import de.sovity.edc.client.gen.JSON;

/**
 * Data as required by the UI&#39;s Dashboard Page
 */
@ApiModel(description = "Data as required by the UI\'s Dashboard Page")
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class DashboardPage {
  public static final String SERIALIZED_NAME_NUM_ASSETS = "numAssets";
  @SerializedName(SERIALIZED_NAME_NUM_ASSETS)
  @javax.annotation.Nonnull
  private Integer numAssets;
  public static final String SERIALIZED_NAME_NUM_POLICIES = "numPolicies";
  @SerializedName(SERIALIZED_NAME_NUM_POLICIES)
  @javax.annotation.Nonnull
  private Integer numPolicies;
  public static final String SERIALIZED_NAME_NUM_CONTRACT_DEFINITIONS = "numContractDefinitions";
  @SerializedName(SERIALIZED_NAME_NUM_CONTRACT_DEFINITIONS)
  @javax.annotation.Nonnull
  private Integer numContractDefinitions;
  public static final String SERIALIZED_NAME_NUM_CONTRACT_AGREEMENTS_CONSUMING = "numContractAgreementsConsuming";
  @SerializedName(SERIALIZED_NAME_NUM_CONTRACT_AGREEMENTS_CONSUMING)
  @javax.annotation.Nonnull
  private Long numContractAgreementsConsuming;
  public static final String SERIALIZED_NAME_NUM_CONTRACT_AGREEMENTS_PROVIDING = "numContractAgreementsProviding";
  @SerializedName(SERIALIZED_NAME_NUM_CONTRACT_AGREEMENTS_PROVIDING)
  @javax.annotation.Nonnull
  private Long numContractAgreementsProviding;
  public static final String SERIALIZED_NAME_TRANSFER_PROCESSES_CONSUMING = "transferProcessesConsuming";
  @SerializedName(SERIALIZED_NAME_TRANSFER_PROCESSES_CONSUMING)
  @javax.annotation.Nonnull
  private DashboardTransferAmounts transferProcessesConsuming;
  public static final String SERIALIZED_NAME_TRANSFER_PROCESSES_PROVIDING = "transferProcessesProviding";
  @SerializedName(SERIALIZED_NAME_TRANSFER_PROCESSES_PROVIDING)
  @javax.annotation.Nonnull
  private DashboardTransferAmounts transferProcessesProviding;
  public static final String SERIALIZED_NAME_CONNECTOR_ENDPOINT = "connectorEndpoint";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_ENDPOINT)
  @javax.annotation.Nonnull
  private String connectorEndpoint;
  public static final String SERIALIZED_NAME_CONNECTOR_PARTICIPANT_ID = "connectorParticipantId";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_PARTICIPANT_ID)
  @javax.annotation.Nonnull
  private String connectorParticipantId;
  public static final String SERIALIZED_NAME_CONNECTOR_TITLE = "connectorTitle";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_TITLE)
  @javax.annotation.Nonnull
  private String connectorTitle;
  public static final String SERIALIZED_NAME_CONNECTOR_DESCRIPTION = "connectorDescription";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_DESCRIPTION)
  @javax.annotation.Nonnull
  private String connectorDescription;
  public static final String SERIALIZED_NAME_CONNECTOR_CURATOR_URL = "connectorCuratorUrl";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_CURATOR_URL)
  @javax.annotation.Nonnull
  private String connectorCuratorUrl;
  public static final String SERIALIZED_NAME_CONNECTOR_CURATOR_NAME = "connectorCuratorName";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_CURATOR_NAME)
  @javax.annotation.Nonnull
  private String connectorCuratorName;
  public static final String SERIALIZED_NAME_CONNECTOR_MAINTAINER_URL = "connectorMaintainerUrl";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_MAINTAINER_URL)
  @javax.annotation.Nonnull
  private String connectorMaintainerUrl;
  public static final String SERIALIZED_NAME_CONNECTOR_MAINTAINER_NAME = "connectorMaintainerName";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_MAINTAINER_NAME)
  @javax.annotation.Nonnull
  private String connectorMaintainerName;
  public static final String SERIALIZED_NAME_CONNECTOR_DAPS_CONFIG = "connectorDapsConfig";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_DAPS_CONFIG)
  @javax.annotation.Nullable
  private DashboardDapsConfig connectorDapsConfig;
  public static final String SERIALIZED_NAME_CONNECTOR_CX_DID_CONFIG = "connectorCxDidConfig";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_CX_DID_CONFIG)
  @javax.annotation.Nullable
  private DashboardCxDidConfig connectorCxDidConfig;

  public DashboardPage() {
  }

  public DashboardPage numAssets(@javax.annotation.Nonnull Integer numAssets) {
    this.numAssets = numAssets;
    return this;
  }

  /**
   * Number of Assets
   * @return numAssets
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Number of Assets")
  public Integer getNumAssets() {
    return numAssets;
  }

  public void setNumAssets(@javax.annotation.Nonnull Integer numAssets) {
    this.numAssets = numAssets;
  }

  public DashboardPage numPolicies(@javax.annotation.Nonnull Integer numPolicies) {
    this.numPolicies = numPolicies;
    return this;
  }

  /**
   * Number of Policies
   * @return numPolicies
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Number of Policies")
  public Integer getNumPolicies() {
    return numPolicies;
  }

  public void setNumPolicies(@javax.annotation.Nonnull Integer numPolicies) {
    this.numPolicies = numPolicies;
  }

  public DashboardPage numContractDefinitions(@javax.annotation.Nonnull Integer numContractDefinitions) {
    this.numContractDefinitions = numContractDefinitions;
    return this;
  }

  /**
   * Number of Contract Definitions
   * @return numContractDefinitions
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Number of Contract Definitions")
  public Integer getNumContractDefinitions() {
    return numContractDefinitions;
  }

  public void setNumContractDefinitions(@javax.annotation.Nonnull Integer numContractDefinitions) {
    this.numContractDefinitions = numContractDefinitions;
  }

  public DashboardPage numContractAgreementsConsuming(@javax.annotation.Nonnull Long numContractAgreementsConsuming) {
    this.numContractAgreementsConsuming = numContractAgreementsConsuming;
    return this;
  }

  /**
   * Number of consuming Contract Agreements
   * @return numContractAgreementsConsuming
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Number of consuming Contract Agreements")
  public Long getNumContractAgreementsConsuming() {
    return numContractAgreementsConsuming;
  }

  public void setNumContractAgreementsConsuming(@javax.annotation.Nonnull Long numContractAgreementsConsuming) {
    this.numContractAgreementsConsuming = numContractAgreementsConsuming;
  }

  public DashboardPage numContractAgreementsProviding(@javax.annotation.Nonnull Long numContractAgreementsProviding) {
    this.numContractAgreementsProviding = numContractAgreementsProviding;
    return this;
  }

  /**
   * Number of providing Contract Agreements
   * @return numContractAgreementsProviding
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Number of providing Contract Agreements")
  public Long getNumContractAgreementsProviding() {
    return numContractAgreementsProviding;
  }

  public void setNumContractAgreementsProviding(@javax.annotation.Nonnull Long numContractAgreementsProviding) {
    this.numContractAgreementsProviding = numContractAgreementsProviding;
  }

  public DashboardPage transferProcessesConsuming(@javax.annotation.Nonnull DashboardTransferAmounts transferProcessesConsuming) {
    this.transferProcessesConsuming = transferProcessesConsuming;
    return this;
  }

  /**
   * Consuming Transfer Process Amounts
   * @return transferProcessesConsuming
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Consuming Transfer Process Amounts")
  public DashboardTransferAmounts getTransferProcessesConsuming() {
    return transferProcessesConsuming;
  }

  public void setTransferProcessesConsuming(@javax.annotation.Nonnull DashboardTransferAmounts transferProcessesConsuming) {
    this.transferProcessesConsuming = transferProcessesConsuming;
  }

  public DashboardPage transferProcessesProviding(@javax.annotation.Nonnull DashboardTransferAmounts transferProcessesProviding) {
    this.transferProcessesProviding = transferProcessesProviding;
    return this;
  }

  /**
   * Providing Transfer Process Amounts
   * @return transferProcessesProviding
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Providing Transfer Process Amounts")
  public DashboardTransferAmounts getTransferProcessesProviding() {
    return transferProcessesProviding;
  }

  public void setTransferProcessesProviding(@javax.annotation.Nonnull DashboardTransferAmounts transferProcessesProviding) {
    this.transferProcessesProviding = transferProcessesProviding;
  }

  public DashboardPage connectorEndpoint(@javax.annotation.Nonnull String connectorEndpoint) {
    this.connectorEndpoint = connectorEndpoint;
    return this;
  }

  /**
   * Your Connector&#39;s Connector Endpoint
   * @return connectorEndpoint
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Your Connector\'s Connector Endpoint")
  public String getConnectorEndpoint() {
    return connectorEndpoint;
  }

  public void setConnectorEndpoint(@javax.annotation.Nonnull String connectorEndpoint) {
    this.connectorEndpoint = connectorEndpoint;
  }

  public DashboardPage connectorParticipantId(@javax.annotation.Nonnull String connectorParticipantId) {
    this.connectorParticipantId = connectorParticipantId;
    return this;
  }

  /**
   * Your Connector&#39;s Participant ID
   * @return connectorParticipantId
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Your Connector\'s Participant ID")
  public String getConnectorParticipantId() {
    return connectorParticipantId;
  }

  public void setConnectorParticipantId(@javax.annotation.Nonnull String connectorParticipantId) {
    this.connectorParticipantId = connectorParticipantId;
  }

  public DashboardPage connectorTitle(@javax.annotation.Nonnull String connectorTitle) {
    this.connectorTitle = connectorTitle;
    return this;
  }

  /**
   * Your Connector&#39;s Title
   * @return connectorTitle
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Your Connector\'s Title")
  public String getConnectorTitle() {
    return connectorTitle;
  }

  public void setConnectorTitle(@javax.annotation.Nonnull String connectorTitle) {
    this.connectorTitle = connectorTitle;
  }

  public DashboardPage connectorDescription(@javax.annotation.Nonnull String connectorDescription) {
    this.connectorDescription = connectorDescription;
    return this;
  }

  /**
   * Your Connector&#39;s Description
   * @return connectorDescription
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Your Connector\'s Description")
  public String getConnectorDescription() {
    return connectorDescription;
  }

  public void setConnectorDescription(@javax.annotation.Nonnull String connectorDescription) {
    this.connectorDescription = connectorDescription;
  }

  public DashboardPage connectorCuratorUrl(@javax.annotation.Nonnull String connectorCuratorUrl) {
    this.connectorCuratorUrl = connectorCuratorUrl;
    return this;
  }

  /**
   * Your Organization Homepage
   * @return connectorCuratorUrl
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Your Organization Homepage")
  public String getConnectorCuratorUrl() {
    return connectorCuratorUrl;
  }

  public void setConnectorCuratorUrl(@javax.annotation.Nonnull String connectorCuratorUrl) {
    this.connectorCuratorUrl = connectorCuratorUrl;
  }

  public DashboardPage connectorCuratorName(@javax.annotation.Nonnull String connectorCuratorName) {
    this.connectorCuratorName = connectorCuratorName;
    return this;
  }

  /**
   * Your Organization Name
   * @return connectorCuratorName
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Your Organization Name")
  public String getConnectorCuratorName() {
    return connectorCuratorName;
  }

  public void setConnectorCuratorName(@javax.annotation.Nonnull String connectorCuratorName) {
    this.connectorCuratorName = connectorCuratorName;
  }

  public DashboardPage connectorMaintainerUrl(@javax.annotation.Nonnull String connectorMaintainerUrl) {
    this.connectorMaintainerUrl = connectorMaintainerUrl;
    return this;
  }

  /**
   * Your Connector&#39;s Maintainer&#39;s Organization Homepage
   * @return connectorMaintainerUrl
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Your Connector\'s Maintainer\'s Organization Homepage")
  public String getConnectorMaintainerUrl() {
    return connectorMaintainerUrl;
  }

  public void setConnectorMaintainerUrl(@javax.annotation.Nonnull String connectorMaintainerUrl) {
    this.connectorMaintainerUrl = connectorMaintainerUrl;
  }

  public DashboardPage connectorMaintainerName(@javax.annotation.Nonnull String connectorMaintainerName) {
    this.connectorMaintainerName = connectorMaintainerName;
    return this;
  }

  /**
   * Your Connector&#39;s Maintainer&#39;s Organization Name
   * @return connectorMaintainerName
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Your Connector\'s Maintainer\'s Organization Name")
  public String getConnectorMaintainerName() {
    return connectorMaintainerName;
  }

  public void setConnectorMaintainerName(@javax.annotation.Nonnull String connectorMaintainerName) {
    this.connectorMaintainerName = connectorMaintainerName;
  }

  public DashboardPage connectorDapsConfig(@javax.annotation.Nullable DashboardDapsConfig connectorDapsConfig) {
    this.connectorDapsConfig = connectorDapsConfig;
    return this;
  }

  /**
   * Your Connector&#39;s DAPS Configuration (if present)
   * @return connectorDapsConfig
   */
  @javax.annotation.Nullable
  @ApiModelProperty("Your Connector\'s DAPS Configuration (if present)")
  public DashboardDapsConfig getConnectorDapsConfig() {
    return connectorDapsConfig;
  }

  public void setConnectorDapsConfig(@javax.annotation.Nullable DashboardDapsConfig connectorDapsConfig) {
    this.connectorDapsConfig = connectorDapsConfig;
  }

  public DashboardPage connectorCxDidConfig(@javax.annotation.Nullable DashboardCxDidConfig connectorCxDidConfig) {
    this.connectorCxDidConfig = connectorCxDidConfig;
    return this;
  }

  /**
   * Your Connector&#39;s Catena-X Web-DID Configuration (if present)
   * @return connectorCxDidConfig
   */
  @javax.annotation.Nullable
  @ApiModelProperty("Your Connector\'s Catena-X Web-DID Configuration (if present)")
  public DashboardCxDidConfig getConnectorCxDidConfig() {
    return connectorCxDidConfig;
  }

  public void setConnectorCxDidConfig(@javax.annotation.Nullable DashboardCxDidConfig connectorCxDidConfig) {
    this.connectorCxDidConfig = connectorCxDidConfig;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DashboardPage {\n");
    sb.append("    numAssets: ").append(toIndentedString(numAssets)).append("\n");
    sb.append("    numPolicies: ").append(toIndentedString(numPolicies)).append("\n");
    sb.append("    numContractDefinitions: ").append(toIndentedString(numContractDefinitions)).append("\n");
    sb.append("    numContractAgreementsConsuming: ").append(toIndentedString(numContractAgreementsConsuming)).append("\n");
    sb.append("    numContractAgreementsProviding: ").append(toIndentedString(numContractAgreementsProviding)).append("\n");
    sb.append("    transferProcessesConsuming: ").append(toIndentedString(transferProcessesConsuming)).append("\n");
    sb.append("    transferProcessesProviding: ").append(toIndentedString(transferProcessesProviding)).append("\n");
    sb.append("    connectorEndpoint: ").append(toIndentedString(connectorEndpoint)).append("\n");
    sb.append("    connectorParticipantId: ").append(toIndentedString(connectorParticipantId)).append("\n");
    sb.append("    connectorTitle: ").append(toIndentedString(connectorTitle)).append("\n");
    sb.append("    connectorDescription: ").append(toIndentedString(connectorDescription)).append("\n");
    sb.append("    connectorCuratorUrl: ").append(toIndentedString(connectorCuratorUrl)).append("\n");
    sb.append("    connectorCuratorName: ").append(toIndentedString(connectorCuratorName)).append("\n");
    sb.append("    connectorMaintainerUrl: ").append(toIndentedString(connectorMaintainerUrl)).append("\n");
    sb.append("    connectorMaintainerName: ").append(toIndentedString(connectorMaintainerName)).append("\n");
    sb.append("    connectorDapsConfig: ").append(toIndentedString(connectorDapsConfig)).append("\n");
    sb.append("    connectorCxDidConfig: ").append(toIndentedString(connectorCxDidConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("numAssets");
    openapiFields.add("numPolicies");
    openapiFields.add("numContractDefinitions");
    openapiFields.add("numContractAgreementsConsuming");
    openapiFields.add("numContractAgreementsProviding");
    openapiFields.add("transferProcessesConsuming");
    openapiFields.add("transferProcessesProviding");
    openapiFields.add("connectorEndpoint");
    openapiFields.add("connectorParticipantId");
    openapiFields.add("connectorTitle");
    openapiFields.add("connectorDescription");
    openapiFields.add("connectorCuratorUrl");
    openapiFields.add("connectorCuratorName");
    openapiFields.add("connectorMaintainerUrl");
    openapiFields.add("connectorMaintainerName");
    openapiFields.add("connectorDapsConfig");
    openapiFields.add("connectorCxDidConfig");
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("numAssets");
    openapiRequiredFields.add("numPolicies");
    openapiRequiredFields.add("numContractDefinitions");
    openapiRequiredFields.add("numContractAgreementsConsuming");
    openapiRequiredFields.add("numContractAgreementsProviding");
    openapiRequiredFields.add("transferProcessesConsuming");
    openapiRequiredFields.add("transferProcessesProviding");
    openapiRequiredFields.add("connectorEndpoint");
    openapiRequiredFields.add("connectorParticipantId");
    openapiRequiredFields.add("connectorTitle");
    openapiRequiredFields.add("connectorDescription");
    openapiRequiredFields.add("connectorCuratorUrl");
    openapiRequiredFields.add("connectorCuratorName");
    openapiRequiredFields.add("connectorMaintainerUrl");
    openapiRequiredFields.add("connectorMaintainerName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DashboardPage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!DashboardPage.openapiRequiredFields.isEmpty()) {
        // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in DashboardPage is not found in the empty JSON string", DashboardPage.openapiRequiredFields.toString()));
      }
    }
    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!DashboardPage.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DashboardPage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : DashboardPage.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // validate the required field `transferProcessesConsuming`
    DashboardTransferAmounts.validateJsonElement(jsonObj.get("transferProcessesConsuming"));
    // validate the required field `transferProcessesProviding`
    DashboardTransferAmounts.validateJsonElement(jsonObj.get("transferProcessesProviding"));
    if (!jsonObj.get("connectorEndpoint").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `connectorEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorEndpoint").toString()));
    }
    if (!jsonObj.get("connectorParticipantId").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `connectorParticipantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorParticipantId").toString()));
    }
    if (!jsonObj.get("connectorTitle").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `connectorTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorTitle").toString()));
    }
    if (!jsonObj.get("connectorDescription").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `connectorDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorDescription").toString()));
    }
    if (!jsonObj.get("connectorCuratorUrl").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `connectorCuratorUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorCuratorUrl").toString()));
    }
    if (!jsonObj.get("connectorCuratorName").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `connectorCuratorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorCuratorName").toString()));
    }
    if (!jsonObj.get("connectorMaintainerUrl").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `connectorMaintainerUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorMaintainerUrl").toString()));
    }
    if (!jsonObj.get("connectorMaintainerName").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `connectorMaintainerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorMaintainerName").toString()));
    }
    // validate the optional field `connectorDapsConfig`
    if (jsonObj.get("connectorDapsConfig") != null && !jsonObj.get("connectorDapsConfig").isJsonNull()) {
      DashboardDapsConfig.validateJsonElement(jsonObj.get("connectorDapsConfig"));
    }
    // validate the optional field `connectorCxDidConfig`
    if (jsonObj.get("connectorCxDidConfig") != null && !jsonObj.get("connectorCxDidConfig").isJsonNull()) {
      DashboardCxDidConfig.validateJsonElement(jsonObj.get("connectorCxDidConfig"));
    }
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!DashboardPage.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'DashboardPage' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<DashboardPage> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(DashboardPage.class));
      return (TypeAdapter<T>) new TypeAdapter<DashboardPage>() {
        @Override
        public void write(JsonWriter out, DashboardPage value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        @Override
        public DashboardPage read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of DashboardPage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DashboardPage
   * @throws IOException if the JSON string is invalid with respect to DashboardPage
   */
  public static DashboardPage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DashboardPage.class);
  }

  /**
   * Convert an instance of DashboardPage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }


  public static class DashboardPageBuilder {
    private Integer numAssets;
    private Integer numPolicies;
    private Integer numContractDefinitions;
    private Long numContractAgreementsConsuming;
    private Long numContractAgreementsProviding;
    private DashboardTransferAmounts transferProcessesConsuming;
    private DashboardTransferAmounts transferProcessesProviding;
    private String connectorEndpoint;
    private String connectorParticipantId;
    private String connectorTitle;
    private String connectorDescription;
    private String connectorCuratorUrl;
    private String connectorCuratorName;
    private String connectorMaintainerUrl;
    private String connectorMaintainerName;
    private DashboardDapsConfig connectorDapsConfig;
    private DashboardCxDidConfig connectorCxDidConfig;

    DashboardPageBuilder() {
    }

    /**
     * @return {@code this}.
     */
    public DashboardPage.DashboardPageBuilder numAssets(@javax.annotation.Nonnull final Integer numAssets) {
      if (numAssets == null) {
        throw new NullPointerException("numAssets is marked non-null but is null");
      }
      this.numAssets = numAssets;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DashboardPage.DashboardPageBuilder numPolicies(@javax.annotation.Nonnull final Integer numPolicies) {
      if (numPolicies == null) {
        throw new NullPointerException("numPolicies is marked non-null but is null");
      }
      this.numPolicies = numPolicies;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DashboardPage.DashboardPageBuilder numContractDefinitions(@javax.annotation.Nonnull final Integer numContractDefinitions) {
      if (numContractDefinitions == null) {
        throw new NullPointerException("numContractDefinitions is marked non-null but is null");
      }
      this.numContractDefinitions = numContractDefinitions;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DashboardPage.DashboardPageBuilder numContractAgreementsConsuming(@javax.annotation.Nonnull final Long numContractAgreementsConsuming) {
      if (numContractAgreementsConsuming == null) {
        throw new NullPointerException("numContractAgreementsConsuming is marked non-null but is null");
      }
      this.numContractAgreementsConsuming = numContractAgreementsConsuming;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DashboardPage.DashboardPageBuilder numContractAgreementsProviding(@javax.annotation.Nonnull final Long numContractAgreementsProviding) {
      if (numContractAgreementsProviding == null) {
        throw new NullPointerException("numContractAgreementsProviding is marked non-null but is null");
      }
      this.numContractAgreementsProviding = numContractAgreementsProviding;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DashboardPage.DashboardPageBuilder transferProcessesConsuming(@javax.annotation.Nonnull final DashboardTransferAmounts transferProcessesConsuming) {
      if (transferProcessesConsuming == null) {
        throw new NullPointerException("transferProcessesConsuming is marked non-null but is null");
      }
      this.transferProcessesConsuming = transferProcessesConsuming;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DashboardPage.DashboardPageBuilder transferProcessesProviding(@javax.annotation.Nonnull final DashboardTransferAmounts transferProcessesProviding) {
      if (transferProcessesProviding == null) {
        throw new NullPointerException("transferProcessesProviding is marked non-null but is null");
      }
      this.transferProcessesProviding = transferProcessesProviding;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DashboardPage.DashboardPageBuilder connectorEndpoint(@javax.annotation.Nonnull final String connectorEndpoint) {
      if (connectorEndpoint == null) {
        throw new NullPointerException("connectorEndpoint is marked non-null but is null");
      }
      this.connectorEndpoint = connectorEndpoint;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DashboardPage.DashboardPageBuilder connectorParticipantId(@javax.annotation.Nonnull final String connectorParticipantId) {
      if (connectorParticipantId == null) {
        throw new NullPointerException("connectorParticipantId is marked non-null but is null");
      }
      this.connectorParticipantId = connectorParticipantId;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DashboardPage.DashboardPageBuilder connectorTitle(@javax.annotation.Nonnull final String connectorTitle) {
      if (connectorTitle == null) {
        throw new NullPointerException("connectorTitle is marked non-null but is null");
      }
      this.connectorTitle = connectorTitle;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DashboardPage.DashboardPageBuilder connectorDescription(@javax.annotation.Nonnull final String connectorDescription) {
      if (connectorDescription == null) {
        throw new NullPointerException("connectorDescription is marked non-null but is null");
      }
      this.connectorDescription = connectorDescription;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DashboardPage.DashboardPageBuilder connectorCuratorUrl(@javax.annotation.Nonnull final String connectorCuratorUrl) {
      if (connectorCuratorUrl == null) {
        throw new NullPointerException("connectorCuratorUrl is marked non-null but is null");
      }
      this.connectorCuratorUrl = connectorCuratorUrl;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DashboardPage.DashboardPageBuilder connectorCuratorName(@javax.annotation.Nonnull final String connectorCuratorName) {
      if (connectorCuratorName == null) {
        throw new NullPointerException("connectorCuratorName is marked non-null but is null");
      }
      this.connectorCuratorName = connectorCuratorName;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DashboardPage.DashboardPageBuilder connectorMaintainerUrl(@javax.annotation.Nonnull final String connectorMaintainerUrl) {
      if (connectorMaintainerUrl == null) {
        throw new NullPointerException("connectorMaintainerUrl is marked non-null but is null");
      }
      this.connectorMaintainerUrl = connectorMaintainerUrl;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DashboardPage.DashboardPageBuilder connectorMaintainerName(@javax.annotation.Nonnull final String connectorMaintainerName) {
      if (connectorMaintainerName == null) {
        throw new NullPointerException("connectorMaintainerName is marked non-null but is null");
      }
      this.connectorMaintainerName = connectorMaintainerName;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DashboardPage.DashboardPageBuilder connectorDapsConfig(@javax.annotation.Nullable final DashboardDapsConfig connectorDapsConfig) {
      this.connectorDapsConfig = connectorDapsConfig;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DashboardPage.DashboardPageBuilder connectorCxDidConfig(@javax.annotation.Nullable final DashboardCxDidConfig connectorCxDidConfig) {
      this.connectorCxDidConfig = connectorCxDidConfig;
      return this;
    }

    public DashboardPage build() {
      return new DashboardPage(this.numAssets, this.numPolicies, this.numContractDefinitions, this.numContractAgreementsConsuming, this.numContractAgreementsProviding, this.transferProcessesConsuming, this.transferProcessesProviding, this.connectorEndpoint, this.connectorParticipantId, this.connectorTitle, this.connectorDescription, this.connectorCuratorUrl, this.connectorCuratorName, this.connectorMaintainerUrl, this.connectorMaintainerName, this.connectorDapsConfig, this.connectorCxDidConfig);
    }

    @Override
    public String toString() {
      return "DashboardPage.DashboardPageBuilder(numAssets=" + this.numAssets + ", numPolicies=" + this.numPolicies + ", numContractDefinitions=" + this.numContractDefinitions + ", numContractAgreementsConsuming=" + this.numContractAgreementsConsuming + ", numContractAgreementsProviding=" + this.numContractAgreementsProviding + ", transferProcessesConsuming=" + this.transferProcessesConsuming + ", transferProcessesProviding=" + this.transferProcessesProviding + ", connectorEndpoint=" + this.connectorEndpoint + ", connectorParticipantId=" + this.connectorParticipantId + ", connectorTitle=" + this.connectorTitle + ", connectorDescription=" + this.connectorDescription + ", connectorCuratorUrl=" + this.connectorCuratorUrl + ", connectorCuratorName=" + this.connectorCuratorName + ", connectorMaintainerUrl=" + this.connectorMaintainerUrl + ", connectorMaintainerName=" + this.connectorMaintainerName + ", connectorDapsConfig=" + this.connectorDapsConfig + ", connectorCxDidConfig=" + this.connectorCxDidConfig + ")";
    }
  }

  public static DashboardPage.DashboardPageBuilder builder() {
    return new DashboardPage.DashboardPageBuilder();
  }

  public DashboardPage(@javax.annotation.Nonnull final Integer numAssets, @javax.annotation.Nonnull final Integer numPolicies, @javax.annotation.Nonnull final Integer numContractDefinitions, @javax.annotation.Nonnull final Long numContractAgreementsConsuming, @javax.annotation.Nonnull final Long numContractAgreementsProviding, @javax.annotation.Nonnull final DashboardTransferAmounts transferProcessesConsuming, @javax.annotation.Nonnull final DashboardTransferAmounts transferProcessesProviding, @javax.annotation.Nonnull final String connectorEndpoint, @javax.annotation.Nonnull final String connectorParticipantId, @javax.annotation.Nonnull final String connectorTitle, @javax.annotation.Nonnull final String connectorDescription, @javax.annotation.Nonnull final String connectorCuratorUrl, @javax.annotation.Nonnull final String connectorCuratorName, @javax.annotation.Nonnull final String connectorMaintainerUrl, @javax.annotation.Nonnull final String connectorMaintainerName, @javax.annotation.Nullable final DashboardDapsConfig connectorDapsConfig, @javax.annotation.Nullable final DashboardCxDidConfig connectorCxDidConfig) {
    if (numAssets == null) {
      throw new NullPointerException("numAssets is marked non-null but is null");
    }
    if (numPolicies == null) {
      throw new NullPointerException("numPolicies is marked non-null but is null");
    }
    if (numContractDefinitions == null) {
      throw new NullPointerException("numContractDefinitions is marked non-null but is null");
    }
    if (numContractAgreementsConsuming == null) {
      throw new NullPointerException("numContractAgreementsConsuming is marked non-null but is null");
    }
    if (numContractAgreementsProviding == null) {
      throw new NullPointerException("numContractAgreementsProviding is marked non-null but is null");
    }
    if (transferProcessesConsuming == null) {
      throw new NullPointerException("transferProcessesConsuming is marked non-null but is null");
    }
    if (transferProcessesProviding == null) {
      throw new NullPointerException("transferProcessesProviding is marked non-null but is null");
    }
    if (connectorEndpoint == null) {
      throw new NullPointerException("connectorEndpoint is marked non-null but is null");
    }
    if (connectorParticipantId == null) {
      throw new NullPointerException("connectorParticipantId is marked non-null but is null");
    }
    if (connectorTitle == null) {
      throw new NullPointerException("connectorTitle is marked non-null but is null");
    }
    if (connectorDescription == null) {
      throw new NullPointerException("connectorDescription is marked non-null but is null");
    }
    if (connectorCuratorUrl == null) {
      throw new NullPointerException("connectorCuratorUrl is marked non-null but is null");
    }
    if (connectorCuratorName == null) {
      throw new NullPointerException("connectorCuratorName is marked non-null but is null");
    }
    if (connectorMaintainerUrl == null) {
      throw new NullPointerException("connectorMaintainerUrl is marked non-null but is null");
    }
    if (connectorMaintainerName == null) {
      throw new NullPointerException("connectorMaintainerName is marked non-null but is null");
    }
    this.numAssets = numAssets;
    this.numPolicies = numPolicies;
    this.numContractDefinitions = numContractDefinitions;
    this.numContractAgreementsConsuming = numContractAgreementsConsuming;
    this.numContractAgreementsProviding = numContractAgreementsProviding;
    this.transferProcessesConsuming = transferProcessesConsuming;
    this.transferProcessesProviding = transferProcessesProviding;
    this.connectorEndpoint = connectorEndpoint;
    this.connectorParticipantId = connectorParticipantId;
    this.connectorTitle = connectorTitle;
    this.connectorDescription = connectorDescription;
    this.connectorCuratorUrl = connectorCuratorUrl;
    this.connectorCuratorName = connectorCuratorName;
    this.connectorMaintainerUrl = connectorMaintainerUrl;
    this.connectorMaintainerName = connectorMaintainerName;
    this.connectorDapsConfig = connectorDapsConfig;
    this.connectorCxDidConfig = connectorCxDidConfig;
  }
}
