/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.UiPolicyCreateRequest;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import de.sovity.edc.client.gen.JSON;

/**
 * [Deprecated] Create a Policy Definition. Use PolicyDefinitionCreateDto
 * @deprecated
 */
@Deprecated
@ApiModel(description = "[Deprecated] Create a Policy Definition. Use PolicyDefinitionCreateDto")
@lombok.AllArgsConstructor
@lombok.Builder
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class PolicyDefinitionCreateRequest {
  public static final String SERIALIZED_NAME_POLICY_DEFINITION_ID = "policyDefinitionId";
  @SerializedName(SERIALIZED_NAME_POLICY_DEFINITION_ID)
  @javax.annotation.Nonnull
  private String policyDefinitionId;

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_POLICY)
  @javax.annotation.Nonnull
  private UiPolicyCreateRequest policy;

  public PolicyDefinitionCreateRequest() {
  }

  public PolicyDefinitionCreateRequest policyDefinitionId(@javax.annotation.Nonnull String policyDefinitionId) {
    this.policyDefinitionId = policyDefinitionId;
    return this;
  }

  /**
   * Policy Definition ID
   * @return policyDefinitionId
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Policy Definition ID")
  public String getPolicyDefinitionId() {
    return policyDefinitionId;
  }

  public void setPolicyDefinitionId(@javax.annotation.Nonnull String policyDefinitionId) {
    this.policyDefinitionId = policyDefinitionId;
  }


  @Deprecated
  public PolicyDefinitionCreateRequest policy(@javax.annotation.Nonnull UiPolicyCreateRequest policy) {
    this.policy = policy;
    return this;
  }

  /**
   * [Deprecated] Conjunction of constraints (simplified UiPolicyExpression)
   * @return policy
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "[Deprecated] Conjunction of constraints (simplified UiPolicyExpression)")
  public UiPolicyCreateRequest getPolicy() {
    return policy;
  }

  @Deprecated
  public void setPolicy(@javax.annotation.Nonnull UiPolicyCreateRequest policy) {
    this.policy = policy;
  }



  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyDefinitionCreateRequest {\n");
    sb.append("    policyDefinitionId: ").append(toIndentedString(policyDefinitionId)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("policyDefinitionId");
    openapiFields.add("policy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("policyDefinitionId");
    openapiRequiredFields.add("policy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyDefinitionCreateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyDefinitionCreateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyDefinitionCreateRequest is not found in the empty JSON string", PolicyDefinitionCreateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyDefinitionCreateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyDefinitionCreateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PolicyDefinitionCreateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("policyDefinitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyDefinitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyDefinitionId").toString()));
      }
      // validate the required field `policy`
      UiPolicyCreateRequest.validateJsonElement(jsonObj.get("policy"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyDefinitionCreateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyDefinitionCreateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyDefinitionCreateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyDefinitionCreateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyDefinitionCreateRequest>() {
           @Override
           public void write(JsonWriter out, PolicyDefinitionCreateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyDefinitionCreateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyDefinitionCreateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyDefinitionCreateRequest
   * @throws IOException if the JSON string is invalid with respect to PolicyDefinitionCreateRequest
   */
  public static PolicyDefinitionCreateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyDefinitionCreateRequest.class);
  }

  /**
   * Convert an instance of PolicyDefinitionCreateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

