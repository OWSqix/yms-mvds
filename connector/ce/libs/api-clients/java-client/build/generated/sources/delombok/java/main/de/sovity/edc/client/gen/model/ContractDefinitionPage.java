/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.ContractDefinitionEntry;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import de.sovity.edc.client.gen.JSON;

/**
 * ContractDefinitionPage
 */
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ContractDefinitionPage {
  public static final String SERIALIZED_NAME_CONTRACT_DEFINITIONS = "contractDefinitions";
  @SerializedName(SERIALIZED_NAME_CONTRACT_DEFINITIONS)
  @javax.annotation.Nonnull
  private List<ContractDefinitionEntry> contractDefinitions;

  public ContractDefinitionPage() {
  }

  public ContractDefinitionPage contractDefinitions(@javax.annotation.Nonnull List<ContractDefinitionEntry> contractDefinitions) {
    this.contractDefinitions = contractDefinitions;
    return this;
  }

  public ContractDefinitionPage addContractDefinitionsItem(ContractDefinitionEntry contractDefinitionsItem) {
    if (this.contractDefinitions == null) {
      this.contractDefinitions = new ArrayList<>();
    }
    this.contractDefinitions.add(contractDefinitionsItem);
    return this;
  }

  /**
   * Contract Definition Entries
   * @return contractDefinitions
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Contract Definition Entries")
  public List<ContractDefinitionEntry> getContractDefinitions() {
    return contractDefinitions;
  }

  public void setContractDefinitions(@javax.annotation.Nonnull List<ContractDefinitionEntry> contractDefinitions) {
    this.contractDefinitions = contractDefinitions;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractDefinitionPage {\n");
    sb.append("    contractDefinitions: ").append(toIndentedString(contractDefinitions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contractDefinitions");
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contractDefinitions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContractDefinitionPage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!ContractDefinitionPage.openapiRequiredFields.isEmpty()) {
        // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in ContractDefinitionPage is not found in the empty JSON string", ContractDefinitionPage.openapiRequiredFields.toString()));
      }
    }
    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!ContractDefinitionPage.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContractDefinitionPage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : ContractDefinitionPage.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // ensure the json data is an array
    if (!jsonObj.get("contractDefinitions").isJsonArray()) {
      throw new IllegalArgumentException(String.format("Expected the field `contractDefinitions` to be an array in the JSON string but got `%s`", jsonObj.get("contractDefinitions").toString()));
    }
    JsonArray jsonArraycontractDefinitions = jsonObj.getAsJsonArray("contractDefinitions");
    // validate the required field `contractDefinitions` (array)
    for (int i = 0; i < jsonArraycontractDefinitions.size(); i++) {
      ContractDefinitionEntry.validateJsonElement(jsonArraycontractDefinitions.get(i));
    }
    ;
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!ContractDefinitionPage.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'ContractDefinitionPage' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<ContractDefinitionPage> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(ContractDefinitionPage.class));
      return (TypeAdapter<T>) new TypeAdapter<ContractDefinitionPage>() {
        @Override
        public void write(JsonWriter out, ContractDefinitionPage value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        @Override
        public ContractDefinitionPage read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of ContractDefinitionPage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContractDefinitionPage
   * @throws IOException if the JSON string is invalid with respect to ContractDefinitionPage
   */
  public static ContractDefinitionPage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractDefinitionPage.class);
  }

  /**
   * Convert an instance of ContractDefinitionPage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  private static List<ContractDefinitionEntry> $default$contractDefinitions() {
    return new ArrayList<>();
  }


  public static class ContractDefinitionPageBuilder {
    private boolean contractDefinitions$set;
    private List<ContractDefinitionEntry> contractDefinitions$value;

    ContractDefinitionPageBuilder() {
    }

    /**
     * @return {@code this}.
     */
    public ContractDefinitionPage.ContractDefinitionPageBuilder contractDefinitions(@javax.annotation.Nonnull final List<ContractDefinitionEntry> contractDefinitions) {
      if (contractDefinitions == null) {
        throw new NullPointerException("contractDefinitions is marked non-null but is null");
      }
      this.contractDefinitions$value = contractDefinitions;
      contractDefinitions$set = true;
      return this;
    }

    public ContractDefinitionPage build() {
      List<ContractDefinitionEntry> contractDefinitions$value = this.contractDefinitions$value;
      if (!this.contractDefinitions$set) contractDefinitions$value = ContractDefinitionPage.$default$contractDefinitions();
      return new ContractDefinitionPage(contractDefinitions$value);
    }

    @Override
    public String toString() {
      return "ContractDefinitionPage.ContractDefinitionPageBuilder(contractDefinitions$value=" + this.contractDefinitions$value + ")";
    }
  }

  public static ContractDefinitionPage.ContractDefinitionPageBuilder builder() {
    return new ContractDefinitionPage.ContractDefinitionPageBuilder();
  }

  public ContractDefinitionPage(@javax.annotation.Nonnull final List<ContractDefinitionEntry> contractDefinitions) {
    if (contractDefinitions == null) {
      throw new NullPointerException("contractDefinitions is marked non-null but is null");
    }
    this.contractDefinitions = contractDefinitions;
  }
}
