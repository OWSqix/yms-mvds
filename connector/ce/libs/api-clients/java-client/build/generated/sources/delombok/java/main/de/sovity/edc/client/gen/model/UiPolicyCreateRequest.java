/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.UiPolicyConstraint;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import de.sovity.edc.client.gen.JSON;

/**
 * [Deprecated] Conjunction of constraints (simplified UiPolicyExpression)
 * @deprecated
 */
@Deprecated
@ApiModel(description = "[Deprecated] Conjunction of constraints (simplified UiPolicyExpression)")
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UiPolicyCreateRequest {
  public static final String SERIALIZED_NAME_CONSTRAINTS = "constraints";
  @SerializedName(SERIALIZED_NAME_CONSTRAINTS)
  @javax.annotation.Nullable
  private List<UiPolicyConstraint> constraints;

  public UiPolicyCreateRequest() {
  }

  public UiPolicyCreateRequest constraints(@javax.annotation.Nullable List<UiPolicyConstraint> constraints) {
    this.constraints = constraints;
    return this;
  }

  public UiPolicyCreateRequest addConstraintsItem(UiPolicyConstraint constraintsItem) {
    if (this.constraints == null) {
      this.constraints = new ArrayList<>();
    }
    this.constraints.add(constraintsItem);
    return this;
  }

  /**
   * Conjunction of required constraints
   * @return constraints
   */
  @javax.annotation.Nullable
  @ApiModelProperty("Conjunction of required constraints")
  public List<UiPolicyConstraint> getConstraints() {
    return constraints;
  }

  public void setConstraints(@javax.annotation.Nullable List<UiPolicyConstraint> constraints) {
    this.constraints = constraints;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UiPolicyCreateRequest {\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("constraints");
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UiPolicyCreateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!UiPolicyCreateRequest.openapiRequiredFields.isEmpty()) {
        // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in UiPolicyCreateRequest is not found in the empty JSON string", UiPolicyCreateRequest.openapiRequiredFields.toString()));
      }
    }
    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!UiPolicyCreateRequest.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UiPolicyCreateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if (jsonObj.get("constraints") != null && !jsonObj.get("constraints").isJsonNull()) {
      JsonArray jsonArrayconstraints = jsonObj.getAsJsonArray("constraints");
      if (jsonArrayconstraints != null) {
        // ensure the json data is an array
        if (!jsonObj.get("constraints").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `constraints` to be an array in the JSON string but got `%s`", jsonObj.get("constraints").toString()));
        }
        // validate the optional field `constraints` (array)
        for (int i = 0; i < jsonArrayconstraints.size(); i++) {
          UiPolicyConstraint.validateJsonElement(jsonArrayconstraints.get(i));
        }
        ;
      }
    }
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!UiPolicyCreateRequest.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'UiPolicyCreateRequest' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<UiPolicyCreateRequest> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(UiPolicyCreateRequest.class));
      return (TypeAdapter<T>) new TypeAdapter<UiPolicyCreateRequest>() {
        @Override
        public void write(JsonWriter out, UiPolicyCreateRequest value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        @Override
        public UiPolicyCreateRequest read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of UiPolicyCreateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UiPolicyCreateRequest
   * @throws IOException if the JSON string is invalid with respect to UiPolicyCreateRequest
   */
  public static UiPolicyCreateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UiPolicyCreateRequest.class);
  }

  /**
   * Convert an instance of UiPolicyCreateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  private static List<UiPolicyConstraint> $default$constraints() {
    return new ArrayList<>();
  }


  public static class UiPolicyCreateRequestBuilder {
    private boolean constraints$set;
    private List<UiPolicyConstraint> constraints$value;

    UiPolicyCreateRequestBuilder() {
    }

    /**
     * @return {@code this}.
     */
    public UiPolicyCreateRequest.UiPolicyCreateRequestBuilder constraints(@javax.annotation.Nullable final List<UiPolicyConstraint> constraints) {
      this.constraints$value = constraints;
      constraints$set = true;
      return this;
    }

    public UiPolicyCreateRequest build() {
      List<UiPolicyConstraint> constraints$value = this.constraints$value;
      if (!this.constraints$set) constraints$value = UiPolicyCreateRequest.$default$constraints();
      return new UiPolicyCreateRequest(constraints$value);
    }

    @Override
    public String toString() {
      return "UiPolicyCreateRequest.UiPolicyCreateRequestBuilder(constraints$value=" + this.constraints$value + ")";
    }
  }

  public static UiPolicyCreateRequest.UiPolicyCreateRequestBuilder builder() {
    return new UiPolicyCreateRequest.UiPolicyCreateRequestBuilder();
  }

  public UiPolicyCreateRequest(@javax.annotation.Nullable final List<UiPolicyConstraint> constraints) {
    this.constraints = constraints;
  }
}
