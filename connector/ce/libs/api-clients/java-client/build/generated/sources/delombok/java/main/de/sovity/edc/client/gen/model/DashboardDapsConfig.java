/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import de.sovity.edc.client.gen.JSON;

/**
 * DAPS Config
 */
@ApiModel(description = "DAPS Config")
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class DashboardDapsConfig {
  public static final String SERIALIZED_NAME_TOKEN_URL = "tokenUrl";
  @SerializedName(SERIALIZED_NAME_TOKEN_URL)
  @javax.annotation.Nonnull
  private String tokenUrl;
  public static final String SERIALIZED_NAME_JWKS_URL = "jwksUrl";
  @SerializedName(SERIALIZED_NAME_JWKS_URL)
  @javax.annotation.Nonnull
  private String jwksUrl;

  public DashboardDapsConfig() {
  }

  public DashboardDapsConfig tokenUrl(@javax.annotation.Nonnull String tokenUrl) {
    this.tokenUrl = tokenUrl;
    return this;
  }

  /**
   * Your Connector&#39;s DAPS Token URL
   * @return tokenUrl
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Your Connector\'s DAPS Token URL")
  public String getTokenUrl() {
    return tokenUrl;
  }

  public void setTokenUrl(@javax.annotation.Nonnull String tokenUrl) {
    this.tokenUrl = tokenUrl;
  }

  public DashboardDapsConfig jwksUrl(@javax.annotation.Nonnull String jwksUrl) {
    this.jwksUrl = jwksUrl;
    return this;
  }

  /**
   * Your Connector&#39;s DAPS JWKS URL
   * @return jwksUrl
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Your Connector\'s DAPS JWKS URL")
  public String getJwksUrl() {
    return jwksUrl;
  }

  public void setJwksUrl(@javax.annotation.Nonnull String jwksUrl) {
    this.jwksUrl = jwksUrl;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DashboardDapsConfig {\n");
    sb.append("    tokenUrl: ").append(toIndentedString(tokenUrl)).append("\n");
    sb.append("    jwksUrl: ").append(toIndentedString(jwksUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tokenUrl");
    openapiFields.add("jwksUrl");
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tokenUrl");
    openapiRequiredFields.add("jwksUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DashboardDapsConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!DashboardDapsConfig.openapiRequiredFields.isEmpty()) {
        // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in DashboardDapsConfig is not found in the empty JSON string", DashboardDapsConfig.openapiRequiredFields.toString()));
      }
    }
    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!DashboardDapsConfig.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DashboardDapsConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : DashboardDapsConfig.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if (!jsonObj.get("tokenUrl").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `tokenUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenUrl").toString()));
    }
    if (!jsonObj.get("jwksUrl").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `jwksUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jwksUrl").toString()));
    }
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!DashboardDapsConfig.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'DashboardDapsConfig' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<DashboardDapsConfig> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(DashboardDapsConfig.class));
      return (TypeAdapter<T>) new TypeAdapter<DashboardDapsConfig>() {
        @Override
        public void write(JsonWriter out, DashboardDapsConfig value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        @Override
        public DashboardDapsConfig read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of DashboardDapsConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DashboardDapsConfig
   * @throws IOException if the JSON string is invalid with respect to DashboardDapsConfig
   */
  public static DashboardDapsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DashboardDapsConfig.class);
  }

  /**
   * Convert an instance of DashboardDapsConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }


  public static class DashboardDapsConfigBuilder {
    private String tokenUrl;
    private String jwksUrl;

    DashboardDapsConfigBuilder() {
    }

    /**
     * @return {@code this}.
     */
    public DashboardDapsConfig.DashboardDapsConfigBuilder tokenUrl(@javax.annotation.Nonnull final String tokenUrl) {
      if (tokenUrl == null) {
        throw new NullPointerException("tokenUrl is marked non-null but is null");
      }
      this.tokenUrl = tokenUrl;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DashboardDapsConfig.DashboardDapsConfigBuilder jwksUrl(@javax.annotation.Nonnull final String jwksUrl) {
      if (jwksUrl == null) {
        throw new NullPointerException("jwksUrl is marked non-null but is null");
      }
      this.jwksUrl = jwksUrl;
      return this;
    }

    public DashboardDapsConfig build() {
      return new DashboardDapsConfig(this.tokenUrl, this.jwksUrl);
    }

    @Override
    public String toString() {
      return "DashboardDapsConfig.DashboardDapsConfigBuilder(tokenUrl=" + this.tokenUrl + ", jwksUrl=" + this.jwksUrl + ")";
    }
  }

  public static DashboardDapsConfig.DashboardDapsConfigBuilder builder() {
    return new DashboardDapsConfig.DashboardDapsConfigBuilder();
  }

  public DashboardDapsConfig(@javax.annotation.Nonnull final String tokenUrl, @javax.annotation.Nonnull final String jwksUrl) {
    if (tokenUrl == null) {
      throw new NullPointerException("tokenUrl is marked non-null but is null");
    }
    if (jwksUrl == null) {
      throw new NullPointerException("jwksUrl is marked non-null but is null");
    }
    this.tokenUrl = tokenUrl;
    this.jwksUrl = jwksUrl;
  }
}
