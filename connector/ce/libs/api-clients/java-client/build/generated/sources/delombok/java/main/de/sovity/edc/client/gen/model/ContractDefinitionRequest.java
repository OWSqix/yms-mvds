/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.UiCriterion;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import de.sovity.edc.client.gen.JSON;

/**
 * Data for creating a Contract Definition
 */
@ApiModel(description = "Data for creating a Contract Definition")
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ContractDefinitionRequest {
  public static final String SERIALIZED_NAME_CONTRACT_DEFINITION_ID = "contractDefinitionId";
  @SerializedName(SERIALIZED_NAME_CONTRACT_DEFINITION_ID)
  @javax.annotation.Nonnull
  private String contractDefinitionId;
  public static final String SERIALIZED_NAME_CONTRACT_POLICY_ID = "contractPolicyId";
  @SerializedName(SERIALIZED_NAME_CONTRACT_POLICY_ID)
  @javax.annotation.Nonnull
  private String contractPolicyId;
  public static final String SERIALIZED_NAME_ACCESS_POLICY_ID = "accessPolicyId";
  @SerializedName(SERIALIZED_NAME_ACCESS_POLICY_ID)
  @javax.annotation.Nonnull
  private String accessPolicyId;
  public static final String SERIALIZED_NAME_ASSET_SELECTOR = "assetSelector";
  @SerializedName(SERIALIZED_NAME_ASSET_SELECTOR)
  @javax.annotation.Nonnull
  private List<UiCriterion> assetSelector;

  public ContractDefinitionRequest() {
  }

  public ContractDefinitionRequest contractDefinitionId(@javax.annotation.Nonnull String contractDefinitionId) {
    this.contractDefinitionId = contractDefinitionId;
    return this;
  }

  /**
   * Contract Definition ID
   * @return contractDefinitionId
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Contract Definition ID")
  public String getContractDefinitionId() {
    return contractDefinitionId;
  }

  public void setContractDefinitionId(@javax.annotation.Nonnull String contractDefinitionId) {
    this.contractDefinitionId = contractDefinitionId;
  }

  public ContractDefinitionRequest contractPolicyId(@javax.annotation.Nonnull String contractPolicyId) {
    this.contractPolicyId = contractPolicyId;
    return this;
  }

  /**
   * Contract Policy ID
   * @return contractPolicyId
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Contract Policy ID")
  public String getContractPolicyId() {
    return contractPolicyId;
  }

  public void setContractPolicyId(@javax.annotation.Nonnull String contractPolicyId) {
    this.contractPolicyId = contractPolicyId;
  }

  public ContractDefinitionRequest accessPolicyId(@javax.annotation.Nonnull String accessPolicyId) {
    this.accessPolicyId = accessPolicyId;
    return this;
  }

  /**
   * Access Policy ID
   * @return accessPolicyId
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Access Policy ID")
  public String getAccessPolicyId() {
    return accessPolicyId;
  }

  public void setAccessPolicyId(@javax.annotation.Nonnull String accessPolicyId) {
    this.accessPolicyId = accessPolicyId;
  }

  public ContractDefinitionRequest assetSelector(@javax.annotation.Nonnull List<UiCriterion> assetSelector) {
    this.assetSelector = assetSelector;
    return this;
  }

  public ContractDefinitionRequest addAssetSelectorItem(UiCriterion assetSelectorItem) {
    if (this.assetSelector == null) {
      this.assetSelector = new ArrayList<>();
    }
    this.assetSelector.add(assetSelectorItem);
    return this;
  }

  /**
   * List of Criteria for the contract
   * @return assetSelector
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "List of Criteria for the contract")
  public List<UiCriterion> getAssetSelector() {
    return assetSelector;
  }

  public void setAssetSelector(@javax.annotation.Nonnull List<UiCriterion> assetSelector) {
    this.assetSelector = assetSelector;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractDefinitionRequest {\n");
    sb.append("    contractDefinitionId: ").append(toIndentedString(contractDefinitionId)).append("\n");
    sb.append("    contractPolicyId: ").append(toIndentedString(contractPolicyId)).append("\n");
    sb.append("    accessPolicyId: ").append(toIndentedString(accessPolicyId)).append("\n");
    sb.append("    assetSelector: ").append(toIndentedString(assetSelector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contractDefinitionId");
    openapiFields.add("contractPolicyId");
    openapiFields.add("accessPolicyId");
    openapiFields.add("assetSelector");
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contractDefinitionId");
    openapiRequiredFields.add("contractPolicyId");
    openapiRequiredFields.add("accessPolicyId");
    openapiRequiredFields.add("assetSelector");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContractDefinitionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!ContractDefinitionRequest.openapiRequiredFields.isEmpty()) {
        // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in ContractDefinitionRequest is not found in the empty JSON string", ContractDefinitionRequest.openapiRequiredFields.toString()));
      }
    }
    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!ContractDefinitionRequest.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContractDefinitionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : ContractDefinitionRequest.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if (!jsonObj.get("contractDefinitionId").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `contractDefinitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractDefinitionId").toString()));
    }
    if (!jsonObj.get("contractPolicyId").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `contractPolicyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractPolicyId").toString()));
    }
    if (!jsonObj.get("accessPolicyId").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `accessPolicyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessPolicyId").toString()));
    }
    // ensure the json data is an array
    if (!jsonObj.get("assetSelector").isJsonArray()) {
      throw new IllegalArgumentException(String.format("Expected the field `assetSelector` to be an array in the JSON string but got `%s`", jsonObj.get("assetSelector").toString()));
    }
    JsonArray jsonArrayassetSelector = jsonObj.getAsJsonArray("assetSelector");
    // validate the required field `assetSelector` (array)
    for (int i = 0; i < jsonArrayassetSelector.size(); i++) {
      UiCriterion.validateJsonElement(jsonArrayassetSelector.get(i));
    }
    ;
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!ContractDefinitionRequest.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'ContractDefinitionRequest' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<ContractDefinitionRequest> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(ContractDefinitionRequest.class));
      return (TypeAdapter<T>) new TypeAdapter<ContractDefinitionRequest>() {
        @Override
        public void write(JsonWriter out, ContractDefinitionRequest value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        @Override
        public ContractDefinitionRequest read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of ContractDefinitionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContractDefinitionRequest
   * @throws IOException if the JSON string is invalid with respect to ContractDefinitionRequest
   */
  public static ContractDefinitionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractDefinitionRequest.class);
  }

  /**
   * Convert an instance of ContractDefinitionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  private static List<UiCriterion> $default$assetSelector() {
    return new ArrayList<>();
  }


  public static class ContractDefinitionRequestBuilder {
    private String contractDefinitionId;
    private String contractPolicyId;
    private String accessPolicyId;
    private boolean assetSelector$set;
    private List<UiCriterion> assetSelector$value;

    ContractDefinitionRequestBuilder() {
    }

    /**
     * @return {@code this}.
     */
    public ContractDefinitionRequest.ContractDefinitionRequestBuilder contractDefinitionId(@javax.annotation.Nonnull final String contractDefinitionId) {
      if (contractDefinitionId == null) {
        throw new NullPointerException("contractDefinitionId is marked non-null but is null");
      }
      this.contractDefinitionId = contractDefinitionId;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public ContractDefinitionRequest.ContractDefinitionRequestBuilder contractPolicyId(@javax.annotation.Nonnull final String contractPolicyId) {
      if (contractPolicyId == null) {
        throw new NullPointerException("contractPolicyId is marked non-null but is null");
      }
      this.contractPolicyId = contractPolicyId;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public ContractDefinitionRequest.ContractDefinitionRequestBuilder accessPolicyId(@javax.annotation.Nonnull final String accessPolicyId) {
      if (accessPolicyId == null) {
        throw new NullPointerException("accessPolicyId is marked non-null but is null");
      }
      this.accessPolicyId = accessPolicyId;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public ContractDefinitionRequest.ContractDefinitionRequestBuilder assetSelector(@javax.annotation.Nonnull final List<UiCriterion> assetSelector) {
      if (assetSelector == null) {
        throw new NullPointerException("assetSelector is marked non-null but is null");
      }
      this.assetSelector$value = assetSelector;
      assetSelector$set = true;
      return this;
    }

    public ContractDefinitionRequest build() {
      List<UiCriterion> assetSelector$value = this.assetSelector$value;
      if (!this.assetSelector$set) assetSelector$value = ContractDefinitionRequest.$default$assetSelector();
      return new ContractDefinitionRequest(this.contractDefinitionId, this.contractPolicyId, this.accessPolicyId, assetSelector$value);
    }

    @Override
    public String toString() {
      return "ContractDefinitionRequest.ContractDefinitionRequestBuilder(contractDefinitionId=" + this.contractDefinitionId + ", contractPolicyId=" + this.contractPolicyId + ", accessPolicyId=" + this.accessPolicyId + ", assetSelector$value=" + this.assetSelector$value + ")";
    }
  }

  public static ContractDefinitionRequest.ContractDefinitionRequestBuilder builder() {
    return new ContractDefinitionRequest.ContractDefinitionRequestBuilder();
  }

  public ContractDefinitionRequest(@javax.annotation.Nonnull final String contractDefinitionId, @javax.annotation.Nonnull final String contractPolicyId, @javax.annotation.Nonnull final String accessPolicyId, @javax.annotation.Nonnull final List<UiCriterion> assetSelector) {
    if (contractDefinitionId == null) {
      throw new NullPointerException("contractDefinitionId is marked non-null but is null");
    }
    if (contractPolicyId == null) {
      throw new NullPointerException("contractPolicyId is marked non-null but is null");
    }
    if (accessPolicyId == null) {
      throw new NullPointerException("accessPolicyId is marked non-null but is null");
    }
    if (assetSelector == null) {
      throw new NullPointerException("assetSelector is marked non-null but is null");
    }
    this.contractDefinitionId = contractDefinitionId;
    this.contractPolicyId = contractPolicyId;
    this.accessPolicyId = accessPolicyId;
    this.assetSelector = assetSelector;
  }
}
