/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.CatalogFilterExpressionLiteral;
import de.sovity.edc.client.gen.model.CatalogFilterExpressionOperator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import de.sovity.edc.client.gen.JSON;

/**
 * Generic expression for filtering the data offers in the catalog
 */
@ApiModel(description = "Generic expression for filtering the data offers in the catalog")
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class CatalogFilterExpression {
  public static final String SERIALIZED_NAME_OPERAND_LEFT = "operandLeft";
  @SerializedName(SERIALIZED_NAME_OPERAND_LEFT)
  @javax.annotation.Nonnull
  private String operandLeft;
  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  @javax.annotation.Nonnull
  private CatalogFilterExpressionOperator operator;
  public static final String SERIALIZED_NAME_OPERAND_RIGHT = "operandRight";
  @SerializedName(SERIALIZED_NAME_OPERAND_RIGHT)
  @javax.annotation.Nonnull
  private CatalogFilterExpressionLiteral operandRight;

  public CatalogFilterExpression() {
  }

  public CatalogFilterExpression operandLeft(@javax.annotation.Nonnull String operandLeft) {
    this.operandLeft = operandLeft;
    return this;
  }

  /**
   * Asset property name
   * @return operandLeft
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://w3id.org/edc/v0.0.1/ns/assetId", required = true, value = "Asset property name")
  public String getOperandLeft() {
    return operandLeft;
  }

  public void setOperandLeft(@javax.annotation.Nonnull String operandLeft) {
    this.operandLeft = operandLeft;
  }

  public CatalogFilterExpression operator(@javax.annotation.Nonnull CatalogFilterExpressionOperator operator) {
    this.operator = operator;
    return this;
  }

  /**
   * Operator
   * @return operator
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Operator")
  public CatalogFilterExpressionOperator getOperator() {
    return operator;
  }

  public void setOperator(@javax.annotation.Nonnull CatalogFilterExpressionOperator operator) {
    this.operator = operator;
  }

  public CatalogFilterExpression operandRight(@javax.annotation.Nonnull CatalogFilterExpressionLiteral operandRight) {
    this.operandRight = operandRight;
    return this;
  }

  /**
   * Right Operand
   * @return operandRight
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Right Operand")
  public CatalogFilterExpressionLiteral getOperandRight() {
    return operandRight;
  }

  public void setOperandRight(@javax.annotation.Nonnull CatalogFilterExpressionLiteral operandRight) {
    this.operandRight = operandRight;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogFilterExpression {\n");
    sb.append("    operandLeft: ").append(toIndentedString(operandLeft)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    operandRight: ").append(toIndentedString(operandRight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("operandLeft");
    openapiFields.add("operator");
    openapiFields.add("operandRight");
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("operandLeft");
    openapiRequiredFields.add("operator");
    openapiRequiredFields.add("operandRight");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogFilterExpression
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!CatalogFilterExpression.openapiRequiredFields.isEmpty()) {
        // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogFilterExpression is not found in the empty JSON string", CatalogFilterExpression.openapiRequiredFields.toString()));
      }
    }
    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!CatalogFilterExpression.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogFilterExpression` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : CatalogFilterExpression.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if (!jsonObj.get("operandLeft").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `operandLeft` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operandLeft").toString()));
    }
    // validate the required field `operator`
    CatalogFilterExpressionOperator.validateJsonElement(jsonObj.get("operator"));
    // validate the required field `operandRight`
    CatalogFilterExpressionLiteral.validateJsonElement(jsonObj.get("operandRight"));
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!CatalogFilterExpression.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'CatalogFilterExpression' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<CatalogFilterExpression> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(CatalogFilterExpression.class));
      return (TypeAdapter<T>) new TypeAdapter<CatalogFilterExpression>() {
        @Override
        public void write(JsonWriter out, CatalogFilterExpression value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        @Override
        public CatalogFilterExpression read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogFilterExpression given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogFilterExpression
   * @throws IOException if the JSON string is invalid with respect to CatalogFilterExpression
   */
  public static CatalogFilterExpression fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogFilterExpression.class);
  }

  /**
   * Convert an instance of CatalogFilterExpression to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }


  public static class CatalogFilterExpressionBuilder {
    private String operandLeft;
    private CatalogFilterExpressionOperator operator;
    private CatalogFilterExpressionLiteral operandRight;

    CatalogFilterExpressionBuilder() {
    }

    /**
     * @return {@code this}.
     */
    public CatalogFilterExpression.CatalogFilterExpressionBuilder operandLeft(@javax.annotation.Nonnull final String operandLeft) {
      if (operandLeft == null) {
        throw new NullPointerException("operandLeft is marked non-null but is null");
      }
      this.operandLeft = operandLeft;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public CatalogFilterExpression.CatalogFilterExpressionBuilder operator(@javax.annotation.Nonnull final CatalogFilterExpressionOperator operator) {
      if (operator == null) {
        throw new NullPointerException("operator is marked non-null but is null");
      }
      this.operator = operator;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public CatalogFilterExpression.CatalogFilterExpressionBuilder operandRight(@javax.annotation.Nonnull final CatalogFilterExpressionLiteral operandRight) {
      if (operandRight == null) {
        throw new NullPointerException("operandRight is marked non-null but is null");
      }
      this.operandRight = operandRight;
      return this;
    }

    public CatalogFilterExpression build() {
      return new CatalogFilterExpression(this.operandLeft, this.operator, this.operandRight);
    }

    @Override
    public String toString() {
      return "CatalogFilterExpression.CatalogFilterExpressionBuilder(operandLeft=" + this.operandLeft + ", operator=" + this.operator + ", operandRight=" + this.operandRight + ")";
    }
  }

  public static CatalogFilterExpression.CatalogFilterExpressionBuilder builder() {
    return new CatalogFilterExpression.CatalogFilterExpressionBuilder();
  }

  public CatalogFilterExpression(@javax.annotation.Nonnull final String operandLeft, @javax.annotation.Nonnull final CatalogFilterExpressionOperator operator, @javax.annotation.Nonnull final CatalogFilterExpressionLiteral operandRight) {
    if (operandLeft == null) {
      throw new NullPointerException("operandLeft is marked non-null but is null");
    }
    if (operator == null) {
      throw new NullPointerException("operator is marked non-null but is null");
    }
    if (operandRight == null) {
      throw new NullPointerException("operandRight is marked non-null but is null");
    }
    this.operandLeft = operandLeft;
    this.operator = operator;
    this.operandRight = operandRight;
  }
}
