/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.ContractTerminatedBy;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import de.sovity.edc.client.gen.JSON;

/**
 * Contract&#39;s agreement metadata
 */
@ApiModel(description = "Contract's agreement metadata")
@lombok.AllArgsConstructor
@lombok.Builder
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ContractAgreementTerminationInfo {
  public static final String SERIALIZED_NAME_TERMINATED_AT = "terminatedAt";
  @SerializedName(SERIALIZED_NAME_TERMINATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime terminatedAt;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  @javax.annotation.Nonnull
  private String reason;

  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  @javax.annotation.Nonnull
  private String detail;

  public static final String SERIALIZED_NAME_TERMINATED_BY = "terminatedBy";
  @SerializedName(SERIALIZED_NAME_TERMINATED_BY)
  @javax.annotation.Nonnull
  private ContractTerminatedBy terminatedBy;

  public ContractAgreementTerminationInfo() {
  }

  public ContractAgreementTerminationInfo terminatedAt(@javax.annotation.Nonnull OffsetDateTime terminatedAt) {
    this.terminatedAt = terminatedAt;
    return this;
  }

  /**
   * Termination&#39;s date and time
   * @return terminatedAt
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Termination's date and time")
  public OffsetDateTime getTerminatedAt() {
    return terminatedAt;
  }

  public void setTerminatedAt(@javax.annotation.Nonnull OffsetDateTime terminatedAt) {
    this.terminatedAt = terminatedAt;
  }


  public ContractAgreementTerminationInfo reason(@javax.annotation.Nonnull String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * The termination&#39;s nature e.g. User Termination
   * @return reason
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The termination's nature e.g. User Termination")
  public String getReason() {
    return reason;
  }

  public void setReason(@javax.annotation.Nonnull String reason) {
    this.reason = reason;
  }


  public ContractAgreementTerminationInfo detail(@javax.annotation.Nonnull String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * Detailed message from the terminating party about why the contract was terminated.
   * @return detail
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Detailed message from the terminating party about why the contract was terminated.")
  public String getDetail() {
    return detail;
  }

  public void setDetail(@javax.annotation.Nonnull String detail) {
    this.detail = detail;
  }


  public ContractAgreementTerminationInfo terminatedBy(@javax.annotation.Nonnull ContractTerminatedBy terminatedBy) {
    this.terminatedBy = terminatedBy;
    return this;
  }

  /**
   * Indicates whether the termination comes from this EDC or the counterparty EDC.
   * @return terminatedBy
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the termination comes from this EDC or the counterparty EDC.")
  public ContractTerminatedBy getTerminatedBy() {
    return terminatedBy;
  }

  public void setTerminatedBy(@javax.annotation.Nonnull ContractTerminatedBy terminatedBy) {
    this.terminatedBy = terminatedBy;
  }



  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractAgreementTerminationInfo {\n");
    sb.append("    terminatedAt: ").append(toIndentedString(terminatedAt)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    terminatedBy: ").append(toIndentedString(terminatedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("terminatedAt");
    openapiFields.add("reason");
    openapiFields.add("detail");
    openapiFields.add("terminatedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("terminatedAt");
    openapiRequiredFields.add("reason");
    openapiRequiredFields.add("detail");
    openapiRequiredFields.add("terminatedBy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContractAgreementTerminationInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContractAgreementTerminationInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContractAgreementTerminationInfo is not found in the empty JSON string", ContractAgreementTerminationInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContractAgreementTerminationInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContractAgreementTerminationInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContractAgreementTerminationInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if (!jsonObj.get("detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detail").toString()));
      }
      // validate the required field `terminatedBy`
      ContractTerminatedBy.validateJsonElement(jsonObj.get("terminatedBy"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContractAgreementTerminationInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContractAgreementTerminationInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContractAgreementTerminationInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContractAgreementTerminationInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ContractAgreementTerminationInfo>() {
           @Override
           public void write(JsonWriter out, ContractAgreementTerminationInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContractAgreementTerminationInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContractAgreementTerminationInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContractAgreementTerminationInfo
   * @throws IOException if the JSON string is invalid with respect to ContractAgreementTerminationInfo
   */
  public static ContractAgreementTerminationInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractAgreementTerminationInfo.class);
  }

  /**
   * Convert an instance of ContractAgreementTerminationInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

