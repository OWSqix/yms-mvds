/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.UiCriterionLiteral;
import de.sovity.edc.client.gen.model.UiCriterionOperator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import de.sovity.edc.client.gen.JSON;

/**
 * Contract Definition Criterion as supported by the UI
 */
@ApiModel(description = "Contract Definition Criterion as supported by the UI")
@lombok.AllArgsConstructor
@lombok.Builder
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UiCriterion {
  public static final String SERIALIZED_NAME_OPERAND_LEFT = "operandLeft";
  @SerializedName(SERIALIZED_NAME_OPERAND_LEFT)
  @javax.annotation.Nonnull
  private String operandLeft;

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  @javax.annotation.Nonnull
  private UiCriterionOperator operator;

  public static final String SERIALIZED_NAME_OPERAND_RIGHT = "operandRight";
  @SerializedName(SERIALIZED_NAME_OPERAND_RIGHT)
  @javax.annotation.Nonnull
  private UiCriterionLiteral operandRight;

  public UiCriterion() {
  }

  public UiCriterion operandLeft(@javax.annotation.Nonnull String operandLeft) {
    this.operandLeft = operandLeft;
    return this;
  }

  /**
   * Left Operand
   * @return operandLeft
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Left Operand")
  public String getOperandLeft() {
    return operandLeft;
  }

  public void setOperandLeft(@javax.annotation.Nonnull String operandLeft) {
    this.operandLeft = operandLeft;
  }


  public UiCriterion operator(@javax.annotation.Nonnull UiCriterionOperator operator) {
    this.operator = operator;
    return this;
  }

  /**
   * Operator
   * @return operator
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Operator")
  public UiCriterionOperator getOperator() {
    return operator;
  }

  public void setOperator(@javax.annotation.Nonnull UiCriterionOperator operator) {
    this.operator = operator;
  }


  public UiCriterion operandRight(@javax.annotation.Nonnull UiCriterionLiteral operandRight) {
    this.operandRight = operandRight;
    return this;
  }

  /**
   * Right Operand
   * @return operandRight
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Right Operand")
  public UiCriterionLiteral getOperandRight() {
    return operandRight;
  }

  public void setOperandRight(@javax.annotation.Nonnull UiCriterionLiteral operandRight) {
    this.operandRight = operandRight;
  }



  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UiCriterion {\n");
    sb.append("    operandLeft: ").append(toIndentedString(operandLeft)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    operandRight: ").append(toIndentedString(operandRight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("operandLeft");
    openapiFields.add("operator");
    openapiFields.add("operandRight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("operandLeft");
    openapiRequiredFields.add("operator");
    openapiRequiredFields.add("operandRight");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UiCriterion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UiCriterion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UiCriterion is not found in the empty JSON string", UiCriterion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UiCriterion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UiCriterion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UiCriterion.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("operandLeft").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operandLeft` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operandLeft").toString()));
      }
      // validate the required field `operator`
      UiCriterionOperator.validateJsonElement(jsonObj.get("operator"));
      // validate the required field `operandRight`
      UiCriterionLiteral.validateJsonElement(jsonObj.get("operandRight"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UiCriterion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UiCriterion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UiCriterion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UiCriterion.class));

       return (TypeAdapter<T>) new TypeAdapter<UiCriterion>() {
           @Override
           public void write(JsonWriter out, UiCriterion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UiCriterion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UiCriterion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UiCriterion
   * @throws IOException if the JSON string is invalid with respect to UiCriterion
   */
  public static UiCriterion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UiCriterion.class);
  }

  /**
   * Convert an instance of UiCriterion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

