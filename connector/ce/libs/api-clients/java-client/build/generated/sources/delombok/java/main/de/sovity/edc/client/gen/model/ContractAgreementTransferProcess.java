/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.TransferProcessState;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import de.sovity.edc.client.gen.JSON;

/**
 * A Contract Agreement&#39;s Transfer Process
 */
@ApiModel(description = "A Contract Agreement\'s Transfer Process")
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ContractAgreementTransferProcess {
  public static final String SERIALIZED_NAME_TRANSFER_PROCESS_ID = "transferProcessId";
  @SerializedName(SERIALIZED_NAME_TRANSFER_PROCESS_ID)
  @javax.annotation.Nonnull
  private String transferProcessId;
  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE = "lastUpdatedDate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE)
  @javax.annotation.Nonnull
  private OffsetDateTime lastUpdatedDate;
  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nonnull
  private TransferProcessState state;
  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  @javax.annotation.Nullable
  private String errorMessage;

  public ContractAgreementTransferProcess() {
  }

  public ContractAgreementTransferProcess transferProcessId(@javax.annotation.Nonnull String transferProcessId) {
    this.transferProcessId = transferProcessId;
    return this;
  }

  /**
   * Transfer Process ID
   * @return transferProcessId
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Transfer Process ID")
  public String getTransferProcessId() {
    return transferProcessId;
  }

  public void setTransferProcessId(@javax.annotation.Nonnull String transferProcessId) {
    this.transferProcessId = transferProcessId;
  }

  public ContractAgreementTransferProcess lastUpdatedDate(@javax.annotation.Nonnull OffsetDateTime lastUpdatedDate) {
    this.lastUpdatedDate = lastUpdatedDate;
    return this;
  }

  /**
   * Last Change Date
   * @return lastUpdatedDate
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Last Change Date")
  public OffsetDateTime getLastUpdatedDate() {
    return lastUpdatedDate;
  }

  public void setLastUpdatedDate(@javax.annotation.Nonnull OffsetDateTime lastUpdatedDate) {
    this.lastUpdatedDate = lastUpdatedDate;
  }

  public ContractAgreementTransferProcess state(@javax.annotation.Nonnull TransferProcessState state) {
    this.state = state;
    return this;
  }

  /**
   * Current State
   * @return state
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Current State")
  public TransferProcessState getState() {
    return state;
  }

  public void setState(@javax.annotation.Nonnull TransferProcessState state) {
    this.state = state;
  }

  public ContractAgreementTransferProcess errorMessage(@javax.annotation.Nullable String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Error Message
   * @return errorMessage
   */
  @javax.annotation.Nullable
  @ApiModelProperty("Error Message")
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(@javax.annotation.Nullable String errorMessage) {
    this.errorMessage = errorMessage;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractAgreementTransferProcess {\n");
    sb.append("    transferProcessId: ").append(toIndentedString(transferProcessId)).append("\n");
    sb.append("    lastUpdatedDate: ").append(toIndentedString(lastUpdatedDate)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transferProcessId");
    openapiFields.add("lastUpdatedDate");
    openapiFields.add("state");
    openapiFields.add("errorMessage");
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transferProcessId");
    openapiRequiredFields.add("lastUpdatedDate");
    openapiRequiredFields.add("state");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContractAgreementTransferProcess
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!ContractAgreementTransferProcess.openapiRequiredFields.isEmpty()) {
        // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in ContractAgreementTransferProcess is not found in the empty JSON string", ContractAgreementTransferProcess.openapiRequiredFields.toString()));
      }
    }
    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!ContractAgreementTransferProcess.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContractAgreementTransferProcess` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : ContractAgreementTransferProcess.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if (!jsonObj.get("transferProcessId").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `transferProcessId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferProcessId").toString()));
    }
    // validate the required field `state`
    TransferProcessState.validateJsonElement(jsonObj.get("state"));
    if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
    }
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!ContractAgreementTransferProcess.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'ContractAgreementTransferProcess' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<ContractAgreementTransferProcess> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(ContractAgreementTransferProcess.class));
      return (TypeAdapter<T>) new TypeAdapter<ContractAgreementTransferProcess>() {
        @Override
        public void write(JsonWriter out, ContractAgreementTransferProcess value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        @Override
        public ContractAgreementTransferProcess read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of ContractAgreementTransferProcess given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContractAgreementTransferProcess
   * @throws IOException if the JSON string is invalid with respect to ContractAgreementTransferProcess
   */
  public static ContractAgreementTransferProcess fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractAgreementTransferProcess.class);
  }

  /**
   * Convert an instance of ContractAgreementTransferProcess to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }


  public static class ContractAgreementTransferProcessBuilder {
    private String transferProcessId;
    private OffsetDateTime lastUpdatedDate;
    private TransferProcessState state;
    private String errorMessage;

    ContractAgreementTransferProcessBuilder() {
    }

    /**
     * @return {@code this}.
     */
    public ContractAgreementTransferProcess.ContractAgreementTransferProcessBuilder transferProcessId(@javax.annotation.Nonnull final String transferProcessId) {
      if (transferProcessId == null) {
        throw new NullPointerException("transferProcessId is marked non-null but is null");
      }
      this.transferProcessId = transferProcessId;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public ContractAgreementTransferProcess.ContractAgreementTransferProcessBuilder lastUpdatedDate(@javax.annotation.Nonnull final OffsetDateTime lastUpdatedDate) {
      if (lastUpdatedDate == null) {
        throw new NullPointerException("lastUpdatedDate is marked non-null but is null");
      }
      this.lastUpdatedDate = lastUpdatedDate;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public ContractAgreementTransferProcess.ContractAgreementTransferProcessBuilder state(@javax.annotation.Nonnull final TransferProcessState state) {
      if (state == null) {
        throw new NullPointerException("state is marked non-null but is null");
      }
      this.state = state;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public ContractAgreementTransferProcess.ContractAgreementTransferProcessBuilder errorMessage(@javax.annotation.Nullable final String errorMessage) {
      this.errorMessage = errorMessage;
      return this;
    }

    public ContractAgreementTransferProcess build() {
      return new ContractAgreementTransferProcess(this.transferProcessId, this.lastUpdatedDate, this.state, this.errorMessage);
    }

    @Override
    public String toString() {
      return "ContractAgreementTransferProcess.ContractAgreementTransferProcessBuilder(transferProcessId=" + this.transferProcessId + ", lastUpdatedDate=" + this.lastUpdatedDate + ", state=" + this.state + ", errorMessage=" + this.errorMessage + ")";
    }
  }

  public static ContractAgreementTransferProcess.ContractAgreementTransferProcessBuilder builder() {
    return new ContractAgreementTransferProcess.ContractAgreementTransferProcessBuilder();
  }

  public ContractAgreementTransferProcess(@javax.annotation.Nonnull final String transferProcessId, @javax.annotation.Nonnull final OffsetDateTime lastUpdatedDate, @javax.annotation.Nonnull final TransferProcessState state, @javax.annotation.Nullable final String errorMessage) {
    if (transferProcessId == null) {
      throw new NullPointerException("transferProcessId is marked non-null but is null");
    }
    if (lastUpdatedDate == null) {
      throw new NullPointerException("lastUpdatedDate is marked non-null but is null");
    }
    if (state == null) {
      throw new NullPointerException("state is marked non-null but is null");
    }
    this.transferProcessId = transferProcessId;
    this.lastUpdatedDate = lastUpdatedDate;
    this.state = state;
    this.errorMessage = errorMessage;
  }
}
