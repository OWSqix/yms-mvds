/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.DataOfferPublishType;
import de.sovity.edc.client.gen.model.UiAssetCreateRequest;
import de.sovity.edc.client.gen.model.UiPolicyExpression;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import de.sovity.edc.client.gen.JSON;

/**
 * Request to create a data offer
 */
@ApiModel(description = "Request to create a data offer")
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class DataOfferCreateRequest {
  public static final String SERIALIZED_NAME_ASSET = "asset";
  @SerializedName(SERIALIZED_NAME_ASSET)
  @javax.annotation.Nonnull
  private UiAssetCreateRequest asset;
  public static final String SERIALIZED_NAME_PUBLISH_TYPE = "publishType";
  @SerializedName(SERIALIZED_NAME_PUBLISH_TYPE)
  @javax.annotation.Nonnull
  private DataOfferPublishType publishType;
  public static final String SERIALIZED_NAME_POLICY_EXPRESSION = "policyExpression";
  @SerializedName(SERIALIZED_NAME_POLICY_EXPRESSION)
  @javax.annotation.Nullable
  private UiPolicyExpression policyExpression;

  public DataOfferCreateRequest() {
  }

  public DataOfferCreateRequest asset(@javax.annotation.Nonnull UiAssetCreateRequest asset) {
    this.asset = asset;
    return this;
  }

  /**
   * The asset to create
   * @return asset
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The asset to create")
  public UiAssetCreateRequest getAsset() {
    return asset;
  }

  public void setAsset(@javax.annotation.Nonnull UiAssetCreateRequest asset) {
    this.asset = asset;
  }

  public DataOfferCreateRequest publishType(@javax.annotation.Nonnull DataOfferPublishType publishType) {
    this.publishType = publishType;
    return this;
  }

  /**
   * Get publishType
   * @return publishType
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  public DataOfferPublishType getPublishType() {
    return publishType;
  }

  public void setPublishType(@javax.annotation.Nonnull DataOfferPublishType publishType) {
    this.publishType = publishType;
  }

  public DataOfferCreateRequest policyExpression(@javax.annotation.Nullable UiPolicyExpression policyExpression) {
    this.policyExpression = policyExpression;
    return this;
  }

  /**
   * Policy Expression. Only relevant if policyType is &#39;RESTRICTED&#39;
   * @return policyExpression
   */
  @javax.annotation.Nullable
  @ApiModelProperty("Policy Expression. Only relevant if policyType is \'RESTRICTED\'")
  public UiPolicyExpression getPolicyExpression() {
    return policyExpression;
  }

  public void setPolicyExpression(@javax.annotation.Nullable UiPolicyExpression policyExpression) {
    this.policyExpression = policyExpression;
  }

  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataOfferCreateRequest {\n");
    sb.append("    asset: ").append(toIndentedString(asset)).append("\n");
    sb.append("    publishType: ").append(toIndentedString(publishType)).append("\n");
    sb.append("    policyExpression: ").append(toIndentedString(policyExpression)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asset");
    openapiFields.add("publishType");
    openapiFields.add("policyExpression");
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("asset");
    openapiRequiredFields.add("publishType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataOfferCreateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!DataOfferCreateRequest.openapiRequiredFields.isEmpty()) {
        // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in DataOfferCreateRequest is not found in the empty JSON string", DataOfferCreateRequest.openapiRequiredFields.toString()));
      }
    }
    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!DataOfferCreateRequest.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataOfferCreateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : DataOfferCreateRequest.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // validate the required field `asset`
    UiAssetCreateRequest.validateJsonElement(jsonObj.get("asset"));
    // validate the required field `publishType`
    DataOfferPublishType.validateJsonElement(jsonObj.get("publishType"));
    // validate the optional field `policyExpression`
    if (jsonObj.get("policyExpression") != null && !jsonObj.get("policyExpression").isJsonNull()) {
      UiPolicyExpression.validateJsonElement(jsonObj.get("policyExpression"));
    }
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!DataOfferCreateRequest.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'DataOfferCreateRequest' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<DataOfferCreateRequest> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(DataOfferCreateRequest.class));
      return (TypeAdapter<T>) new TypeAdapter<DataOfferCreateRequest>() {
        @Override
        public void write(JsonWriter out, DataOfferCreateRequest value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        @Override
        public DataOfferCreateRequest read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of DataOfferCreateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataOfferCreateRequest
   * @throws IOException if the JSON string is invalid with respect to DataOfferCreateRequest
   */
  public static DataOfferCreateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataOfferCreateRequest.class);
  }

  /**
   * Convert an instance of DataOfferCreateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }


  public static class DataOfferCreateRequestBuilder {
    private UiAssetCreateRequest asset;
    private DataOfferPublishType publishType;
    private UiPolicyExpression policyExpression;

    DataOfferCreateRequestBuilder() {
    }

    /**
     * @return {@code this}.
     */
    public DataOfferCreateRequest.DataOfferCreateRequestBuilder asset(@javax.annotation.Nonnull final UiAssetCreateRequest asset) {
      if (asset == null) {
        throw new NullPointerException("asset is marked non-null but is null");
      }
      this.asset = asset;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DataOfferCreateRequest.DataOfferCreateRequestBuilder publishType(@javax.annotation.Nonnull final DataOfferPublishType publishType) {
      if (publishType == null) {
        throw new NullPointerException("publishType is marked non-null but is null");
      }
      this.publishType = publishType;
      return this;
    }

    /**
     * @return {@code this}.
     */
    public DataOfferCreateRequest.DataOfferCreateRequestBuilder policyExpression(@javax.annotation.Nullable final UiPolicyExpression policyExpression) {
      this.policyExpression = policyExpression;
      return this;
    }

    public DataOfferCreateRequest build() {
      return new DataOfferCreateRequest(this.asset, this.publishType, this.policyExpression);
    }

    @Override
    public String toString() {
      return "DataOfferCreateRequest.DataOfferCreateRequestBuilder(asset=" + this.asset + ", publishType=" + this.publishType + ", policyExpression=" + this.policyExpression + ")";
    }
  }

  public static DataOfferCreateRequest.DataOfferCreateRequestBuilder builder() {
    return new DataOfferCreateRequest.DataOfferCreateRequestBuilder();
  }

  public DataOfferCreateRequest(@javax.annotation.Nonnull final UiAssetCreateRequest asset, @javax.annotation.Nonnull final DataOfferPublishType publishType, @javax.annotation.Nullable final UiPolicyExpression policyExpression) {
    if (asset == null) {
      throw new NullPointerException("asset is marked non-null but is null");
    }
    if (publishType == null) {
      throw new NullPointerException("publishType is marked non-null but is null");
    }
    this.asset = asset;
    this.publishType = publishType;
    this.policyExpression = policyExpression;
  }
}
