/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.ContractNegotiationState;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import de.sovity.edc.client.gen.JSON;

/**
 * Contract Negotiation Information
 */
@ApiModel(description = "Contract Negotiation Information")
@lombok.AllArgsConstructor
@lombok.Builder
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UiContractNegotiation {
  public static final String SERIALIZED_NAME_CONTRACT_NEGOTIATION_ID = "contractNegotiationId";
  @SerializedName(SERIALIZED_NAME_CONTRACT_NEGOTIATION_ID)
  @javax.annotation.Nonnull
  private String contractNegotiationId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CONTRACT_AGREEMENT_ID = "contractAgreementId";
  @SerializedName(SERIALIZED_NAME_CONTRACT_AGREEMENT_ID)
  @javax.annotation.Nullable
  private String contractAgreementId;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nonnull
  private ContractNegotiationState state;

  public UiContractNegotiation() {
  }

  public UiContractNegotiation contractNegotiationId(@javax.annotation.Nonnull String contractNegotiationId) {
    this.contractNegotiationId = contractNegotiationId;
    return this;
  }

  /**
   * Contract Negotiation Id
   * @return contractNegotiationId
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Contract Negotiation Id")
  public String getContractNegotiationId() {
    return contractNegotiationId;
  }

  public void setContractNegotiationId(@javax.annotation.Nonnull String contractNegotiationId) {
    this.contractNegotiationId = contractNegotiationId;
  }


  public UiContractNegotiation createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Contract Negotiation Creation Time
   * @return createdAt
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Contract Negotiation Creation Time")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public UiContractNegotiation contractAgreementId(@javax.annotation.Nullable String contractAgreementId) {
    this.contractAgreementId = contractAgreementId;
    return this;
  }

  /**
   * Contract Agreement Id
   * @return contractAgreementId
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Contract Agreement Id")
  public String getContractAgreementId() {
    return contractAgreementId;
  }

  public void setContractAgreementId(@javax.annotation.Nullable String contractAgreementId) {
    this.contractAgreementId = contractAgreementId;
  }


  public UiContractNegotiation state(@javax.annotation.Nonnull ContractNegotiationState state) {
    this.state = state;
    return this;
  }

  /**
   * State of the Contract Negotiation state machine
   * @return state
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "State of the Contract Negotiation state machine")
  public ContractNegotiationState getState() {
    return state;
  }

  public void setState(@javax.annotation.Nonnull ContractNegotiationState state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UiContractNegotiation {\n");
    sb.append("    contractNegotiationId: ").append(toIndentedString(contractNegotiationId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    contractAgreementId: ").append(toIndentedString(contractAgreementId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contractNegotiationId");
    openapiFields.add("createdAt");
    openapiFields.add("contractAgreementId");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contractNegotiationId");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("state");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UiContractNegotiation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UiContractNegotiation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UiContractNegotiation is not found in the empty JSON string", UiContractNegotiation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UiContractNegotiation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UiContractNegotiation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UiContractNegotiation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("contractNegotiationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractNegotiationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractNegotiationId").toString()));
      }
      if ((jsonObj.get("contractAgreementId") != null && !jsonObj.get("contractAgreementId").isJsonNull()) && !jsonObj.get("contractAgreementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractAgreementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractAgreementId").toString()));
      }
      // validate the required field `state`
      ContractNegotiationState.validateJsonElement(jsonObj.get("state"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UiContractNegotiation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UiContractNegotiation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UiContractNegotiation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UiContractNegotiation.class));

       return (TypeAdapter<T>) new TypeAdapter<UiContractNegotiation>() {
           @Override
           public void write(JsonWriter out, UiContractNegotiation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UiContractNegotiation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UiContractNegotiation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UiContractNegotiation
   * @throws IOException if the JSON string is invalid with respect to UiContractNegotiation
   */
  public static UiContractNegotiation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UiContractNegotiation.class);
  }

  /**
   * Convert an instance of UiContractNegotiation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

