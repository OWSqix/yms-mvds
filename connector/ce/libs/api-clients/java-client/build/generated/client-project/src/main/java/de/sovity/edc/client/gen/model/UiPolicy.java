/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.UiPolicyExpression;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import de.sovity.edc.client.gen.JSON;

/**
 * Type-Safe OpenAPI generator friendly ODLR policy subset as endorsed by sovity.
 */
@ApiModel(description = "Type-Safe OpenAPI generator friendly ODLR policy subset as endorsed by sovity.")
@lombok.AllArgsConstructor
@lombok.Builder
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UiPolicy {
  public static final String SERIALIZED_NAME_POLICY_JSON_LD = "policyJsonLd";
  @SerializedName(SERIALIZED_NAME_POLICY_JSON_LD)
  @javax.annotation.Nonnull
  private String policyJsonLd;

  public static final String SERIALIZED_NAME_EXPRESSION = "expression";
  @SerializedName(SERIALIZED_NAME_EXPRESSION)
  @javax.annotation.Nullable
  private UiPolicyExpression expression;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  @javax.annotation.Nonnull
  private List<String> errors = new ArrayList<>();

  public UiPolicy() {
  }

  public UiPolicy policyJsonLd(@javax.annotation.Nonnull String policyJsonLd) {
    this.policyJsonLd = policyJsonLd;
    return this;
  }

  /**
   * EDC Policy JSON-LD. This is required because the EDC requires the full policy when initiating contract negotiations.
   * @return policyJsonLd
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "EDC Policy JSON-LD. This is required because the EDC requires the full policy when initiating contract negotiations.")
  public String getPolicyJsonLd() {
    return policyJsonLd;
  }

  public void setPolicyJsonLd(@javax.annotation.Nonnull String policyJsonLd) {
    this.policyJsonLd = policyJsonLd;
  }


  public UiPolicy expression(@javax.annotation.Nullable UiPolicyExpression expression) {
    this.expression = expression;
    return this;
  }

  /**
   * Policy expression
   * @return expression
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Policy expression")
  public UiPolicyExpression getExpression() {
    return expression;
  }

  public void setExpression(@javax.annotation.Nullable UiPolicyExpression expression) {
    this.expression = expression;
  }


  public UiPolicy errors(@javax.annotation.Nonnull List<String> errors) {
    this.errors = errors;
    return this;
  }

  public UiPolicy addErrorsItem(String errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * When trying to reduce the policy JSON-LD to our opinionated subset of functionalities, many fields and functionalities are unsupported. Should any discrepancies occur during the mapping process, we&#39;ll collect them here.
   * @return errors
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "When trying to reduce the policy JSON-LD to our opinionated subset of functionalities, many fields and functionalities are unsupported. Should any discrepancies occur during the mapping process, we'll collect them here.")
  public List<String> getErrors() {
    return errors;
  }

  public void setErrors(@javax.annotation.Nonnull List<String> errors) {
    this.errors = errors;
  }



  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UiPolicy {\n");
    sb.append("    policyJsonLd: ").append(toIndentedString(policyJsonLd)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("policyJsonLd");
    openapiFields.add("expression");
    openapiFields.add("errors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("policyJsonLd");
    openapiRequiredFields.add("errors");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UiPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UiPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UiPolicy is not found in the empty JSON string", UiPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UiPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UiPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UiPolicy.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("policyJsonLd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyJsonLd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyJsonLd").toString()));
      }
      // validate the optional field `expression`
      if (jsonObj.get("expression") != null && !jsonObj.get("expression").isJsonNull()) {
        UiPolicyExpression.validateJsonElement(jsonObj.get("expression"));
      }
      // ensure the required json array is present
      if (jsonObj.get("errors") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UiPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UiPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UiPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UiPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<UiPolicy>() {
           @Override
           public void write(JsonWriter out, UiPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UiPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UiPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UiPolicy
   * @throws IOException if the JSON string is invalid with respect to UiPolicy
   */
  public static UiPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UiPolicy.class);
  }

  /**
   * Convert an instance of UiPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

