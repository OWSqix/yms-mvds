/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.CatalogFilterExpressionLiteralType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import de.sovity.edc.client.gen.JSON;

/**
 * FilterExpression Criterion Literal
 */
@ApiModel(description = "FilterExpression Criterion Literal")
@lombok.AllArgsConstructor
@lombok.Builder
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class CatalogFilterExpressionLiteral {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private CatalogFilterExpressionLiteralType type;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nullable
  private String value;

  public static final String SERIALIZED_NAME_VALUE_LIST = "valueList";
  @SerializedName(SERIALIZED_NAME_VALUE_LIST)
  @javax.annotation.Nullable
  private List<String> valueList = new ArrayList<>();

  public CatalogFilterExpressionLiteral() {
  }

  public CatalogFilterExpressionLiteral type(@javax.annotation.Nullable CatalogFilterExpressionLiteralType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  public CatalogFilterExpressionLiteralType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable CatalogFilterExpressionLiteralType type) {
    this.type = type;
  }


  public CatalogFilterExpressionLiteral value(@javax.annotation.Nullable String value) {
    this.value = value;
    return this;
  }

  /**
   * Only for type VALUE. The single value representation.
   * @return value
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only for type VALUE. The single value representation.")
  public String getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nullable String value) {
    this.value = value;
  }


  public CatalogFilterExpressionLiteral valueList(@javax.annotation.Nullable List<String> valueList) {
    this.valueList = valueList;
    return this;
  }

  public CatalogFilterExpressionLiteral addValueListItem(String valueListItem) {
    if (this.valueList == null) {
      this.valueList = new ArrayList<>();
    }
    this.valueList.add(valueListItem);
    return this;
  }

  /**
   * Only for type VALUE_LIST. List of values, e.g. for the IN-Operator.
   * @return valueList
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only for type VALUE_LIST. List of values, e.g. for the IN-Operator.")
  public List<String> getValueList() {
    return valueList;
  }

  public void setValueList(@javax.annotation.Nullable List<String> valueList) {
    this.valueList = valueList;
  }



  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogFilterExpressionLiteral {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    valueList: ").append(toIndentedString(valueList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("value");
    openapiFields.add("valueList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogFilterExpressionLiteral
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogFilterExpressionLiteral.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogFilterExpressionLiteral is not found in the empty JSON string", CatalogFilterExpressionLiteral.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogFilterExpressionLiteral.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogFilterExpressionLiteral` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        CatalogFilterExpressionLiteralType.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("valueList") != null && !jsonObj.get("valueList").isJsonNull() && !jsonObj.get("valueList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueList` to be an array in the JSON string but got `%s`", jsonObj.get("valueList").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogFilterExpressionLiteral.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogFilterExpressionLiteral' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogFilterExpressionLiteral> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogFilterExpressionLiteral.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogFilterExpressionLiteral>() {
           @Override
           public void write(JsonWriter out, CatalogFilterExpressionLiteral value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogFilterExpressionLiteral read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogFilterExpressionLiteral given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogFilterExpressionLiteral
   * @throws IOException if the JSON string is invalid with respect to CatalogFilterExpressionLiteral
   */
  public static CatalogFilterExpressionLiteral fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogFilterExpressionLiteral.class);
  }

  /**
   * Convert an instance of CatalogFilterExpressionLiteral to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

