/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.CatalogFilterExpression;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import de.sovity.edc.client.gen.JSON;

/**
 * Catalog query parameters
 */
@ApiModel(description = "Catalog query parameters")
@lombok.AllArgsConstructor
@lombok.Builder
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class CatalogQuery {
  public static final String SERIALIZED_NAME_CONNECTOR_ENDPOINT = "connectorEndpoint";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_ENDPOINT)
  @javax.annotation.Nonnull
  private String connectorEndpoint;

  public static final String SERIALIZED_NAME_PARTICIPANT_ID = "participantId";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_ID)
  @javax.annotation.Nullable
  private String participantId;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  @javax.annotation.Nullable
  private Integer limit;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  @javax.annotation.Nullable
  private Integer offset;

  public static final String SERIALIZED_NAME_FILTER_EXPRESSIONS = "filterExpressions";
  @SerializedName(SERIALIZED_NAME_FILTER_EXPRESSIONS)
  @javax.annotation.Nullable
  private List<CatalogFilterExpression> filterExpressions = new ArrayList<>();

  public CatalogQuery() {
  }

  public CatalogQuery connectorEndpoint(@javax.annotation.Nonnull String connectorEndpoint) {
    this.connectorEndpoint = connectorEndpoint;
    return this;
  }

  /**
   * Target EDC DSP endpoint URL. Can contain a queryParam &#39;participantId&#39;, which is provided by default in the Connector Endpoint in the EDC UI.
   * @return connectorEndpoint
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Target EDC DSP endpoint URL. Can contain a queryParam 'participantId', which is provided by default in the Connector Endpoint in the EDC UI.")
  public String getConnectorEndpoint() {
    return connectorEndpoint;
  }

  public void setConnectorEndpoint(@javax.annotation.Nonnull String connectorEndpoint) {
    this.connectorEndpoint = connectorEndpoint;
  }


  public CatalogQuery participantId(@javax.annotation.Nullable String participantId) {
    this.participantId = participantId;
    return this;
  }

  /**
   * Target EDC Participant ID. It is required if the connector endpoint does not contain the queryParam &#39;participantId&#39;.
   * @return participantId
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Target EDC Participant ID. It is required if the connector endpoint does not contain the queryParam 'participantId'.")
  public String getParticipantId() {
    return participantId;
  }

  public void setParticipantId(@javax.annotation.Nullable String participantId) {
    this.participantId = participantId;
  }


  public CatalogQuery limit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Limit the number of results
   * @return limit
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Limit the number of results")
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
  }


  public CatalogQuery offset(@javax.annotation.Nullable Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Offset for returned results, e.g. start at result 2
   * @return offset
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Offset for returned results, e.g. start at result 2")
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(@javax.annotation.Nullable Integer offset) {
    this.offset = offset;
  }


  public CatalogQuery filterExpressions(@javax.annotation.Nullable List<CatalogFilterExpression> filterExpressions) {
    this.filterExpressions = filterExpressions;
    return this;
  }

  public CatalogQuery addFilterExpressionsItem(CatalogFilterExpression filterExpressionsItem) {
    if (this.filterExpressions == null) {
      this.filterExpressions = new ArrayList<>();
    }
    this.filterExpressions.add(filterExpressionsItem);
    return this;
  }

  /**
   * Filter expressions for catalog filtering
   * @return filterExpressions
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter expressions for catalog filtering")
  public List<CatalogFilterExpression> getFilterExpressions() {
    return filterExpressions;
  }

  public void setFilterExpressions(@javax.annotation.Nullable List<CatalogFilterExpression> filterExpressions) {
    this.filterExpressions = filterExpressions;
  }



  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogQuery {\n");
    sb.append("    connectorEndpoint: ").append(toIndentedString(connectorEndpoint)).append("\n");
    sb.append("    participantId: ").append(toIndentedString(participantId)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    filterExpressions: ").append(toIndentedString(filterExpressions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectorEndpoint");
    openapiFields.add("participantId");
    openapiFields.add("limit");
    openapiFields.add("offset");
    openapiFields.add("filterExpressions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("connectorEndpoint");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogQuery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogQuery is not found in the empty JSON string", CatalogQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CatalogQuery.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("connectorEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorEndpoint").toString()));
      }
      if ((jsonObj.get("participantId") != null && !jsonObj.get("participantId").isJsonNull()) && !jsonObj.get("participantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participantId").toString()));
      }
      if (jsonObj.get("filterExpressions") != null && !jsonObj.get("filterExpressions").isJsonNull()) {
        JsonArray jsonArrayfilterExpressions = jsonObj.getAsJsonArray("filterExpressions");
        if (jsonArrayfilterExpressions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filterExpressions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filterExpressions` to be an array in the JSON string but got `%s`", jsonObj.get("filterExpressions").toString()));
          }

          // validate the optional field `filterExpressions` (array)
          for (int i = 0; i < jsonArrayfilterExpressions.size(); i++) {
            CatalogFilterExpression.validateJsonElement(jsonArrayfilterExpressions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogQuery>() {
           @Override
           public void write(JsonWriter out, CatalogQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogQuery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogQuery
   * @throws IOException if the JSON string is invalid with respect to CatalogQuery
   */
  public static CatalogQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogQuery.class);
  }

  /**
   * Convert an instance of CatalogQuery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

