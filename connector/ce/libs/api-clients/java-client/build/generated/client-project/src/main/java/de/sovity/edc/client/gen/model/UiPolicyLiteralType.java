/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Supported Types of values for the right hand side of an expression
 */
@JsonAdapter(UiPolicyLiteralType.Adapter.class)
public enum UiPolicyLiteralType {
  
  STRING("STRING"),
  
  STRING_LIST("STRING_LIST"),
  
  JSON("JSON");

  private String value;

  UiPolicyLiteralType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static UiPolicyLiteralType fromValue(String value) {
    for (UiPolicyLiteralType b : UiPolicyLiteralType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<UiPolicyLiteralType> {
    @Override
    public void write(final JsonWriter jsonWriter, final UiPolicyLiteralType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public UiPolicyLiteralType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return UiPolicyLiteralType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    UiPolicyLiteralType.fromValue(value);
  }
}

