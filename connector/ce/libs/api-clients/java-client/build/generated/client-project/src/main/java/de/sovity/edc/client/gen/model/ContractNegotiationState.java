/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.ContractNegotiationSimplifiedState;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import de.sovity.edc.client.gen.JSON;

/**
 * Contract Negotiation State interpreted
 */
@ApiModel(description = "Contract Negotiation State interpreted")
@lombok.AllArgsConstructor
@lombok.Builder
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ContractNegotiationState {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nonnull
  private Integer code;

  public static final String SERIALIZED_NAME_SIMPLIFIED_STATE = "simplifiedState";
  @SerializedName(SERIALIZED_NAME_SIMPLIFIED_STATE)
  @javax.annotation.Nonnull
  private ContractNegotiationSimplifiedState simplifiedState;

  public ContractNegotiationState() {
  }

  public ContractNegotiationState name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * State name or &#39;CUSTOM&#39;. State names only exist for original EDC Contract Negotiation States.
   * @return name
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "State name or 'CUSTOM'. State names only exist for original EDC Contract Negotiation States.")
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public ContractNegotiationState code(@javax.annotation.Nonnull Integer code) {
    this.code = code;
    return this;
  }

  /**
   * State code
   * @return code
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "State code")
  public Integer getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nonnull Integer code) {
    this.code = code;
  }


  public ContractNegotiationState simplifiedState(@javax.annotation.Nonnull ContractNegotiationSimplifiedState simplifiedState) {
    this.simplifiedState = simplifiedState;
    return this;
  }

  /**
   * Whether we are running, in an error state or done.
   * @return simplifiedState
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether we are running, in an error state or done.")
  public ContractNegotiationSimplifiedState getSimplifiedState() {
    return simplifiedState;
  }

  public void setSimplifiedState(@javax.annotation.Nonnull ContractNegotiationSimplifiedState simplifiedState) {
    this.simplifiedState = simplifiedState;
  }



  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractNegotiationState {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    simplifiedState: ").append(toIndentedString(simplifiedState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("code");
    openapiFields.add("simplifiedState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("simplifiedState");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContractNegotiationState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContractNegotiationState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContractNegotiationState is not found in the empty JSON string", ContractNegotiationState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContractNegotiationState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContractNegotiationState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContractNegotiationState.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `simplifiedState`
      ContractNegotiationSimplifiedState.validateJsonElement(jsonObj.get("simplifiedState"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContractNegotiationState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContractNegotiationState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContractNegotiationState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContractNegotiationState.class));

       return (TypeAdapter<T>) new TypeAdapter<ContractNegotiationState>() {
           @Override
           public void write(JsonWriter out, ContractNegotiationState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContractNegotiationState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContractNegotiationState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContractNegotiationState
   * @throws IOException if the JSON string is invalid with respect to ContractNegotiationState
   */
  public static ContractNegotiationState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractNegotiationState.class);
  }

  /**
   * Convert an instance of ContractNegotiationState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

