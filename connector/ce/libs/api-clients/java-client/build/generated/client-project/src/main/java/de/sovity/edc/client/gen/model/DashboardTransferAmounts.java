/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import de.sovity.edc.client.gen.JSON;

/**
 * Number of Transfer Processes for given direction.
 */
@ApiModel(description = "Number of Transfer Processes for given direction.")
@lombok.AllArgsConstructor
@lombok.Builder
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class DashboardTransferAmounts {
  public static final String SERIALIZED_NAME_NUM_TOTAL = "numTotal";
  @SerializedName(SERIALIZED_NAME_NUM_TOTAL)
  @javax.annotation.Nonnull
  private Long numTotal;

  public static final String SERIALIZED_NAME_NUM_RUNNING = "numRunning";
  @SerializedName(SERIALIZED_NAME_NUM_RUNNING)
  @javax.annotation.Nonnull
  private Long numRunning;

  public static final String SERIALIZED_NAME_NUM_OK = "numOk";
  @SerializedName(SERIALIZED_NAME_NUM_OK)
  @javax.annotation.Nonnull
  private Long numOk;

  public static final String SERIALIZED_NAME_NUM_ERROR = "numError";
  @SerializedName(SERIALIZED_NAME_NUM_ERROR)
  @javax.annotation.Nonnull
  private Long numError;

  public DashboardTransferAmounts() {
  }

  public DashboardTransferAmounts numTotal(@javax.annotation.Nonnull Long numTotal) {
    this.numTotal = numTotal;
    return this;
  }

  /**
   * Number of Transfer Processes
   * @return numTotal
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Number of Transfer Processes")
  public Long getNumTotal() {
    return numTotal;
  }

  public void setNumTotal(@javax.annotation.Nonnull Long numTotal) {
    this.numTotal = numTotal;
  }


  public DashboardTransferAmounts numRunning(@javax.annotation.Nonnull Long numRunning) {
    this.numRunning = numRunning;
    return this;
  }

  /**
   * Number of running Transfer Processes
   * @return numRunning
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Number of running Transfer Processes")
  public Long getNumRunning() {
    return numRunning;
  }

  public void setNumRunning(@javax.annotation.Nonnull Long numRunning) {
    this.numRunning = numRunning;
  }


  public DashboardTransferAmounts numOk(@javax.annotation.Nonnull Long numOk) {
    this.numOk = numOk;
    return this;
  }

  /**
   * Number of successful Transfer Processes
   * @return numOk
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Number of successful Transfer Processes")
  public Long getNumOk() {
    return numOk;
  }

  public void setNumOk(@javax.annotation.Nonnull Long numOk) {
    this.numOk = numOk;
  }


  public DashboardTransferAmounts numError(@javax.annotation.Nonnull Long numError) {
    this.numError = numError;
    return this;
  }

  /**
   * Number of failed Transfer Processes
   * @return numError
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Number of failed Transfer Processes")
  public Long getNumError() {
    return numError;
  }

  public void setNumError(@javax.annotation.Nonnull Long numError) {
    this.numError = numError;
  }



  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DashboardTransferAmounts {\n");
    sb.append("    numTotal: ").append(toIndentedString(numTotal)).append("\n");
    sb.append("    numRunning: ").append(toIndentedString(numRunning)).append("\n");
    sb.append("    numOk: ").append(toIndentedString(numOk)).append("\n");
    sb.append("    numError: ").append(toIndentedString(numError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("numTotal");
    openapiFields.add("numRunning");
    openapiFields.add("numOk");
    openapiFields.add("numError");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("numTotal");
    openapiRequiredFields.add("numRunning");
    openapiRequiredFields.add("numOk");
    openapiRequiredFields.add("numError");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DashboardTransferAmounts
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DashboardTransferAmounts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DashboardTransferAmounts is not found in the empty JSON string", DashboardTransferAmounts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DashboardTransferAmounts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DashboardTransferAmounts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DashboardTransferAmounts.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DashboardTransferAmounts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DashboardTransferAmounts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DashboardTransferAmounts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DashboardTransferAmounts.class));

       return (TypeAdapter<T>) new TypeAdapter<DashboardTransferAmounts>() {
           @Override
           public void write(JsonWriter out, DashboardTransferAmounts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DashboardTransferAmounts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DashboardTransferAmounts given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DashboardTransferAmounts
   * @throws IOException if the JSON string is invalid with respect to DashboardTransferAmounts
   */
  public static DashboardTransferAmounts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DashboardTransferAmounts.class);
  }

  /**
   * Convert an instance of DashboardTransferAmounts to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

