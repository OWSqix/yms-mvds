/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.sovity.edc.client.gen.api;

import de.sovity.edc.client.gen.ApiException;
import de.sovity.edc.client.gen.model.AssetPage;
import de.sovity.edc.client.gen.model.BuildInfo;
import de.sovity.edc.client.gen.model.ContractAgreementCard;
import de.sovity.edc.client.gen.model.ContractAgreementPage;
import de.sovity.edc.client.gen.model.ContractAgreementPageQuery;
import de.sovity.edc.client.gen.model.ContractDefinitionPage;
import de.sovity.edc.client.gen.model.ContractDefinitionRequest;
import de.sovity.edc.client.gen.model.ContractNegotiationRequest;
import de.sovity.edc.client.gen.model.ContractTerminationRequest;
import de.sovity.edc.client.gen.model.DashboardPage;
import de.sovity.edc.client.gen.model.DataOfferCreateRequest;
import de.sovity.edc.client.gen.model.IdAvailabilityResponse;
import de.sovity.edc.client.gen.model.IdResponseDto;
import de.sovity.edc.client.gen.model.InitiateCustomTransferRequest;
import de.sovity.edc.client.gen.model.InitiateTransferRequest;
import de.sovity.edc.client.gen.model.PolicyDefinitionCreateDto;
import de.sovity.edc.client.gen.model.PolicyDefinitionCreateRequest;
import de.sovity.edc.client.gen.model.PolicyDefinitionPage;
import de.sovity.edc.client.gen.model.TransferHistoryPage;
import de.sovity.edc.client.gen.model.UiAsset;
import de.sovity.edc.client.gen.model.UiAssetCreateRequest;
import de.sovity.edc.client.gen.model.UiAssetEditRequest;
import de.sovity.edc.client.gen.model.UiContractNegotiation;
import de.sovity.edc.client.gen.model.UiDataOffer;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UiApi
 */
@Disabled
public class UiApiTest {

    private final UiApi api = new UiApi();

    /**
     * Get the build version info
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildInfoTest() throws ApiException {
        BuildInfo response = api.buildInfo();
        // TODO: test validations
    }

    /**
     * Create a new Asset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAssetTest() throws ApiException {
        UiAssetCreateRequest uiAssetCreateRequest = null;
        IdResponseDto response = api.createAsset(uiAssetCreateRequest);
        // TODO: test validations
    }

    /**
     * Create a new Contract Definition
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContractDefinitionTest() throws ApiException {
        ContractDefinitionRequest contractDefinitionRequest = null;
        IdResponseDto response = api.createContractDefinition(contractDefinitionRequest);
        // TODO: test validations
    }

    /**
     * Create a new asset, contract definition and optional policies. Uses the same id for the asset, the contract policy, the access policy and the contract definition
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDataOfferTest() throws ApiException {
        DataOfferCreateRequest dataOfferCreateRequest = null;
        IdResponseDto response = api.createDataOffer(dataOfferCreateRequest);
        // TODO: test validations
    }

    /**
     * [Deprecated] Create a new Policy Definition from a list of constraints. Use createPolicyDefinitionV2 instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPolicyDefinitionTest() throws ApiException {
        PolicyDefinitionCreateRequest policyDefinitionCreateRequest = null;
        IdResponseDto response = api.createPolicyDefinition(policyDefinitionCreateRequest);
        // TODO: test validations
    }

    /**
     * Create a new Policy Definition
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPolicyDefinitionV2Test() throws ApiException {
        PolicyDefinitionCreateDto policyDefinitionCreateDto = null;
        IdResponseDto response = api.createPolicyDefinitionV2(policyDefinitionCreateDto);
        // TODO: test validations
    }

    /**
     * Delete an Asset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAssetTest() throws ApiException {
        String assetId = null;
        IdResponseDto response = api.deleteAsset(assetId);
        // TODO: test validations
    }

    /**
     * Delete a Contract Definition
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContractDefinitionTest() throws ApiException {
        String contractDefinitionId = null;
        IdResponseDto response = api.deleteContractDefinition(contractDefinitionId);
        // TODO: test validations
    }

    /**
     * Delete a Policy Definition
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePolicyDefinitionTest() throws ApiException {
        String policyId = null;
        IdResponseDto response = api.deletePolicyDefinition(policyId);
        // TODO: test validations
    }

    /**
     * Updates an Asset&#39;s metadata and optionally also the data source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editAssetTest() throws ApiException {
        String assetId = null;
        UiAssetEditRequest uiAssetEditRequest = null;
        IdResponseDto response = api.editAsset(assetId, uiAssetEditRequest);
        // TODO: test validations
    }

    /**
     * Collect all data for Asset Page
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssetPageTest() throws ApiException {
        AssetPage response = api.getAssetPage();
        // TODO: test validations
    }

    /**
     * Fetch a connector&#39;s data offers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCatalogPageDataOffersTest() throws ApiException {
        String participantId = null;
        String connectorEndpoint = null;
        List<UiDataOffer> response = api.getCatalogPageDataOffers(participantId, connectorEndpoint);
        // TODO: test validations
    }

    /**
     * Get a single contract agreement card by its identifier
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContractAgreementCardTest() throws ApiException {
        String contractAgreementId = null;
        ContractAgreementCard response = api.getContractAgreementCard(contractAgreementId);
        // TODO: test validations
    }

    /**
     * Collect filtered data for the Contract Agreement Page
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContractAgreementPageTest() throws ApiException {
        ContractAgreementPageQuery contractAgreementPageQuery = null;
        ContractAgreementPage response = api.getContractAgreementPage(contractAgreementPageQuery);
        // TODO: test validations
    }

    /**
     * Collect all data for Contract Definition Page
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContractDefinitionPageTest() throws ApiException {
        ContractDefinitionPage response = api.getContractDefinitionPage();
        // TODO: test validations
    }

    /**
     * Get Contract Negotiation Information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContractNegotiationTest() throws ApiException {
        String contractNegotiationId = null;
        UiContractNegotiation response = api.getContractNegotiation(contractNegotiationId);
        // TODO: test validations
    }

    /**
     * Collect all data for the Dashboard Page
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDashboardPageTest() throws ApiException {
        DashboardPage response = api.getDashboardPage();
        // TODO: test validations
    }

    /**
     * Collect all data for Policy Definition Page
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPolicyDefinitionPageTest() throws ApiException {
        PolicyDefinitionPage response = api.getPolicyDefinitionPage();
        // TODO: test validations
    }

    /**
     * Collect all data for the Transfer History Page
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransferHistoryPageTest() throws ApiException {
        TransferHistoryPage response = api.getTransferHistoryPage();
        // TODO: test validations
    }

    /**
     * Queries a transfer process&#39; asset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransferProcessAssetTest() throws ApiException {
        String transferProcessId = null;
        UiAsset response = api.getTransferProcessAsset(transferProcessId);
        // TODO: test validations
    }

    /**
     * Initiate a new Contract Negotiation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initiateContractNegotiationTest() throws ApiException {
        ContractNegotiationRequest contractNegotiationRequest = null;
        UiContractNegotiation response = api.initiateContractNegotiation(contractNegotiationRequest);
        // TODO: test validations
    }

    /**
     * Initiate a Transfer Process via a custom Transfer Process JSON-LD. Fields such as connectorId, assetId, providerConnectorId, providerConnectorAddress will be set automatically.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initiateCustomTransferTest() throws ApiException {
        InitiateCustomTransferRequest initiateCustomTransferRequest = null;
        IdResponseDto response = api.initiateCustomTransfer(initiateCustomTransferRequest);
        // TODO: test validations
    }

    /**
     * Initiate a Transfer Process
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initiateTransferTest() throws ApiException {
        InitiateTransferRequest initiateTransferRequest = null;
        IdResponseDto response = api.initiateTransfer(initiateTransferRequest);
        // TODO: test validations
    }

    /**
     * Validates if the provided assetId is already taken
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void isAssetIdAvailableTest() throws ApiException {
        String assetId = null;
        IdAvailabilityResponse response = api.isAssetIdAvailable(assetId);
        // TODO: test validations
    }

    /**
     * Validates if the provided contractDefinitionId is already taken
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void isContractDefinitionIdAvailableTest() throws ApiException {
        String contractDefinitionId = null;
        IdAvailabilityResponse response = api.isContractDefinitionIdAvailable(contractDefinitionId);
        // TODO: test validations
    }

    /**
     * Validates if the provided policyId is already taken
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void isPolicyIdAvailableTest() throws ApiException {
        String policyId = null;
        IdAvailabilityResponse response = api.isPolicyIdAvailable(policyId);
        // TODO: test validations
    }

    /**
     * Terminates a contract agreement designated by its contract agreement id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void terminateContractAgreementTest() throws ApiException {
        String contractAgreementId = null;
        ContractTerminationRequest contractTerminationRequest = null;
        IdResponseDto response = api.terminateContractAgreement(contractAgreementId, contractTerminationRequest);
        // TODO: test validations
    }

}
