/*
 * sovity EDC API Wrapper
 * sovity's EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@ymatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.sovity.edc.client.gen.model;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.sovity.edc.client.gen.model.OperatorDto;
import de.sovity.edc.client.gen.model.UiPolicyLiteral;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import de.sovity.edc.client.gen.JSON;

/**
 * ODRL AtomicConstraint as supported by the sovity product landscape. For example &#39;a EQ b&#39;, &#39;c IN [d, e, f]&#39;
 */
@ApiModel(description = "ODRL AtomicConstraint as supported by the sovity product landscape. For example 'a EQ b', 'c IN [d, e, f]'")
@lombok.AllArgsConstructor
@lombok.Builder
@SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UiPolicyConstraint {
  public static final String SERIALIZED_NAME_LEFT = "left";
  @SerializedName(SERIALIZED_NAME_LEFT)
  @javax.annotation.Nonnull
  private String left;

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  @javax.annotation.Nonnull
  private OperatorDto operator;

  public static final String SERIALIZED_NAME_RIGHT = "right";
  @SerializedName(SERIALIZED_NAME_RIGHT)
  @javax.annotation.Nonnull
  private UiPolicyLiteral right;

  public UiPolicyConstraint() {
  }

  public UiPolicyConstraint left(@javax.annotation.Nonnull String left) {
    this.left = left;
    return this;
  }

  /**
   * Left side of the expression.
   * @return left
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Left side of the expression.")
  public String getLeft() {
    return left;
  }

  public void setLeft(@javax.annotation.Nonnull String left) {
    this.left = left;
  }


  public UiPolicyConstraint operator(@javax.annotation.Nonnull OperatorDto operator) {
    this.operator = operator;
    return this;
  }

  /**
   * Operator, e.g. EQ
   * @return operator
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Operator, e.g. EQ")
  public OperatorDto getOperator() {
    return operator;
  }

  public void setOperator(@javax.annotation.Nonnull OperatorDto operator) {
    this.operator = operator;
  }


  public UiPolicyConstraint right(@javax.annotation.Nonnull UiPolicyLiteral right) {
    this.right = right;
    return this;
  }

  /**
   * Right side of the expression
   * @return right
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Right side of the expression")
  public UiPolicyLiteral getRight() {
    return right;
  }

  public void setRight(@javax.annotation.Nonnull UiPolicyLiteral right) {
    this.right = right;
  }



  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UiPolicyConstraint {\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("left");
    openapiFields.add("operator");
    openapiFields.add("right");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("left");
    openapiRequiredFields.add("operator");
    openapiRequiredFields.add("right");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UiPolicyConstraint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UiPolicyConstraint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UiPolicyConstraint is not found in the empty JSON string", UiPolicyConstraint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UiPolicyConstraint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UiPolicyConstraint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UiPolicyConstraint.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("left").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `left` to be a primitive type in the JSON string but got `%s`", jsonObj.get("left").toString()));
      }
      // validate the required field `operator`
      OperatorDto.validateJsonElement(jsonObj.get("operator"));
      // validate the required field `right`
      UiPolicyLiteral.validateJsonElement(jsonObj.get("right"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UiPolicyConstraint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UiPolicyConstraint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UiPolicyConstraint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UiPolicyConstraint.class));

       return (TypeAdapter<T>) new TypeAdapter<UiPolicyConstraint>() {
           @Override
           public void write(JsonWriter out, UiPolicyConstraint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UiPolicyConstraint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UiPolicyConstraint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UiPolicyConstraint
   * @throws IOException if the JSON string is invalid with respect to UiPolicyConstraint
   */
  public static UiPolicyConstraint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UiPolicyConstraint.class);
  }

  /**
   * Convert an instance of UiPolicyConstraint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

