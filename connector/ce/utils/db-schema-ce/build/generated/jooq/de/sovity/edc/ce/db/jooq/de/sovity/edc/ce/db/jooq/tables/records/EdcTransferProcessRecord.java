/*
 * This file is generated by jOOQ.
 */
package de.sovity.edc.ce.db.jooq.tables.records;


import de.sovity.edc.ce.db.jooq.tables.EdcTransferProcess;

import org.jooq.JSON;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EdcTransferProcessRecord extends UpdatableRecordImpl<EdcTransferProcessRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.edc_transfer_process.transferprocess_id</code>.
     */
    public void setTransferprocessId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.transferprocess_id</code>.
     */
    public String getTransferprocessId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.edc_transfer_process.type</code>.
     */
    public void setType(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.type</code>.
     */
    public String getType() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.edc_transfer_process.state</code>.
     */
    public void setState(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.state</code>.
     */
    public Integer getState() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.edc_transfer_process.state_count</code>.
     */
    public void setStateCount(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.state_count</code>.
     */
    public Integer getStateCount() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>public.edc_transfer_process.state_time_stamp</code>.
     */
    public void setStateTimeStamp(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.state_time_stamp</code>.
     */
    public Long getStateTimeStamp() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>public.edc_transfer_process.created_at</code>.
     */
    public void setCreatedAt(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.created_at</code>.
     */
    public Long getCreatedAt() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>public.edc_transfer_process.updated_at</code>.
     */
    public void setUpdatedAt(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.updated_at</code>.
     */
    public Long getUpdatedAt() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>public.edc_transfer_process.trace_context</code>. Java
     * Map serialized as JSON
     */
    public void setTraceContext(JSON value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.trace_context</code>. Java
     * Map serialized as JSON
     */
    public JSON getTraceContext() {
        return (JSON) get(7);
    }

    /**
     * Setter for <code>public.edc_transfer_process.error_detail</code>.
     */
    public void setErrorDetail(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.error_detail</code>.
     */
    public String getErrorDetail() {
        return (String) get(8);
    }

    /**
     * Setter for <code>public.edc_transfer_process.resource_manifest</code>.
     * java ResourceManifest serialized as JSON
     */
    public void setResourceManifest(JSON value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.resource_manifest</code>.
     * java ResourceManifest serialized as JSON
     */
    public JSON getResourceManifest() {
        return (JSON) get(9);
    }

    /**
     * Setter for
     * <code>public.edc_transfer_process.provisioned_resource_set</code>.
     * ProvisionedResourceSet serialized as JSON
     */
    public void setProvisionedResourceSet(JSON value) {
        set(10, value);
    }

    /**
     * Getter for
     * <code>public.edc_transfer_process.provisioned_resource_set</code>.
     * ProvisionedResourceSet serialized as JSON
     */
    public JSON getProvisionedResourceSet() {
        return (JSON) get(10);
    }

    /**
     * Setter for <code>public.edc_transfer_process.content_data_address</code>.
     * DataAddress serialized as JSON
     */
    public void setContentDataAddress(JSON value) {
        set(11, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.content_data_address</code>.
     * DataAddress serialized as JSON
     */
    public JSON getContentDataAddress() {
        return (JSON) get(11);
    }

    /**
     * Setter for
     * <code>public.edc_transfer_process.deprovisioned_resources</code>. List of
     * deprovisioned resources, serialized as JSON
     */
    public void setDeprovisionedResources(JSON value) {
        set(12, value);
    }

    /**
     * Getter for
     * <code>public.edc_transfer_process.deprovisioned_resources</code>. List of
     * deprovisioned resources, serialized as JSON
     */
    public JSON getDeprovisionedResources() {
        return (JSON) get(12);
    }

    /**
     * Setter for <code>public.edc_transfer_process.private_properties</code>.
     */
    public void setPrivateProperties(JSON value) {
        set(13, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.private_properties</code>.
     */
    public JSON getPrivateProperties() {
        return (JSON) get(13);
    }

    /**
     * Setter for <code>public.edc_transfer_process.callback_addresses</code>.
     */
    public void setCallbackAddresses(JSON value) {
        set(14, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.callback_addresses</code>.
     */
    public JSON getCallbackAddresses() {
        return (JSON) get(14);
    }

    /**
     * Setter for <code>public.edc_transfer_process.pending</code>.
     */
    public void setPending(Boolean value) {
        set(15, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.pending</code>.
     */
    public Boolean getPending() {
        return (Boolean) get(15);
    }

    /**
     * Setter for <code>public.edc_transfer_process.transfer_type</code>.
     */
    public void setTransferType(String value) {
        set(16, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.transfer_type</code>.
     */
    public String getTransferType() {
        return (String) get(16);
    }

    /**
     * Setter for <code>public.edc_transfer_process.protocol_messages</code>.
     */
    public void setProtocolMessages(JSON value) {
        set(17, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.protocol_messages</code>.
     */
    public JSON getProtocolMessages() {
        return (JSON) get(17);
    }

    /**
     * Setter for <code>public.edc_transfer_process.data_plane_id</code>.
     */
    public void setDataPlaneId(String value) {
        set(18, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.data_plane_id</code>.
     */
    public String getDataPlaneId() {
        return (String) get(18);
    }

    /**
     * Setter for <code>public.edc_transfer_process.correlation_id</code>.
     */
    public void setCorrelationId(String value) {
        set(19, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.correlation_id</code>.
     */
    public String getCorrelationId() {
        return (String) get(19);
    }

    /**
     * Setter for
     * <code>public.edc_transfer_process.counter_party_address</code>.
     */
    public void setCounterPartyAddress(String value) {
        set(20, value);
    }

    /**
     * Getter for
     * <code>public.edc_transfer_process.counter_party_address</code>.
     */
    public String getCounterPartyAddress() {
        return (String) get(20);
    }

    /**
     * Setter for <code>public.edc_transfer_process.protocol</code>.
     */
    public void setProtocol(String value) {
        set(21, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.protocol</code>.
     */
    public String getProtocol() {
        return (String) get(21);
    }

    /**
     * Setter for <code>public.edc_transfer_process.asset_id</code>.
     */
    public void setAssetId(String value) {
        set(22, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.asset_id</code>.
     */
    public String getAssetId() {
        return (String) get(22);
    }

    /**
     * Setter for <code>public.edc_transfer_process.contract_id</code>.
     */
    public void setContractId(String value) {
        set(23, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.contract_id</code>.
     */
    public String getContractId() {
        return (String) get(23);
    }

    /**
     * Setter for <code>public.edc_transfer_process.data_destination</code>.
     */
    public void setDataDestination(JSON value) {
        set(24, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.data_destination</code>.
     */
    public JSON getDataDestination() {
        return (JSON) get(24);
    }

    /**
     * Setter for <code>public.edc_transfer_process.lease_id</code>.
     */
    public void setLeaseId(String value) {
        set(25, value);
    }

    /**
     * Getter for <code>public.edc_transfer_process.lease_id</code>.
     */
    public String getLeaseId() {
        return (String) get(25);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EdcTransferProcessRecord
     */
    public EdcTransferProcessRecord() {
        super(EdcTransferProcess.EDC_TRANSFER_PROCESS);
    }

    /**
     * Create a detached, initialised EdcTransferProcessRecord
     */
    public EdcTransferProcessRecord(String transferprocessId, String type, Integer state, Integer stateCount, Long stateTimeStamp, Long createdAt, Long updatedAt, JSON traceContext, String errorDetail, JSON resourceManifest, JSON provisionedResourceSet, JSON contentDataAddress, JSON deprovisionedResources, JSON privateProperties, JSON callbackAddresses, Boolean pending, String transferType, JSON protocolMessages, String dataPlaneId, String correlationId, String counterPartyAddress, String protocol, String assetId, String contractId, JSON dataDestination, String leaseId) {
        super(EdcTransferProcess.EDC_TRANSFER_PROCESS);

        setTransferprocessId(transferprocessId);
        setType(type);
        setState(state);
        setStateCount(stateCount);
        setStateTimeStamp(stateTimeStamp);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        setTraceContext(traceContext);
        setErrorDetail(errorDetail);
        setResourceManifest(resourceManifest);
        setProvisionedResourceSet(provisionedResourceSet);
        setContentDataAddress(contentDataAddress);
        setDeprovisionedResources(deprovisionedResources);
        setPrivateProperties(privateProperties);
        setCallbackAddresses(callbackAddresses);
        setPending(pending);
        setTransferType(transferType);
        setProtocolMessages(protocolMessages);
        setDataPlaneId(dataPlaneId);
        setCorrelationId(correlationId);
        setCounterPartyAddress(counterPartyAddress);
        setProtocol(protocol);
        setAssetId(assetId);
        setContractId(contractId);
        setDataDestination(dataDestination);
        setLeaseId(leaseId);
    }
}
