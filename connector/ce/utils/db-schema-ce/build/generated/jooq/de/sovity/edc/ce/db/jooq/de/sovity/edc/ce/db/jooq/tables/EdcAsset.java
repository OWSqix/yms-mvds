/*
 * This file is generated by jOOQ.
 */
package de.sovity.edc.ce.db.jooq.tables;


import de.sovity.edc.ce.db.jooq.Keys;
import de.sovity.edc.ce.db.jooq.Public;
import de.sovity.edc.ce.db.jooq.tables.records.EdcAssetRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EdcAsset extends TableImpl<EdcAssetRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.edc_asset</code>
     */
    public static final EdcAsset EDC_ASSET = new EdcAsset();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EdcAssetRecord> getRecordType() {
        return EdcAssetRecord.class;
    }

    /**
     * The column <code>public.edc_asset.asset_id</code>.
     */
    public final TableField<EdcAssetRecord, String> ASSET_ID = createField(DSL.name("asset_id"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.edc_asset.created_at</code>.
     */
    public final TableField<EdcAssetRecord, Long> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.edc_asset.properties</code>. Asset properties
     * serialized as json
     */
    public final TableField<EdcAssetRecord, JSON> PROPERTIES = createField(DSL.name("properties"), SQLDataType.JSON.defaultValue(DSL.field("'{}'::json", SQLDataType.JSON)), this, "Asset properties serialized as json");

    /**
     * The column <code>public.edc_asset.private_properties</code>. Asset
     * private properties serialized as json
     */
    public final TableField<EdcAssetRecord, JSON> PRIVATE_PROPERTIES = createField(DSL.name("private_properties"), SQLDataType.JSON.defaultValue(DSL.field("'{}'::json", SQLDataType.JSON)), this, "Asset private properties serialized as json");

    /**
     * The column <code>public.edc_asset.data_address</code>. Asset DataAddress
     * serialized as json
     */
    public final TableField<EdcAssetRecord, JSON> DATA_ADDRESS = createField(DSL.name("data_address"), SQLDataType.JSON.defaultValue(DSL.field("'{}'::json", SQLDataType.JSON)), this, "Asset DataAddress serialized as json");

    private EdcAsset(Name alias, Table<EdcAssetRecord> aliased) {
        this(alias, aliased, null);
    }

    private EdcAsset(Name alias, Table<EdcAssetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.edc_asset</code> table reference
     */
    public EdcAsset(String alias) {
        this(DSL.name(alias), EDC_ASSET);
    }

    /**
     * Create an aliased <code>public.edc_asset</code> table reference
     */
    public EdcAsset(Name alias) {
        this(alias, EDC_ASSET);
    }

    /**
     * Create a <code>public.edc_asset</code> table reference
     */
    public EdcAsset() {
        this(DSL.name("edc_asset"), null);
    }

    public <O extends Record> EdcAsset(Table<O> child, ForeignKey<O, EdcAssetRecord> key) {
        super(child, key, EDC_ASSET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<EdcAssetRecord> getPrimaryKey() {
        return Keys.EDC_ASSET_PKEY;
    }

    @Override
    public EdcAsset as(String alias) {
        return new EdcAsset(DSL.name(alias), this);
    }

    @Override
    public EdcAsset as(Name alias) {
        return new EdcAsset(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcAsset rename(String name) {
        return new EdcAsset(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcAsset rename(Name name) {
        return new EdcAsset(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, Long, JSON, JSON, JSON> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
