/*
 * This file is generated by jOOQ.
 */
package de.sovity.edc.ce.db.jooq.tables;


import de.sovity.edc.ce.db.jooq.Keys;
import de.sovity.edc.ce.db.jooq.Public;
import de.sovity.edc.ce.db.jooq.tables.records.EdcContractAgreementRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EdcContractAgreement extends TableImpl<EdcContractAgreementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.edc_contract_agreement</code>
     */
    public static final EdcContractAgreement EDC_CONTRACT_AGREEMENT = new EdcContractAgreement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EdcContractAgreementRecord> getRecordType() {
        return EdcContractAgreementRecord.class;
    }

    /**
     * The column <code>public.edc_contract_agreement.agr_id</code>.
     */
    public final TableField<EdcContractAgreementRecord, String> AGR_ID = createField(DSL.name("agr_id"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.edc_contract_agreement.provider_agent_id</code>.
     */
    public final TableField<EdcContractAgreementRecord, String> PROVIDER_AGENT_ID = createField(DSL.name("provider_agent_id"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.edc_contract_agreement.consumer_agent_id</code>.
     */
    public final TableField<EdcContractAgreementRecord, String> CONSUMER_AGENT_ID = createField(DSL.name("consumer_agent_id"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.edc_contract_agreement.signing_date</code>.
     */
    public final TableField<EdcContractAgreementRecord, Long> SIGNING_DATE = createField(DSL.name("signing_date"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.edc_contract_agreement.start_date</code>.
     */
    public final TableField<EdcContractAgreementRecord, Long> START_DATE = createField(DSL.name("start_date"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.edc_contract_agreement.end_date</code>.
     */
    public final TableField<EdcContractAgreementRecord, Integer> END_DATE = createField(DSL.name("end_date"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.edc_contract_agreement.asset_id</code>.
     */
    public final TableField<EdcContractAgreementRecord, String> ASSET_ID = createField(DSL.name("asset_id"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.edc_contract_agreement.policy</code>.
     */
    public final TableField<EdcContractAgreementRecord, JSON> POLICY = createField(DSL.name("policy"), SQLDataType.JSON, this, "");

    private EdcContractAgreement(Name alias, Table<EdcContractAgreementRecord> aliased) {
        this(alias, aliased, null);
    }

    private EdcContractAgreement(Name alias, Table<EdcContractAgreementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.edc_contract_agreement</code> table
     * reference
     */
    public EdcContractAgreement(String alias) {
        this(DSL.name(alias), EDC_CONTRACT_AGREEMENT);
    }

    /**
     * Create an aliased <code>public.edc_contract_agreement</code> table
     * reference
     */
    public EdcContractAgreement(Name alias) {
        this(alias, EDC_CONTRACT_AGREEMENT);
    }

    /**
     * Create a <code>public.edc_contract_agreement</code> table reference
     */
    public EdcContractAgreement() {
        this(DSL.name("edc_contract_agreement"), null);
    }

    public <O extends Record> EdcContractAgreement(Table<O> child, ForeignKey<O, EdcContractAgreementRecord> key) {
        super(child, key, EDC_CONTRACT_AGREEMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<EdcContractAgreementRecord> getPrimaryKey() {
        return Keys.CONTRACT_AGREEMENT_PK;
    }

    @Override
    public EdcContractAgreement as(String alias) {
        return new EdcContractAgreement(DSL.name(alias), this);
    }

    @Override
    public EdcContractAgreement as(Name alias) {
        return new EdcContractAgreement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcContractAgreement rename(String name) {
        return new EdcContractAgreement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcContractAgreement rename(Name name) {
        return new EdcContractAgreement(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, Long, Long, Integer, String, JSON> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
