/*
 * This file is generated by jOOQ.
 */
package de.sovity.edc.ce.db.jooq.tables;


import de.sovity.edc.ce.db.jooq.Indexes;
import de.sovity.edc.ce.db.jooq.Keys;
import de.sovity.edc.ce.db.jooq.Public;
import de.sovity.edc.ce.db.jooq.tables.records.EdcPolicyMonitorRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EdcPolicyMonitor extends TableImpl<EdcPolicyMonitorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.edc_policy_monitor</code>
     */
    public static final EdcPolicyMonitor EDC_POLICY_MONITOR = new EdcPolicyMonitor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EdcPolicyMonitorRecord> getRecordType() {
        return EdcPolicyMonitorRecord.class;
    }

    /**
     * The column <code>public.edc_policy_monitor.entry_id</code>.
     */
    public final TableField<EdcPolicyMonitorRecord, String> ENTRY_ID = createField(DSL.name("entry_id"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.edc_policy_monitor.state</code>.
     */
    public final TableField<EdcPolicyMonitorRecord, Integer> STATE = createField(DSL.name("state"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.edc_policy_monitor.created_at</code>.
     */
    public final TableField<EdcPolicyMonitorRecord, Long> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.edc_policy_monitor.updated_at</code>.
     */
    public final TableField<EdcPolicyMonitorRecord, Long> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.edc_policy_monitor.state_count</code>.
     */
    public final TableField<EdcPolicyMonitorRecord, Integer> STATE_COUNT = createField(DSL.name("state_count"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.edc_policy_monitor.state_time_stamp</code>.
     */
    public final TableField<EdcPolicyMonitorRecord, Long> STATE_TIME_STAMP = createField(DSL.name("state_time_stamp"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.edc_policy_monitor.trace_context</code>.
     */
    public final TableField<EdcPolicyMonitorRecord, JSON> TRACE_CONTEXT = createField(DSL.name("trace_context"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.edc_policy_monitor.error_detail</code>.
     */
    public final TableField<EdcPolicyMonitorRecord, String> ERROR_DETAIL = createField(DSL.name("error_detail"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.edc_policy_monitor.lease_id</code>.
     */
    public final TableField<EdcPolicyMonitorRecord, String> LEASE_ID = createField(DSL.name("lease_id"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.edc_policy_monitor.properties</code>.
     */
    public final TableField<EdcPolicyMonitorRecord, JSON> PROPERTIES = createField(DSL.name("properties"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.edc_policy_monitor.contract_id</code>.
     */
    public final TableField<EdcPolicyMonitorRecord, String> CONTRACT_ID = createField(DSL.name("contract_id"), SQLDataType.VARCHAR, this, "");

    private EdcPolicyMonitor(Name alias, Table<EdcPolicyMonitorRecord> aliased) {
        this(alias, aliased, null);
    }

    private EdcPolicyMonitor(Name alias, Table<EdcPolicyMonitorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.edc_policy_monitor</code> table reference
     */
    public EdcPolicyMonitor(String alias) {
        this(DSL.name(alias), EDC_POLICY_MONITOR);
    }

    /**
     * Create an aliased <code>public.edc_policy_monitor</code> table reference
     */
    public EdcPolicyMonitor(Name alias) {
        this(alias, EDC_POLICY_MONITOR);
    }

    /**
     * Create a <code>public.edc_policy_monitor</code> table reference
     */
    public EdcPolicyMonitor() {
        this(DSL.name("edc_policy_monitor"), null);
    }

    public <O extends Record> EdcPolicyMonitor(Table<O> child, ForeignKey<O, EdcPolicyMonitorRecord> key) {
        super(child, key, EDC_POLICY_MONITOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.POLICY_MONITOR_STATE);
    }

    @Override
    public UniqueKey<EdcPolicyMonitorRecord> getPrimaryKey() {
        return Keys.EDC_POLICY_MONITOR_PKEY;
    }

    @Override
    public List<ForeignKey<EdcPolicyMonitorRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EDC_POLICY_MONITOR__POLICY_MONITOR_LEASE_LEASE_ID_FK);
    }

    private transient EdcLease _edcLease;

    /**
     * Get the implicit join path to the <code>public.edc_lease</code> table.
     */
    public EdcLease edcLease() {
        if (_edcLease == null)
            _edcLease = new EdcLease(this, Keys.EDC_POLICY_MONITOR__POLICY_MONITOR_LEASE_LEASE_ID_FK);

        return _edcLease;
    }

    @Override
    public EdcPolicyMonitor as(String alias) {
        return new EdcPolicyMonitor(DSL.name(alias), this);
    }

    @Override
    public EdcPolicyMonitor as(Name alias) {
        return new EdcPolicyMonitor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcPolicyMonitor rename(String name) {
        return new EdcPolicyMonitor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcPolicyMonitor rename(Name name) {
        return new EdcPolicyMonitor(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, Integer, Long, Long, Integer, Long, JSON, String, String, JSON, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
