/*
 * This file is generated by jOOQ.
 */
package de.sovity.edc.ce.db.jooq.tables;


import de.sovity.edc.ce.db.jooq.Keys;
import de.sovity.edc.ce.db.jooq.Public;
import de.sovity.edc.ce.db.jooq.tables.records.EdcContractDefinitionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EdcContractDefinitions extends TableImpl<EdcContractDefinitionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.edc_contract_definitions</code>
     */
    public static final EdcContractDefinitions EDC_CONTRACT_DEFINITIONS = new EdcContractDefinitions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EdcContractDefinitionsRecord> getRecordType() {
        return EdcContractDefinitionsRecord.class;
    }

    /**
     * The column <code>public.edc_contract_definitions.created_at</code>.
     */
    public final TableField<EdcContractDefinitionsRecord, Long> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>public.edc_contract_definitions.contract_definition_id</code>.
     */
    public final TableField<EdcContractDefinitionsRecord, String> CONTRACT_DEFINITION_ID = createField(DSL.name("contract_definition_id"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.edc_contract_definitions.access_policy_id</code>.
     */
    public final TableField<EdcContractDefinitionsRecord, String> ACCESS_POLICY_ID = createField(DSL.name("access_policy_id"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column
     * <code>public.edc_contract_definitions.contract_policy_id</code>.
     */
    public final TableField<EdcContractDefinitionsRecord, String> CONTRACT_POLICY_ID = createField(DSL.name("contract_policy_id"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.edc_contract_definitions.assets_selector</code>.
     */
    public final TableField<EdcContractDefinitionsRecord, JSON> ASSETS_SELECTOR = createField(DSL.name("assets_selector"), SQLDataType.JSON.nullable(false), this, "");

    /**
     * The column
     * <code>public.edc_contract_definitions.private_properties</code>.
     */
    public final TableField<EdcContractDefinitionsRecord, JSON> PRIVATE_PROPERTIES = createField(DSL.name("private_properties"), SQLDataType.JSON, this, "");

    private EdcContractDefinitions(Name alias, Table<EdcContractDefinitionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private EdcContractDefinitions(Name alias, Table<EdcContractDefinitionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.edc_contract_definitions</code> table
     * reference
     */
    public EdcContractDefinitions(String alias) {
        this(DSL.name(alias), EDC_CONTRACT_DEFINITIONS);
    }

    /**
     * Create an aliased <code>public.edc_contract_definitions</code> table
     * reference
     */
    public EdcContractDefinitions(Name alias) {
        this(alias, EDC_CONTRACT_DEFINITIONS);
    }

    /**
     * Create a <code>public.edc_contract_definitions</code> table reference
     */
    public EdcContractDefinitions() {
        this(DSL.name("edc_contract_definitions"), null);
    }

    public <O extends Record> EdcContractDefinitions(Table<O> child, ForeignKey<O, EdcContractDefinitionsRecord> key) {
        super(child, key, EDC_CONTRACT_DEFINITIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<EdcContractDefinitionsRecord> getPrimaryKey() {
        return Keys.EDC_CONTRACT_DEFINITIONS_PKEY;
    }

    @Override
    public EdcContractDefinitions as(String alias) {
        return new EdcContractDefinitions(DSL.name(alias), this);
    }

    @Override
    public EdcContractDefinitions as(Name alias) {
        return new EdcContractDefinitions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcContractDefinitions rename(String name) {
        return new EdcContractDefinitions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcContractDefinitions rename(Name name) {
        return new EdcContractDefinitions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, JSON, JSON> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
