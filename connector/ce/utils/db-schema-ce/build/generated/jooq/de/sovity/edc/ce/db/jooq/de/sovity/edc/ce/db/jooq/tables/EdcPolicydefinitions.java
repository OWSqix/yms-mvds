/*
 * This file is generated by jOOQ.
 */
package de.sovity.edc.ce.db.jooq.tables;


import de.sovity.edc.ce.db.jooq.Keys;
import de.sovity.edc.ce.db.jooq.Public;
import de.sovity.edc.ce.db.jooq.tables.records.EdcPolicydefinitionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EdcPolicydefinitions extends TableImpl<EdcPolicydefinitionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.edc_policydefinitions</code>
     */
    public static final EdcPolicydefinitions EDC_POLICYDEFINITIONS = new EdcPolicydefinitions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EdcPolicydefinitionsRecord> getRecordType() {
        return EdcPolicydefinitionsRecord.class;
    }

    /**
     * The column <code>public.edc_policydefinitions.policy_id</code>.
     */
    public final TableField<EdcPolicydefinitionsRecord, String> POLICY_ID = createField(DSL.name("policy_id"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.edc_policydefinitions.created_at</code>.
     */
    public final TableField<EdcPolicydefinitionsRecord, Long> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.edc_policydefinitions.permissions</code>. Java
     * list&lt;Permission&gt; serialized as json
     */
    public final TableField<EdcPolicydefinitionsRecord, JSON> PERMISSIONS = createField(DSL.name("permissions"), SQLDataType.JSON, this, "Java list<Permission> serialized as json");

    /**
     * The column <code>public.edc_policydefinitions.prohibitions</code>. Java
     * list&lt;Prohibition&gt; serialized as json
     */
    public final TableField<EdcPolicydefinitionsRecord, JSON> PROHIBITIONS = createField(DSL.name("prohibitions"), SQLDataType.JSON, this, "Java list<Prohibition> serialized as json");

    /**
     * The column <code>public.edc_policydefinitions.duties</code>. Java
     * list&lt;Duty&gt; serialized as json
     */
    public final TableField<EdcPolicydefinitionsRecord, JSON> DUTIES = createField(DSL.name("duties"), SQLDataType.JSON, this, "Java list<Duty> serialized as json");

    /**
     * The column
     * <code>public.edc_policydefinitions.extensible_properties</code>. Java
     * Map&lt;String,
     *     object&gt; serialized as json 
     */
    public final TableField<EdcPolicydefinitionsRecord, JSON> EXTENSIBLE_PROPERTIES = createField(DSL.name("extensible_properties"), SQLDataType.JSON, this, "Java Map<String,\n    object> serialized as json ");

    /**
     * The column <code>public.edc_policydefinitions.inherits_from</code>.
     */
    public final TableField<EdcPolicydefinitionsRecord, String> INHERITS_FROM = createField(DSL.name("inherits_from"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.edc_policydefinitions.assigner</code>.
     */
    public final TableField<EdcPolicydefinitionsRecord, String> ASSIGNER = createField(DSL.name("assigner"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.edc_policydefinitions.assignee</code>.
     */
    public final TableField<EdcPolicydefinitionsRecord, String> ASSIGNEE = createField(DSL.name("assignee"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.edc_policydefinitions.target</code>.
     */
    public final TableField<EdcPolicydefinitionsRecord, String> TARGET = createField(DSL.name("target"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.edc_policydefinitions.policy_type</code>.  Java
     * PolicyType serialized as json 
     */
    public final TableField<EdcPolicydefinitionsRecord, String> POLICY_TYPE = createField(DSL.name("policy_type"), SQLDataType.VARCHAR.nullable(false), this, " Java PolicyType serialized as json ");

    /**
     * The column <code>public.edc_policydefinitions.private_properties</code>.
     */
    public final TableField<EdcPolicydefinitionsRecord, JSON> PRIVATE_PROPERTIES = createField(DSL.name("private_properties"), SQLDataType.JSON, this, "");

    private EdcPolicydefinitions(Name alias, Table<EdcPolicydefinitionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private EdcPolicydefinitions(Name alias, Table<EdcPolicydefinitionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.edc_policydefinitions</code> table
     * reference
     */
    public EdcPolicydefinitions(String alias) {
        this(DSL.name(alias), EDC_POLICYDEFINITIONS);
    }

    /**
     * Create an aliased <code>public.edc_policydefinitions</code> table
     * reference
     */
    public EdcPolicydefinitions(Name alias) {
        this(alias, EDC_POLICYDEFINITIONS);
    }

    /**
     * Create a <code>public.edc_policydefinitions</code> table reference
     */
    public EdcPolicydefinitions() {
        this(DSL.name("edc_policydefinitions"), null);
    }

    public <O extends Record> EdcPolicydefinitions(Table<O> child, ForeignKey<O, EdcPolicydefinitionsRecord> key) {
        super(child, key, EDC_POLICYDEFINITIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<EdcPolicydefinitionsRecord> getPrimaryKey() {
        return Keys.EDC_POLICYDEFINITIONS_PKEY;
    }

    @Override
    public EdcPolicydefinitions as(String alias) {
        return new EdcPolicydefinitions(DSL.name(alias), this);
    }

    @Override
    public EdcPolicydefinitions as(Name alias) {
        return new EdcPolicydefinitions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcPolicydefinitions rename(String name) {
        return new EdcPolicydefinitions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcPolicydefinitions rename(Name name) {
        return new EdcPolicydefinitions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, Long, JSON, JSON, JSON, JSON, String, String, String, String, String, JSON> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
