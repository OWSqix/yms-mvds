/*
 * This file is generated by jOOQ.
 */
package de.sovity.edc.ce.db.jooq.tables;


import de.sovity.edc.ce.db.jooq.Keys;
import de.sovity.edc.ce.db.jooq.Public;
import de.sovity.edc.ce.db.jooq.tables.records.EdcDataPlaneInstanceRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EdcDataPlaneInstance extends TableImpl<EdcDataPlaneInstanceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.edc_data_plane_instance</code>
     */
    public static final EdcDataPlaneInstance EDC_DATA_PLANE_INSTANCE = new EdcDataPlaneInstance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EdcDataPlaneInstanceRecord> getRecordType() {
        return EdcDataPlaneInstanceRecord.class;
    }

    /**
     * The column <code>public.edc_data_plane_instance.id</code>.
     */
    public final TableField<EdcDataPlaneInstanceRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.edc_data_plane_instance.data</code>.
     */
    public final TableField<EdcDataPlaneInstanceRecord, JSON> DATA = createField(DSL.name("data"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.edc_data_plane_instance.lease_id</code>.
     */
    public final TableField<EdcDataPlaneInstanceRecord, String> LEASE_ID = createField(DSL.name("lease_id"), SQLDataType.VARCHAR, this, "");

    private EdcDataPlaneInstance(Name alias, Table<EdcDataPlaneInstanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private EdcDataPlaneInstance(Name alias, Table<EdcDataPlaneInstanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.edc_data_plane_instance</code> table
     * reference
     */
    public EdcDataPlaneInstance(String alias) {
        this(DSL.name(alias), EDC_DATA_PLANE_INSTANCE);
    }

    /**
     * Create an aliased <code>public.edc_data_plane_instance</code> table
     * reference
     */
    public EdcDataPlaneInstance(Name alias) {
        this(alias, EDC_DATA_PLANE_INSTANCE);
    }

    /**
     * Create a <code>public.edc_data_plane_instance</code> table reference
     */
    public EdcDataPlaneInstance() {
        this(DSL.name("edc_data_plane_instance"), null);
    }

    public <O extends Record> EdcDataPlaneInstance(Table<O> child, ForeignKey<O, EdcDataPlaneInstanceRecord> key) {
        super(child, key, EDC_DATA_PLANE_INSTANCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<EdcDataPlaneInstanceRecord> getPrimaryKey() {
        return Keys.EDC_DATA_PLANE_INSTANCE_PKEY;
    }

    @Override
    public List<ForeignKey<EdcDataPlaneInstanceRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EDC_DATA_PLANE_INSTANCE__DATA_PLANE_INSTANCE_LEASE_ID_FK);
    }

    private transient EdcLease _edcLease;

    /**
     * Get the implicit join path to the <code>public.edc_lease</code> table.
     */
    public EdcLease edcLease() {
        if (_edcLease == null)
            _edcLease = new EdcLease(this, Keys.EDC_DATA_PLANE_INSTANCE__DATA_PLANE_INSTANCE_LEASE_ID_FK);

        return _edcLease;
    }

    @Override
    public EdcDataPlaneInstance as(String alias) {
        return new EdcDataPlaneInstance(DSL.name(alias), this);
    }

    @Override
    public EdcDataPlaneInstance as(Name alias) {
        return new EdcDataPlaneInstance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcDataPlaneInstance rename(String name) {
        return new EdcDataPlaneInstance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcDataPlaneInstance rename(Name name) {
        return new EdcDataPlaneInstance(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, JSON, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
