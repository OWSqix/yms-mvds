/*
 * This file is generated by jOOQ.
 */
package de.sovity.edc.ce.db.jooq.tables;


import de.sovity.edc.ce.db.jooq.Indexes;
import de.sovity.edc.ce.db.jooq.Keys;
import de.sovity.edc.ce.db.jooq.Public;
import de.sovity.edc.ce.db.jooq.tables.records.EdcContractNegotiationRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EdcContractNegotiation extends TableImpl<EdcContractNegotiationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.edc_contract_negotiation</code>
     */
    public static final EdcContractNegotiation EDC_CONTRACT_NEGOTIATION = new EdcContractNegotiation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EdcContractNegotiationRecord> getRecordType() {
        return EdcContractNegotiationRecord.class;
    }

    /**
     * The column <code>public.edc_contract_negotiation.id</code>.
     */
    public final TableField<EdcContractNegotiationRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.edc_contract_negotiation.created_at</code>.
     */
    public final TableField<EdcContractNegotiationRecord, Long> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.edc_contract_negotiation.updated_at</code>.
     */
    public final TableField<EdcContractNegotiationRecord, Long> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.edc_contract_negotiation.correlation_id</code>.
     */
    public final TableField<EdcContractNegotiationRecord, String> CORRELATION_ID = createField(DSL.name("correlation_id"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.edc_contract_negotiation.counterparty_id</code>.
     */
    public final TableField<EdcContractNegotiationRecord, String> COUNTERPARTY_ID = createField(DSL.name("counterparty_id"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column
     * <code>public.edc_contract_negotiation.counterparty_address</code>.
     */
    public final TableField<EdcContractNegotiationRecord, String> COUNTERPARTY_ADDRESS = createField(DSL.name("counterparty_address"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.edc_contract_negotiation.protocol</code>.
     */
    public final TableField<EdcContractNegotiationRecord, String> PROTOCOL = createField(DSL.name("protocol"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.edc_contract_negotiation.type</code>.
     */
    public final TableField<EdcContractNegotiationRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.edc_contract_negotiation.state</code>.
     */
    public final TableField<EdcContractNegotiationRecord, Integer> STATE = createField(DSL.name("state"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.edc_contract_negotiation.state_count</code>.
     */
    public final TableField<EdcContractNegotiationRecord, Integer> STATE_COUNT = createField(DSL.name("state_count"), SQLDataType.INTEGER.defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.edc_contract_negotiation.state_timestamp</code>.
     */
    public final TableField<EdcContractNegotiationRecord, Long> STATE_TIMESTAMP = createField(DSL.name("state_timestamp"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.edc_contract_negotiation.error_detail</code>.
     */
    public final TableField<EdcContractNegotiationRecord, String> ERROR_DETAIL = createField(DSL.name("error_detail"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.edc_contract_negotiation.agreement_id</code>.
     * ContractAgreement serialized as JSON
     */
    public final TableField<EdcContractNegotiationRecord, String> AGREEMENT_ID = createField(DSL.name("agreement_id"), SQLDataType.VARCHAR, this, "ContractAgreement serialized as JSON");

    /**
     * The column <code>public.edc_contract_negotiation.contract_offers</code>.
     * List&lt;ContractOffer&gt; serialized as JSON
     */
    public final TableField<EdcContractNegotiationRecord, JSON> CONTRACT_OFFERS = createField(DSL.name("contract_offers"), SQLDataType.JSON, this, "List<ContractOffer> serialized as JSON");

    /**
     * The column
     * <code>public.edc_contract_negotiation.callback_addresses</code>.
     */
    public final TableField<EdcContractNegotiationRecord, JSON> CALLBACK_ADDRESSES = createField(DSL.name("callback_addresses"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.edc_contract_negotiation.trace_context</code>.
     * Map&lt;String,String&gt; serialized as JSON
     */
    public final TableField<EdcContractNegotiationRecord, JSON> TRACE_CONTEXT = createField(DSL.name("trace_context"), SQLDataType.JSON, this, "Map<String,String> serialized as JSON");

    /**
     * The column <code>public.edc_contract_negotiation.pending</code>.
     */
    public final TableField<EdcContractNegotiationRecord, Boolean> PENDING = createField(DSL.name("pending"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column
     * <code>public.edc_contract_negotiation.protocol_messages</code>.
     */
    public final TableField<EdcContractNegotiationRecord, JSON> PROTOCOL_MESSAGES = createField(DSL.name("protocol_messages"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.edc_contract_negotiation.lease_id</code>.
     */
    public final TableField<EdcContractNegotiationRecord, String> LEASE_ID = createField(DSL.name("lease_id"), SQLDataType.VARCHAR, this, "");

    private EdcContractNegotiation(Name alias, Table<EdcContractNegotiationRecord> aliased) {
        this(alias, aliased, null);
    }

    private EdcContractNegotiation(Name alias, Table<EdcContractNegotiationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.edc_contract_negotiation</code> table
     * reference
     */
    public EdcContractNegotiation(String alias) {
        this(DSL.name(alias), EDC_CONTRACT_NEGOTIATION);
    }

    /**
     * Create an aliased <code>public.edc_contract_negotiation</code> table
     * reference
     */
    public EdcContractNegotiation(Name alias) {
        this(alias, EDC_CONTRACT_NEGOTIATION);
    }

    /**
     * Create a <code>public.edc_contract_negotiation</code> table reference
     */
    public EdcContractNegotiation() {
        this(DSL.name("edc_contract_negotiation"), null);
    }

    public <O extends Record> EdcContractNegotiation(Table<O> child, ForeignKey<O, EdcContractNegotiationRecord> key) {
        super(child, key, EDC_CONTRACT_NEGOTIATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CONTRACT_NEGOTIATION_CORRELATIONID_INDEX, Indexes.CONTRACT_NEGOTIATION_STATE);
    }

    @Override
    public UniqueKey<EdcContractNegotiationRecord> getPrimaryKey() {
        return Keys.CONTRACT_NEGOTIATION_PK;
    }

    @Override
    public List<ForeignKey<EdcContractNegotiationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EDC_CONTRACT_NEGOTIATION__CONTRACT_NEGOTIATION_CONTRACT_AGREEMENT_ID_FK, Keys.EDC_CONTRACT_NEGOTIATION__CONTRACT_NEGOTIATION_LEASE_LEASE_ID_FK);
    }

    private transient EdcContractAgreement _edcContractAgreement;
    private transient EdcLease _edcLease;

    /**
     * Get the implicit join path to the
     * <code>public.edc_contract_agreement</code> table.
     */
    public EdcContractAgreement edcContractAgreement() {
        if (_edcContractAgreement == null)
            _edcContractAgreement = new EdcContractAgreement(this, Keys.EDC_CONTRACT_NEGOTIATION__CONTRACT_NEGOTIATION_CONTRACT_AGREEMENT_ID_FK);

        return _edcContractAgreement;
    }

    /**
     * Get the implicit join path to the <code>public.edc_lease</code> table.
     */
    public EdcLease edcLease() {
        if (_edcLease == null)
            _edcLease = new EdcLease(this, Keys.EDC_CONTRACT_NEGOTIATION__CONTRACT_NEGOTIATION_LEASE_LEASE_ID_FK);

        return _edcLease;
    }

    @Override
    public EdcContractNegotiation as(String alias) {
        return new EdcContractNegotiation(DSL.name(alias), this);
    }

    @Override
    public EdcContractNegotiation as(Name alias) {
        return new EdcContractNegotiation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcContractNegotiation rename(String name) {
        return new EdcContractNegotiation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcContractNegotiation rename(Name name) {
        return new EdcContractNegotiation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<String, Long, Long, String, String, String, String, String, Integer, Integer, Long, String, String, JSON, JSON, JSON, Boolean, JSON, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
