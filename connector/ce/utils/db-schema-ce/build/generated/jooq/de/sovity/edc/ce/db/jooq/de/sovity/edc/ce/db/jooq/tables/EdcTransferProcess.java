/*
 * This file is generated by jOOQ.
 */
package de.sovity.edc.ce.db.jooq.tables;


import de.sovity.edc.ce.db.jooq.Indexes;
import de.sovity.edc.ce.db.jooq.Keys;
import de.sovity.edc.ce.db.jooq.Public;
import de.sovity.edc.ce.db.jooq.tables.records.EdcTransferProcessRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EdcTransferProcess extends TableImpl<EdcTransferProcessRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.edc_transfer_process</code>
     */
    public static final EdcTransferProcess EDC_TRANSFER_PROCESS = new EdcTransferProcess();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EdcTransferProcessRecord> getRecordType() {
        return EdcTransferProcessRecord.class;
    }

    /**
     * The column <code>public.edc_transfer_process.transferprocess_id</code>.
     */
    public final TableField<EdcTransferProcessRecord, String> TRANSFERPROCESS_ID = createField(DSL.name("transferprocess_id"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.edc_transfer_process.type</code>.
     */
    public final TableField<EdcTransferProcessRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.edc_transfer_process.state</code>.
     */
    public final TableField<EdcTransferProcessRecord, Integer> STATE = createField(DSL.name("state"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.edc_transfer_process.state_count</code>.
     */
    public final TableField<EdcTransferProcessRecord, Integer> STATE_COUNT = createField(DSL.name("state_count"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.edc_transfer_process.state_time_stamp</code>.
     */
    public final TableField<EdcTransferProcessRecord, Long> STATE_TIME_STAMP = createField(DSL.name("state_time_stamp"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.edc_transfer_process.created_at</code>.
     */
    public final TableField<EdcTransferProcessRecord, Long> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.edc_transfer_process.updated_at</code>.
     */
    public final TableField<EdcTransferProcessRecord, Long> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.edc_transfer_process.trace_context</code>. Java
     * Map serialized as JSON
     */
    public final TableField<EdcTransferProcessRecord, JSON> TRACE_CONTEXT = createField(DSL.name("trace_context"), SQLDataType.JSON, this, "Java Map serialized as JSON");

    /**
     * The column <code>public.edc_transfer_process.error_detail</code>.
     */
    public final TableField<EdcTransferProcessRecord, String> ERROR_DETAIL = createField(DSL.name("error_detail"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.edc_transfer_process.resource_manifest</code>.
     * java ResourceManifest serialized as JSON
     */
    public final TableField<EdcTransferProcessRecord, JSON> RESOURCE_MANIFEST = createField(DSL.name("resource_manifest"), SQLDataType.JSON, this, "java ResourceManifest serialized as JSON");

    /**
     * The column
     * <code>public.edc_transfer_process.provisioned_resource_set</code>.
     * ProvisionedResourceSet serialized as JSON
     */
    public final TableField<EdcTransferProcessRecord, JSON> PROVISIONED_RESOURCE_SET = createField(DSL.name("provisioned_resource_set"), SQLDataType.JSON, this, "ProvisionedResourceSet serialized as JSON");

    /**
     * The column <code>public.edc_transfer_process.content_data_address</code>.
     * DataAddress serialized as JSON
     */
    public final TableField<EdcTransferProcessRecord, JSON> CONTENT_DATA_ADDRESS = createField(DSL.name("content_data_address"), SQLDataType.JSON, this, "DataAddress serialized as JSON");

    /**
     * The column
     * <code>public.edc_transfer_process.deprovisioned_resources</code>. List of
     * deprovisioned resources, serialized as JSON
     */
    public final TableField<EdcTransferProcessRecord, JSON> DEPROVISIONED_RESOURCES = createField(DSL.name("deprovisioned_resources"), SQLDataType.JSON, this, "List of deprovisioned resources, serialized as JSON");

    /**
     * The column <code>public.edc_transfer_process.private_properties</code>.
     */
    public final TableField<EdcTransferProcessRecord, JSON> PRIVATE_PROPERTIES = createField(DSL.name("private_properties"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.edc_transfer_process.callback_addresses</code>.
     */
    public final TableField<EdcTransferProcessRecord, JSON> CALLBACK_ADDRESSES = createField(DSL.name("callback_addresses"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.edc_transfer_process.pending</code>.
     */
    public final TableField<EdcTransferProcessRecord, Boolean> PENDING = createField(DSL.name("pending"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.edc_transfer_process.transfer_type</code>.
     */
    public final TableField<EdcTransferProcessRecord, String> TRANSFER_TYPE = createField(DSL.name("transfer_type"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.edc_transfer_process.protocol_messages</code>.
     */
    public final TableField<EdcTransferProcessRecord, JSON> PROTOCOL_MESSAGES = createField(DSL.name("protocol_messages"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.edc_transfer_process.data_plane_id</code>.
     */
    public final TableField<EdcTransferProcessRecord, String> DATA_PLANE_ID = createField(DSL.name("data_plane_id"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.edc_transfer_process.correlation_id</code>.
     */
    public final TableField<EdcTransferProcessRecord, String> CORRELATION_ID = createField(DSL.name("correlation_id"), SQLDataType.VARCHAR, this, "");

    /**
     * The column
     * <code>public.edc_transfer_process.counter_party_address</code>.
     */
    public final TableField<EdcTransferProcessRecord, String> COUNTER_PARTY_ADDRESS = createField(DSL.name("counter_party_address"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.edc_transfer_process.protocol</code>.
     */
    public final TableField<EdcTransferProcessRecord, String> PROTOCOL = createField(DSL.name("protocol"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.edc_transfer_process.asset_id</code>.
     */
    public final TableField<EdcTransferProcessRecord, String> ASSET_ID = createField(DSL.name("asset_id"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.edc_transfer_process.contract_id</code>.
     */
    public final TableField<EdcTransferProcessRecord, String> CONTRACT_ID = createField(DSL.name("contract_id"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.edc_transfer_process.data_destination</code>.
     */
    public final TableField<EdcTransferProcessRecord, JSON> DATA_DESTINATION = createField(DSL.name("data_destination"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.edc_transfer_process.lease_id</code>.
     */
    public final TableField<EdcTransferProcessRecord, String> LEASE_ID = createField(DSL.name("lease_id"), SQLDataType.VARCHAR, this, "");

    private EdcTransferProcess(Name alias, Table<EdcTransferProcessRecord> aliased) {
        this(alias, aliased, null);
    }

    private EdcTransferProcess(Name alias, Table<EdcTransferProcessRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.edc_transfer_process</code> table
     * reference
     */
    public EdcTransferProcess(String alias) {
        this(DSL.name(alias), EDC_TRANSFER_PROCESS);
    }

    /**
     * Create an aliased <code>public.edc_transfer_process</code> table
     * reference
     */
    public EdcTransferProcess(Name alias) {
        this(alias, EDC_TRANSFER_PROCESS);
    }

    /**
     * Create a <code>public.edc_transfer_process</code> table reference
     */
    public EdcTransferProcess() {
        this(DSL.name("edc_transfer_process"), null);
    }

    public <O extends Record> EdcTransferProcess(Table<O> child, ForeignKey<O, EdcTransferProcessRecord> key) {
        super(child, key, EDC_TRANSFER_PROCESS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TRANSFER_PROCESS_STATE);
    }

    @Override
    public UniqueKey<EdcTransferProcessRecord> getPrimaryKey() {
        return Keys.TRANSFER_PROCESS_PK;
    }

    @Override
    public List<ForeignKey<EdcTransferProcessRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EDC_TRANSFER_PROCESS__TRANSFER_PROCESS_LEASE_LEASE_ID_FK);
    }

    private transient EdcLease _edcLease;

    /**
     * Get the implicit join path to the <code>public.edc_lease</code> table.
     */
    public EdcLease edcLease() {
        if (_edcLease == null)
            _edcLease = new EdcLease(this, Keys.EDC_TRANSFER_PROCESS__TRANSFER_PROCESS_LEASE_LEASE_ID_FK);

        return _edcLease;
    }

    @Override
    public EdcTransferProcess as(String alias) {
        return new EdcTransferProcess(DSL.name(alias), this);
    }

    @Override
    public EdcTransferProcess as(Name alias) {
        return new EdcTransferProcess(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcTransferProcess rename(String name) {
        return new EdcTransferProcess(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcTransferProcess rename(Name name) {
        return new EdcTransferProcess(name, null);
    }
}
