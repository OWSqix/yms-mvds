/*
 * This file is generated by jOOQ.
 */
package de.sovity.edc.ce.db.jooq.tables;


import de.sovity.edc.ce.db.jooq.Keys;
import de.sovity.edc.ce.db.jooq.Public;
import de.sovity.edc.ce.db.jooq.tables.records.EdcBusinessPartnerGroupRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EdcBusinessPartnerGroup extends TableImpl<EdcBusinessPartnerGroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.edc_business_partner_group</code>
     */
    public static final EdcBusinessPartnerGroup EDC_BUSINESS_PARTNER_GROUP = new EdcBusinessPartnerGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EdcBusinessPartnerGroupRecord> getRecordType() {
        return EdcBusinessPartnerGroupRecord.class;
    }

    /**
     * The column <code>public.edc_business_partner_group.bpn</code>.
     */
    public final TableField<EdcBusinessPartnerGroupRecord, String> BPN = createField(DSL.name("bpn"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.edc_business_partner_group.groups</code>.
     */
    public final TableField<EdcBusinessPartnerGroupRecord, JSON> GROUPS = createField(DSL.name("groups"), SQLDataType.JSON.nullable(false).defaultValue(DSL.field("'[] '::json", SQLDataType.JSON)), this, "");

    private EdcBusinessPartnerGroup(Name alias, Table<EdcBusinessPartnerGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private EdcBusinessPartnerGroup(Name alias, Table<EdcBusinessPartnerGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.edc_business_partner_group</code> table
     * reference
     */
    public EdcBusinessPartnerGroup(String alias) {
        this(DSL.name(alias), EDC_BUSINESS_PARTNER_GROUP);
    }

    /**
     * Create an aliased <code>public.edc_business_partner_group</code> table
     * reference
     */
    public EdcBusinessPartnerGroup(Name alias) {
        this(alias, EDC_BUSINESS_PARTNER_GROUP);
    }

    /**
     * Create a <code>public.edc_business_partner_group</code> table reference
     */
    public EdcBusinessPartnerGroup() {
        this(DSL.name("edc_business_partner_group"), null);
    }

    public <O extends Record> EdcBusinessPartnerGroup(Table<O> child, ForeignKey<O, EdcBusinessPartnerGroupRecord> key) {
        super(child, key, EDC_BUSINESS_PARTNER_GROUP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<EdcBusinessPartnerGroupRecord> getPrimaryKey() {
        return Keys.EDC_BUSINESS_PARTNER_GROUP_PK;
    }

    @Override
    public EdcBusinessPartnerGroup as(String alias) {
        return new EdcBusinessPartnerGroup(DSL.name(alias), this);
    }

    @Override
    public EdcBusinessPartnerGroup as(Name alias) {
        return new EdcBusinessPartnerGroup(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcBusinessPartnerGroup rename(String name) {
        return new EdcBusinessPartnerGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcBusinessPartnerGroup rename(Name name) {
        return new EdcBusinessPartnerGroup(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, JSON> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
