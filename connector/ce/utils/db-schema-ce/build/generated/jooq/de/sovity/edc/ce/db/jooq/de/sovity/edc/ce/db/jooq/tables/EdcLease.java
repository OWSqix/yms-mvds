/*
 * This file is generated by jOOQ.
 */
package de.sovity.edc.ce.db.jooq.tables;


import de.sovity.edc.ce.db.jooq.Keys;
import de.sovity.edc.ce.db.jooq.Public;
import de.sovity.edc.ce.db.jooq.tables.records.EdcLeaseRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EdcLease extends TableImpl<EdcLeaseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.edc_lease</code>
     */
    public static final EdcLease EDC_LEASE = new EdcLease();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EdcLeaseRecord> getRecordType() {
        return EdcLeaseRecord.class;
    }

    /**
     * The column <code>public.edc_lease.leased_by</code>.
     */
    public final TableField<EdcLeaseRecord, String> LEASED_BY = createField(DSL.name("leased_by"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.edc_lease.leased_at</code>. posix timestamp of
     * lease
     */
    public final TableField<EdcLeaseRecord, Long> LEASED_AT = createField(DSL.name("leased_at"), SQLDataType.BIGINT, this, "posix timestamp of lease");

    /**
     * The column <code>public.edc_lease.lease_duration</code>. duration of
     * lease in milliseconds
     */
    public final TableField<EdcLeaseRecord, Integer> LEASE_DURATION = createField(DSL.name("lease_duration"), SQLDataType.INTEGER.nullable(false), this, "duration of lease in milliseconds");

    /**
     * The column <code>public.edc_lease.lease_id</code>.
     */
    public final TableField<EdcLeaseRecord, String> LEASE_ID = createField(DSL.name("lease_id"), SQLDataType.VARCHAR.nullable(false), this, "");

    private EdcLease(Name alias, Table<EdcLeaseRecord> aliased) {
        this(alias, aliased, null);
    }

    private EdcLease(Name alias, Table<EdcLeaseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.edc_lease</code> table reference
     */
    public EdcLease(String alias) {
        this(DSL.name(alias), EDC_LEASE);
    }

    /**
     * Create an aliased <code>public.edc_lease</code> table reference
     */
    public EdcLease(Name alias) {
        this(alias, EDC_LEASE);
    }

    /**
     * Create a <code>public.edc_lease</code> table reference
     */
    public EdcLease() {
        this(DSL.name("edc_lease"), null);
    }

    public <O extends Record> EdcLease(Table<O> child, ForeignKey<O, EdcLeaseRecord> key) {
        super(child, key, EDC_LEASE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<EdcLeaseRecord> getPrimaryKey() {
        return Keys.LEASE_PK;
    }

    @Override
    public EdcLease as(String alias) {
        return new EdcLease(DSL.name(alias), this);
    }

    @Override
    public EdcLease as(Name alias) {
        return new EdcLease(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcLease rename(String name) {
        return new EdcLease(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcLease rename(Name name) {
        return new EdcLease(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Long, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
