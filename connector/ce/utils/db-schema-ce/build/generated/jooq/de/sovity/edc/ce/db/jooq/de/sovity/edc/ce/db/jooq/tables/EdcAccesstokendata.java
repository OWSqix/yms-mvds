/*
 * This file is generated by jOOQ.
 */
package de.sovity.edc.ce.db.jooq.tables;


import de.sovity.edc.ce.db.jooq.Keys;
import de.sovity.edc.ce.db.jooq.Public;
import de.sovity.edc.ce.db.jooq.tables.records.EdcAccesstokendataRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EdcAccesstokendata extends TableImpl<EdcAccesstokendataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.edc_accesstokendata</code>
     */
    public static final EdcAccesstokendata EDC_ACCESSTOKENDATA = new EdcAccesstokendata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EdcAccesstokendataRecord> getRecordType() {
        return EdcAccesstokendataRecord.class;
    }

    /**
     * The column <code>public.edc_accesstokendata.id</code>.
     */
    public final TableField<EdcAccesstokendataRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.edc_accesstokendata.claim_token</code>.
     * ClaimToken serialized as JSON map
     */
    public final TableField<EdcAccesstokendataRecord, JSON> CLAIM_TOKEN = createField(DSL.name("claim_token"), SQLDataType.JSON.nullable(false), this, "ClaimToken serialized as JSON map");

    /**
     * The column <code>public.edc_accesstokendata.data_address</code>.
     * DataAddress serialized as JSON map
     */
    public final TableField<EdcAccesstokendataRecord, JSON> DATA_ADDRESS = createField(DSL.name("data_address"), SQLDataType.JSON.nullable(false), this, "DataAddress serialized as JSON map");

    /**
     * The column <code>public.edc_accesstokendata.additional_properties</code>.
     * Optional Additional properties serialized as JSON map
     */
    public final TableField<EdcAccesstokendataRecord, JSON> ADDITIONAL_PROPERTIES = createField(DSL.name("additional_properties"), SQLDataType.JSON.defaultValue(DSL.field("'{}'::json", SQLDataType.JSON)), this, "Optional Additional properties serialized as JSON map");

    private EdcAccesstokendata(Name alias, Table<EdcAccesstokendataRecord> aliased) {
        this(alias, aliased, null);
    }

    private EdcAccesstokendata(Name alias, Table<EdcAccesstokendataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.edc_accesstokendata</code> table reference
     */
    public EdcAccesstokendata(String alias) {
        this(DSL.name(alias), EDC_ACCESSTOKENDATA);
    }

    /**
     * Create an aliased <code>public.edc_accesstokendata</code> table reference
     */
    public EdcAccesstokendata(Name alias) {
        this(alias, EDC_ACCESSTOKENDATA);
    }

    /**
     * Create a <code>public.edc_accesstokendata</code> table reference
     */
    public EdcAccesstokendata() {
        this(DSL.name("edc_accesstokendata"), null);
    }

    public <O extends Record> EdcAccesstokendata(Table<O> child, ForeignKey<O, EdcAccesstokendataRecord> key) {
        super(child, key, EDC_ACCESSTOKENDATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<EdcAccesstokendataRecord> getPrimaryKey() {
        return Keys.EDC_ACCESSTOKENDATA_PKEY;
    }

    @Override
    public EdcAccesstokendata as(String alias) {
        return new EdcAccesstokendata(DSL.name(alias), this);
    }

    @Override
    public EdcAccesstokendata as(Name alias) {
        return new EdcAccesstokendata(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcAccesstokendata rename(String name) {
        return new EdcAccesstokendata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EdcAccesstokendata rename(Name name) {
        return new EdcAccesstokendata(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, JSON, JSON, JSON> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
